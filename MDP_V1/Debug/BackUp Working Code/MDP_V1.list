
MDP_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  0800dcd8  0800dcd8  0001dcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec04  0800ec04  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec04  0800ec04  0001ec04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec0c  0800ec0c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec0c  0800ec0c  0001ec0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ec14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00005228  20000208  20000208  00020208  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005430  20005430  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb4d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e69  00000000  00000000  0003fd81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  00043bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018e0  00000000  00000000  00045640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005cc3  00000000  00000000  00046f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ddf5  00000000  00000000  0004cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc696  00000000  00000000  0006a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014706e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081c0  00000000  00000000  001470c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcbc 	.word	0x0800dcbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800dcbc 	.word	0x0800dcbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f001 ffc4 	bl	8002f1c <HAL_Init>

  /* USER CODE BEGIN Init */
	OLED_Init();
 8000f94:	f009 fdf8 	bl	800ab88 <OLED_Init>
	PID_init(&left_pid, PID_POSITION, pid_param, max_out, max_iout);
 8000f98:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <main+0x124>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <main+0x128>)
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	eef0 0a47 	vmov.f32	s1, s14
 8000fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fac:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <main+0x12c>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4842      	ldr	r0, [pc, #264]	; (80010bc <main+0x130>)
 8000fb2:	f001 fa0c 	bl	80023ce <PID_init>
	PID_init(&right_pid, PID_POSITION, pid_param, max_out, max_iout);
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <main+0x124>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <main+0x128>)
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	eef0 0a47 	vmov.f32	s1, s14
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	4a3b      	ldr	r2, [pc, #236]	; (80010b8 <main+0x12c>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <main+0x134>)
 8000fd0:	f001 f9fd 	bl	80023ce <PID_init>

	PID_init(&left_turn_pid, PID_POSITION, pid_param_turn, max_out_turn,
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <main+0x138>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <main+0x128>)
 8000fdc:	ed93 7a00 	vldr	s14, [r3]
 8000fe0:	eef0 0a47 	vmov.f32	s1, s14
 8000fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe8:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <main+0x13c>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <main+0x140>)
 8000fee:	f001 f9ee 	bl	80023ce <PID_init>
			max_iout);
	PID_init(&right_turn_pid, PID_POSITION, pid_param_turn, max_out_turn,
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <main+0x138>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <main+0x128>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	eef0 0a47 	vmov.f32	s1, s14
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <main+0x13c>)
 8001008:	2100      	movs	r1, #0
 800100a:	4831      	ldr	r0, [pc, #196]	; (80010d0 <main+0x144>)
 800100c:	f001 f9df 	bl	80023ce <PID_init>
			max_iout);
	ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS);
 8001010:	2203      	movs	r2, #3
 8001012:	2100      	movs	r1, #0
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <main+0x148>)
 8001016:	f009 fbb2 	bl	800a77e <ICM20948_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f879 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fb71 	bl	8001704 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001022:	f000 fa9b 	bl	800155c <MX_TIM8_Init>
  MX_TIM1_Init();
 8001026:	f000 f8ff 	bl	8001228 <MX_TIM1_Init>
  MX_TIM2_Init();
 800102a:	f000 f99b 	bl	8001364 <MX_TIM2_Init>
  MX_TIM3_Init();
 800102e:	f000 f9ed 	bl	800140c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001032:	f000 fb3d 	bl	80016b0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001036:	f000 fa3d 	bl	80014b4 <MX_TIM4_Init>
  MX_I2C1_Init();
 800103a:	f000 f8c7 	bl	80011cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	OLED_Init();
 800103e:	f009 fda3 	bl	800ab88 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 8001042:	220a      	movs	r2, #10
 8001044:	4924      	ldr	r1, [pc, #144]	; (80010d8 <main+0x14c>)
 8001046:	4825      	ldr	r0, [pc, #148]	; (80010dc <main+0x150>)
 8001048:	f005 fc7b 	bl	8006942 <HAL_UART_Receive_IT>

	//start pwm
	//servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800104c:	210c      	movs	r1, #12
 800104e:	4824      	ldr	r0, [pc, #144]	; (80010e0 <main+0x154>)
 8001050:	f004 f8da 	bl	8005208 <HAL_TIM_PWM_Start>

	// Left Motor Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001054:	213c      	movs	r1, #60	; 0x3c
 8001056:	4823      	ldr	r0, [pc, #140]	; (80010e4 <main+0x158>)
 8001058:	f004 fa93 	bl	8005582 <HAL_TIM_Encoder_Start>
	// Right Motor Encoder
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800105c:	213c      	movs	r1, #60	; 0x3c
 800105e:	4822      	ldr	r0, [pc, #136]	; (80010e8 <main+0x15c>)
 8001060:	f004 fa8f 	bl	8005582 <HAL_TIM_Encoder_Start>

	// Set up the Motors PWM
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	4821      	ldr	r0, [pc, #132]	; (80010ec <main+0x160>)
 8001068:	f004 f8ce 	bl	8005208 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800106c:	2104      	movs	r1, #4
 800106e:	481f      	ldr	r0, [pc, #124]	; (80010ec <main+0x160>)
 8001070:	f004 f8ca 	bl	8005208 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001074:	f006 fc42 	bl	80078fc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of chassisCommandQueue */
  chassisCommandQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &chassisCommandQueue_attributes);
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <main+0x164>)
 800107a:	2104      	movs	r1, #4
 800107c:	2010      	movs	r0, #16
 800107e:	f006 fd34 	bl	8007aea <osMessageQueueNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <main+0x168>)
 8001086:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <main+0x16c>)
 800108a:	2100      	movs	r1, #0
 800108c:	481b      	ldr	r0, [pc, #108]	; (80010fc <main+0x170>)
 800108e:	f006 fc7f 	bl	8007990 <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <main+0x174>)
 8001096:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassisTask, NULL, &ChassisTask_attributes);
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <main+0x178>)
 800109a:	2100      	movs	r1, #0
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <main+0x17c>)
 800109e:	f006 fc77 	bl	8007990 <osThreadNew>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <main+0x180>)
 80010a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a8:	f006 fc4c 	bl	8007944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010ac:	e7fe      	b.n	80010ac <main+0x120>
 80010ae:	bf00      	nop
 80010b0:	20000018 	.word	0x20000018
 80010b4:	20000020 	.word	0x20000020
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000480 	.word	0x20000480
 80010c0:	200004d0 	.word	0x200004d0
 80010c4:	2000001c 	.word	0x2000001c
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000520 	.word	0x20000520
 80010d0:	20000570 	.word	0x20000570
 80010d4:	20000230 	.word	0x20000230
 80010d8:	20000224 	.word	0x20000224
 80010dc:	200003ec 	.word	0x200003ec
 80010e0:	20000284 	.word	0x20000284
 80010e4:	200002cc 	.word	0x200002cc
 80010e8:	20000314 	.word	0x20000314
 80010ec:	200003a4 	.word	0x200003a4
 80010f0:	0800dd94 	.word	0x0800dd94
 80010f4:	20000438 	.word	0x20000438
 80010f8:	0800dd4c 	.word	0x0800dd4c
 80010fc:	08001c65 	.word	0x08001c65
 8001100:	20000430 	.word	0x20000430
 8001104:	0800dd70 	.word	0x0800dd70
 8001108:	08001c89 	.word	0x08001c89
 800110c:	20000434 	.word	0x20000434

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	; 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f009 fef3 	bl	800af0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SystemClock_Config+0xb4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <SystemClock_Config+0xb4>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <SystemClock_Config+0xb4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <SystemClock_Config+0xb8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <SystemClock_Config+0xb8>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <SystemClock_Config+0xb8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fa5d 	bl	8004640 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800118c:	f001 f91a 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fcc0 	bl	8004b30 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011b6:	f001 f905 	bl	80023c4 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_I2C1_Init+0x50>)
 800120a:	f002 fa31 	bl	8003670 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f001 f8d6 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000230 	.word	0x20000230
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	; 0x58
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2220      	movs	r2, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f009 fe52 	bl	800af0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <MX_TIM1_Init+0x134>)
 8001268:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <MX_TIM1_Init+0x138>)
 800126a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_TIM1_Init+0x134>)
 800126e:	22a0      	movs	r2, #160	; 0xa0
 8001270:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <MX_TIM1_Init+0x134>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <MX_TIM1_Init+0x134>)
 800127a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <MX_TIM1_Init+0x134>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <MX_TIM1_Init+0x134>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <MX_TIM1_Init+0x134>)
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001292:	4832      	ldr	r0, [pc, #200]	; (800135c <MX_TIM1_Init+0x134>)
 8001294:	f003 fe9e 	bl	8004fd4 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800129e:	f001 f891 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ac:	4619      	mov	r1, r3
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_TIM1_Init+0x134>)
 80012b0:	f004 fc5c 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ba:	f001 f883 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <MX_TIM1_Init+0x134>)
 80012c0:	f003 ff48 	bl	8005154 <HAL_TIM_PWM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ca:	f001 f87b 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012da:	4619      	mov	r1, r3
 80012dc:	481f      	ldr	r0, [pc, #124]	; (800135c <MX_TIM1_Init+0x134>)
 80012de:	f005 f96f 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e8:	f001 f86c 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	220c      	movs	r2, #12
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM1_Init+0x134>)
 800130e:	f004 fb6b 	bl	80059e8 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001318:	f001 f854 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM1_Init+0x134>)
 8001340:	f005 f9ba 	bl	80066b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800134a:	f001 f83b 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM1_Init+0x134>)
 8001350:	f001 fb96 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000284 	.word	0x20000284
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 fdc9 	bl	800af0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_TIM2_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM2_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013b8:	230a      	movs	r3, #10
 80013ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013d4:	f004 f82f 	bl	8005436 <HAL_TIM_Encoder_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013de:	f000 fff1 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013f0:	f005 f8e6 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013fa:	f000 ffe3 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002cc 	.word	0x200002cc

0800140c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f009 fd75 	bl	800af0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_TIM3_Init+0xa0>)
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_TIM3_Init+0xa4>)
 800142c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_TIM3_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM3_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM3_Init+0xa0>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM3_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM3_Init+0xa0>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144e:	2303      	movs	r3, #3
 8001450:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM3_Init+0xa0>)
 800147a:	f003 ffdc 	bl	8005436 <HAL_TIM_Encoder_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001484:	f000 ff9e 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM3_Init+0xa0>)
 8001496:	f005 f893 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014a0:	f000 ff90 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000314 	.word	0x20000314
 80014b0:	40000400 	.word	0x40000400

080014b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_TIM4_Init+0xa4>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014d8:	2247      	movs	r2, #71	; 0x47
 80014da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014f6:	4817      	ldr	r0, [pc, #92]	; (8001554 <MX_TIM4_Init+0xa0>)
 80014f8:	f003 ff4e 	bl	8005398 <HAL_TIM_IC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001502:	f000 ff5f 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4619      	mov	r1, r3
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_TIM4_Init+0xa0>)
 8001516:	f005 f853 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 ff50 	bl	80023c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001528:	2301      	movs	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	220c      	movs	r2, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_TIM4_Init+0xa0>)
 800153c:	f004 f9b7 	bl	80058ae <HAL_TIM_IC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001546:	f000 ff3d 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000035c 	.word	0x2000035c
 8001558:	40000800 	.word	0x40000800

0800155c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	; 0x58
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2220      	movs	r2, #32
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f009 fcb8 	bl	800af0a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <MX_TIM8_Init+0x14c>)
 800159c:	4a43      	ldr	r2, [pc, #268]	; (80016ac <MX_TIM8_Init+0x150>)
 800159e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015a0:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80015ac:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015ae:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015c6:	4838      	ldr	r0, [pc, #224]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015c8:	f003 fd04 	bl	8004fd4 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015d2:	f000 fef7 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015e0:	4619      	mov	r1, r3
 80015e2:	4831      	ldr	r0, [pc, #196]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015e4:	f004 fac2 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015ee:	f000 fee9 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015f2:	482d      	ldr	r0, [pc, #180]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015f4:	f003 fdae 	bl	8005154 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015fe:	f000 fee1 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800160a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800160e:	4619      	mov	r1, r3
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <MX_TIM8_Init+0x14c>)
 8001612:	f004 ffd5 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800161c:	f000 fed2 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM8_Init+0x14c>)
 8001646:	f004 f9cf 	bl	80059e8 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001650:	f000 feb8 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	2204      	movs	r2, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <MX_TIM8_Init+0x14c>)
 800165e:	f004 f9c3 	bl	80059e8 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001668:	f000 feac 	bl	80023c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM8_Init+0x14c>)
 8001690:	f005 f812 	bl	80066b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800169a:	f000 fe93 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3758      	adds	r7, #88	; 0x58
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003a4 	.word	0x200003a4
 80016ac:	40010400 	.word	0x40010400

080016b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_USART3_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USART3_UART_Init+0x4c>)
 80016e8:	f005 f84c 	bl	8006784 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f000 fe67 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200003ec 	.word	0x200003ec
 8001700:	40004800 	.word	0x40004800

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <MX_GPIO_Init+0x120>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a40      	ldr	r2, [pc, #256]	; (8001824 <MX_GPIO_Init+0x120>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <MX_GPIO_Init+0x120>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <MX_GPIO_Init+0x120>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a39      	ldr	r2, [pc, #228]	; (8001824 <MX_GPIO_Init+0x120>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <MX_GPIO_Init+0x120>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <MX_GPIO_Init+0x120>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <MX_GPIO_Init+0x120>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <MX_GPIO_Init+0x120>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <MX_GPIO_Init+0x120>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <MX_GPIO_Init+0x120>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <MX_GPIO_Init+0x120>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <MX_GPIO_Init+0x120>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <MX_GPIO_Init+0x120>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_GPIO_Init+0x120>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80017ac:	481e      	ldr	r0, [pc, #120]	; (8001828 <MX_GPIO_Init+0x124>)
 80017ae:	f001 ff2b 	bl	8003608 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	213c      	movs	r1, #60	; 0x3c
 80017b6:	481d      	ldr	r0, [pc, #116]	; (800182c <MX_GPIO_Init+0x128>)
 80017b8:	f001 ff26 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UltrasonicTrig_GPIO_Port, UltrasonicTrig_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2110      	movs	r1, #16
 80017c0:	481b      	ldr	r0, [pc, #108]	; (8001830 <MX_GPIO_Init+0x12c>)
 80017c2:	f001 ff21 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80017c6:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80017ca:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4812      	ldr	r0, [pc, #72]	; (8001828 <MX_GPIO_Init+0x124>)
 80017e0:	f001 fd76 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80017e4:	233c      	movs	r3, #60	; 0x3c
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_GPIO_Init+0x128>)
 80017fc:	f001 fd68 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UltrasonicTrig_Pin */
  GPIO_InitStruct.Pin = UltrasonicTrig_Pin;
 8001800:	2310      	movs	r3, #16
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UltrasonicTrig_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_GPIO_Init+0x12c>)
 8001818:	f001 fd5a 	bl	80032d0 <HAL_GPIO_Init>

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40021000 	.word	0x40021000
 800182c:	40020000 	.word	0x40020000
 8001830:	40020c00 	.word	0x40020c00

08001834 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b090      	sub	sp, #64	; 0x40
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	//Rpi transmit buffer
	uint8_t RpiBuffer[20] = "COMPLE\r\n";
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_UART_RxCpltCallback+0x150>)
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	ca07      	ldmia	r2, {r0, r1, r2}
 8001844:	c303      	stmia	r3!, {r0, r1}
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	f8c3 2007 	str.w	r2, [r3, #7]
	uint32_t cmd = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
	if (huart == &huart3) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <HAL_UART_RxCpltCallback+0x154>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f040 808b 	bne.w	800197a <HAL_UART_RxCpltCallback+0x146>
		char c1 = aRxBuffer[0];
 8001864:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_UART_RxCpltCallback+0x158>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		char c2 = aRxBuffer[1];
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_UART_RxCpltCallback+0x158>)
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		// char c3 = aRxBuffer[2];
		char d[4];
		memcpy(d, (void*) &aRxBuffer[2], 3);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2203      	movs	r2, #3
 800187a:	4945      	ldr	r1, [pc, #276]	; (8001990 <HAL_UART_RxCpltCallback+0x15c>)
 800187c:	4618      	mov	r0, r3
 800187e:	f009 fb36 	bl	800aeee <memcpy>
		d[3] = '\0';
 8001882:	2300      	movs	r3, #0
 8001884:	77fb      	strb	r3, [r7, #31]

		data = (uint32_t) atoi(d);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4618      	mov	r0, r3
 800188c:	f009 fa08 	bl	800aca0 <atoi>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_UART_RxCpltCallback+0x160>)
 8001896:	601a      	str	r2, [r3, #0]
		if (c1 == 'n') {
 8001898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800189c:	2b6e      	cmp	r3, #110	; 0x6e
 800189e:	d109      	bne.n	80018b4 <HAL_UART_RxCpltCallback+0x80>
			newCmdReceived = 1;
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_UART_RxCpltCallback+0x164>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, RpiBuffer, sizeof(RpiBuffer), 10);
 80018a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018aa:	230a      	movs	r3, #10
 80018ac:	2214      	movs	r2, #20
 80018ae:	4836      	ldr	r0, [pc, #216]	; (8001988 <HAL_UART_RxCpltCallback+0x154>)
 80018b0:	f004 ffb5 	bl	800681e <HAL_UART_Transmit>
		}
		directionCmd = c2;
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 80018b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018ba:	7013      	strb	r3, [r2, #0]
		// steeringCmd = c3;
		uint8_t message1[20];

		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_UART_RxCpltCallback+0x160>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f107 0008 	add.w	r0, r7, #8
 80018ca:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_UART_RxCpltCallback+0x16c>)
 80018cc:	f00a f89e 	bl	800ba0c <siprintf>
		OLED_ShowString(10, 10, message1);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	461a      	mov	r2, r3
 80018d6:	210a      	movs	r1, #10
 80018d8:	200a      	movs	r0, #10
 80018da:	f009 f923 	bl	800ab24 <OLED_ShowString>

		if (newCmdReceived == 1) {
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_UART_RxCpltCallback+0x164>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d144      	bne.n	8001970 <HAL_UART_RxCpltCallback+0x13c>
			// load direction Cmd and distance data into the queue using the cmd variable
			// w = 1, a = 2, s = 3, d = 4
			if (directionCmd == 'w')
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b77      	cmp	r3, #119	; 0x77
 80018ec:	d102      	bne.n	80018f4 <HAL_UART_RxCpltCallback+0xc0>
				cmd = MOVE_FORWARD;
 80018ee:	2301      	movs	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	e02b      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 'q')
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b71      	cmp	r3, #113	; 0x71
 80018fa:	d102      	bne.n	8001902 <HAL_UART_RxCpltCallback+0xce>
				cmd = MOVE_FORWARD_LEFT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	e024      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 'e')
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b65      	cmp	r3, #101	; 0x65
 8001908:	d102      	bne.n	8001910 <HAL_UART_RxCpltCallback+0xdc>
				cmd = MOVE_FORWARD_RIGHT;
 800190a:	2305      	movs	r3, #5
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	e01d      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 'x')
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b78      	cmp	r3, #120	; 0x78
 8001916:	d102      	bne.n	800191e <HAL_UART_RxCpltCallback+0xea>
				cmd = MOVE_BACKWARD;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	e016      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 'z')
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b7a      	cmp	r3, #122	; 0x7a
 8001924:	d102      	bne.n	800192c <HAL_UART_RxCpltCallback+0xf8>
				cmd = MOVE_BACKWARD_LEFT;
 8001926:	2304      	movs	r3, #4
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	e00f      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 'c')
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b63      	cmp	r3, #99	; 0x63
 8001932:	d102      	bne.n	800193a <HAL_UART_RxCpltCallback+0x106>
				cmd = MOVE_BACKWARD_RIGHT;
 8001934:	2306      	movs	r3, #6
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	e008      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else if (directionCmd == 's')
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_RxCpltCallback+0x168>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b73      	cmp	r3, #115	; 0x73
 8001940:	d102      	bne.n	8001948 <HAL_UART_RxCpltCallback+0x114>
				cmd = CENTER_CALIBRATION;
 8001942:	2307      	movs	r3, #7
 8001944:	623b      	str	r3, [r7, #32]
 8001946:	e001      	b.n	800194c <HAL_UART_RxCpltCallback+0x118>
			else
				cmd = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
			cmd = cmd * 1000 + data;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_UART_RxCpltCallback+0x160>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	623b      	str	r3, [r7, #32]

			// enqueue the command
			osStatus_t status = osMessageQueuePut(chassisCommandQueueHandle,
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_UART_RxCpltCallback+0x170>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f107 0120 	add.w	r1, r7, #32
 8001966:	2300      	movs	r3, #0
 8001968:	2200      	movs	r2, #0
 800196a:	f006 f931 	bl	8007bd0 <osMessageQueuePut>
 800196e:	63b8      	str	r0, [r7, #56]	; 0x38
			 sprintf(message1, "OTHER");
			 OLED_ShowString(10, 40, message1);
			 }
			 */
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8001970:	2205      	movs	r2, #5
 8001972:	4906      	ldr	r1, [pc, #24]	; (800198c <HAL_UART_RxCpltCallback+0x158>)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <HAL_UART_RxCpltCallback+0x154>)
 8001976:	f004 ffe4 	bl	8006942 <HAL_UART_Receive_IT>
	}
}
 800197a:	bf00      	nop
 800197c:	3740      	adds	r7, #64	; 0x40
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800dd10 	.word	0x0800dd10
 8001988:	200003ec 	.word	0x200003ec
 800198c:	20000224 	.word	0x20000224
 8001990:	20000226 	.word	0x20000226
 8001994:	2000022c 	.word	0x2000022c
 8001998:	20000229 	.word	0x20000229
 800199c:	2000022a 	.word	0x2000022a
 80019a0:	0800dd04 	.word	0x0800dd04
 80019a4:	20000438 	.word	0x20000438

080019a8 <setLeftPWM>:
 HAL_UART_Transmit(&huart3, (uint8_t*) aRxBuffer, 10, 0xFFFF);
 }
 */

//////////////////// Movement Helper Function ////////////////////
void setLeftPWM(uint16_t dutyCycle) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <setLeftPWM+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200003a4 	.word	0x200003a4

080019cc <setRightPWM>:

void setRightPWM(uint16_t dutyCycle) {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <setRightPWM+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200003a4 	.word	0x200003a4

080019f0 <setMotorForward>:
		setLeftPWM(2000);
		setRightPWM(2100);
	}
}

void setMotorForward() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2120      	movs	r1, #32
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <setMotorForward+0x30>)
 80019fa:	f001 fe05 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2110      	movs	r1, #16
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <setMotorForward+0x30>)
 8001a04:	f001 fe00 	bl	8003608 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <setMotorForward+0x30>)
 8001a0e:	f001 fdfb 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2108      	movs	r1, #8
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <setMotorForward+0x30>)
 8001a18:	f001 fdf6 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020000 	.word	0x40020000

08001a24 <setMotorBackward>:
void setMotorBackward() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <setMotorBackward+0x30>)
 8001a2e:	f001 fdeb 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2110      	movs	r1, #16
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <setMotorBackward+0x30>)
 8001a38:	f001 fde6 	bl	8003608 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <setMotorBackward+0x30>)
 8001a42:	f001 fde1 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <setMotorBackward+0x30>)
 8001a4c:	f001 fddc 	bl	8003608 <HAL_GPIO_WritePin>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000

08001a58 <turnLeft>:
void turnLeft() {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = LEFT_POS_PWM;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <turnLeft+0x18>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2269      	movs	r2, #105	; 0x69
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001a64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a68:	f006 f824 	bl	8007ab4 <osDelay>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000284 	.word	0x20000284

08001a74 <turnRight>:
void turnRight() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHT_POS_PWM;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <turnRight+0x18>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	22fa      	movs	r2, #250	; 0xfa
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001a80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a84:	f006 f816 	bl	8007ab4 <osDelay>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000284 	.word	0x20000284

08001a90 <faceFront>:
void faceFront() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = CENTER_POS_PWM;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <faceFront+0x18>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2296      	movs	r2, #150	; 0x96
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001a9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aa0:	f006 f808 	bl	8007ab4 <osDelay>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000284 	.word	0x20000284

08001aac <calibrate>:

void calibrate() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHT_POS_PWM;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <calibrate+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	22fa      	movs	r2, #250	; 0xfa
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001abc:	f005 fffa 	bl	8007ab4 <osDelay>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000284 	.word	0x20000284

08001ac8 <robotTurn>:

void robotTurn(float *targetAngle) {
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	6078      	str	r0, [r7, #4]
	angleNow = 0;
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <robotTurn+0x128>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
	gyroZ = 0;
 8001ad8:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <robotTurn+0x12c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8001ade:	f001 fa53 	bl	8002f88 <HAL_GetTick>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <robotTurn+0x130>)
 8001ae6:	6013      	str	r3, [r2, #0]
	do {
		if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8001ae8:	f001 fa4e 	bl	8002f88 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <robotTurn+0x130>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d9f7      	bls.n	8001ae8 <robotTurn+0x20>
			__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8001af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2302      	movs	r3, #2
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <robotTurn+0x134>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	2237      	movs	r2, #55	; 0x37
 8001b0a:	21d0      	movs	r1, #208	; 0xd0
 8001b0c:	483c      	ldr	r0, [pc, #240]	; (8001c00 <robotTurn+0x138>)
 8001b0e:	f001 ffed 	bl	8003aec <HAL_I2C_Mem_Read>
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <robotTurn+0x134>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <robotTurn+0x134>)
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <robotTurn+0x12c>)
 8001b26:	801a      	strh	r2, [r3, #0]
			angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <robotTurn+0x128>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_f2d>
 8001b32:	4604      	mov	r4, r0
 8001b34:	460d      	mov	r5, r1
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <robotTurn+0x12c>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fcf1 	bl	8000524 <__aeabi_i2d>
 8001b42:	a327      	add	r3, pc, #156	; (adr r3, 8001be0 <robotTurn+0x118>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe80 	bl	800084c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	a324      	add	r3, pc, #144	; (adr r3, 8001be8 <robotTurn+0x120>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fb91 	bl	800028c <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f839 	bl	8000be8 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <robotTurn+0x128>)
 8001b7a:	6013      	str	r3, [r2, #0]
			if (abs(angleNow - *targetAngle) < 0.01)
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <robotTurn+0x128>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b90:	ee17 3a90 	vmov	r3, s15
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0d      	blt.n	8001bb4 <robotTurn+0xec>
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <robotTurn+0x128>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	ee17 3a90 	vmov	r3, s15
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd05      	ble.n	8001bc0 <robotTurn+0xf8>
				break;
			last_curTask_tick = HAL_GetTick();
 8001bb4:	f001 f9e8 	bl	8002f88 <HAL_GetTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <robotTurn+0x130>)
 8001bbc:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8001bbe:	e793      	b.n	8001ae8 <robotTurn+0x20>
				break;
 8001bc0:	bf00      	nop
		}
	} while (1);
	setLeftPWM(0);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fef0 	bl	80019a8 <setLeftPWM>
	setRightPWM(0);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff feff 	bl	80019cc <setRightPWM>
	calibrate();
 8001bce:	f7ff ff6d 	bl	8001aac <calibrate>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	66666666 	.word	0x66666666
 8001be4:	40306666 	.word	0x40306666
 8001be8:	47ae147b 	.word	0x47ae147b
 8001bec:	3f847ae1 	.word	0x3f847ae1
 8001bf0:	20000440 	.word	0x20000440
 8001bf4:	20000446 	.word	0x20000446
 8001bf8:	20000448 	.word	0x20000448
 8001bfc:	20000444 	.word	0x20000444
 8001c00:	20000230 	.word	0x20000230

08001c04 <getEncoderDelta>:

// ENCODER HELPER FUNCTIONS
uint32_t getEncoderDelta(uint32_t count1, uint32_t count2,
		TIM_HandleTypeDef *htim) {
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d10e      	bne.n	8001c3c <getEncoderDelta+0x38>
		if (count2 <= count1) {
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d803      	bhi.n	8001c2e <getEncoderDelta+0x2a>
			return count1 - count2;
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	e014      	b.n	8001c58 <getEncoderDelta+0x54>
		} else {
			return (65535 - count2) + count1;
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c38:	33ff      	adds	r3, #255	; 0xff
 8001c3a:	e00d      	b.n	8001c58 <getEncoderDelta+0x54>
		}
	} else {
		if (count2 >= count1) {
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d303      	bcc.n	8001c4c <getEncoderDelta+0x48>
			return count2 - count1;
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	e005      	b.n	8001c58 <getEncoderDelta+0x54>
		} else {
			return (65535 - count1) + count2;
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c56:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		// Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <StartDefaultTask+0x20>)
 8001c72:	f001 fce2 	bl	800363a <HAL_GPIO_TogglePin>
		OLED_Refresh_Gram(); // Refresh Ram
 8001c76:	f008 fde1 	bl	800a83c <OLED_Refresh_Gram>
		osDelay(50);
 8001c7a:	2032      	movs	r0, #50	; 0x32
 8001c7c:	f005 ff1a 	bl	8007ab4 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001c80:	e7f4      	b.n	8001c6c <StartDefaultTask+0x8>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <chassisTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_chassisTask */
void chassisTask(void *argument)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b095      	sub	sp, #84	; 0x54
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN chassisTask */
	uint32_t encoder_A_count1 = 0, encoder_A_count2 = 0, encoder_A_count_delta =
 8001c90:	2300      	movs	r3, #0
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
			0, encoder_B_count1 = 0, encoder_B_count2 = 0,
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
			encoder_B_count_delta = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28

	uint8_t message1[20];
	uint32_t current_cmd = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

	// toMove Flag
	int toMove = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
	// disconnect the motor first
	//motorStop();
	faceFront();
 8001cb0:	f7ff feee 	bl	8001a90 <faceFront>

	// set initial values for count and ticks for both encoders
	encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 8001cb4:	4bac      	ldr	r3, [pc, #688]	; (8001f68 <chassisTask+0x2e0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
	encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8001cbc:	4bab      	ldr	r3, [pc, #684]	; (8001f6c <chassisTask+0x2e4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
	/* Infinite loop */
	for (;;) {
		int8_t directionCmdBuffer;
		int16_t distanceCmdBuffer;

		if (!toMove) {
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 81a2 	bne.w	8002010 <chassisTask+0x388>
			// decompose commands
			osMessageQueueGet(chassisCommandQueueHandle, &current_cmd, 0, 200);
 8001ccc:	4ba8      	ldr	r3, [pc, #672]	; (8001f70 <chassisTask+0x2e8>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	f107 010c 	add.w	r1, r7, #12
 8001cd4:	23c8      	movs	r3, #200	; 0xc8
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f005 ffda 	bl	8007c90 <osMessageQueueGet>
			sprintf(message1, "ACK: %d", current_cmd);
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	49a4      	ldr	r1, [pc, #656]	; (8001f74 <chassisTask+0x2ec>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f009 fe91 	bl	800ba0c <siprintf>

			OLED_ShowString(10, 20, message1);
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2114      	movs	r1, #20
 8001cf2:	200a      	movs	r0, #10
 8001cf4:	f008 ff16 	bl	800ab24 <OLED_ShowString>

			uint8_t directionCmd = current_cmd / 1000;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a9f      	ldr	r2, [pc, #636]	; (8001f78 <chassisTask+0x2f0>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint16_t distanceCmd = current_cmd % 1000;
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <chassisTask+0x2f0>)
 8001d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
			directionCmdBuffer = directionCmd;
 8001d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			distanceCmdBuffer = distanceCmd;
 8001d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			sprintf(message1, "dis: %d", distanceCmdBuffer);
 8001d2a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4992      	ldr	r1, [pc, #584]	; (8001f7c <chassisTask+0x2f4>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f009 fe69 	bl	800ba0c <siprintf>
			OLED_ShowString(10, 40, message1);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2128      	movs	r1, #40	; 0x28
 8001d42:	200a      	movs	r0, #10
 8001d44:	f008 feee 	bl	800ab24 <OLED_ShowString>

			// set motor directions
			if (directionCmd == MOVE_BACKWARD
 8001d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d007      	beq.n	8001d60 <chassisTask+0xd8>
					|| directionCmd == MOVE_BACKWARD_LEFT
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d003      	beq.n	8001d60 <chassisTask+0xd8>
					|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d102      	bne.n	8001d66 <chassisTask+0xde>
				setMotorBackward();
 8001d60:	f7ff fe60 	bl	8001a24 <setMotorBackward>
 8001d64:	e001      	b.n	8001d6a <chassisTask+0xe2>

			} else {
				setMotorForward();
 8001d66:	f7ff fe43 	bl	80019f0 <setMotorForward>
			}

			// set servo direction
			if (directionCmd == MOVE_FORWARD_LEFT
 8001d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d003      	beq.n	8001d7a <chassisTask+0xf2>
					|| directionCmd == MOVE_BACKWARD_LEFT) {
 8001d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d102      	bne.n	8001d80 <chassisTask+0xf8>
				turnLeft();
 8001d7a:	f7ff fe6d 	bl	8001a58 <turnLeft>
 8001d7e:	e013      	b.n	8001da8 <chassisTask+0x120>
			} else if (directionCmd == MOVE_FORWARD_RIGHT
 8001d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d003      	beq.n	8001d90 <chassisTask+0x108>
					|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d102      	bne.n	8001d96 <chassisTask+0x10e>
				turnRight();
 8001d90:	f7ff fe70 	bl	8001a74 <turnRight>
 8001d94:	e008      	b.n	8001da8 <chassisTask+0x120>
			} else if (directionCmd == CENTER_CALIBRATION) {
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d102      	bne.n	8001da4 <chassisTask+0x11c>
				calibrate();
 8001d9e:	f7ff fe85 	bl	8001aac <calibrate>
 8001da2:	e001      	b.n	8001da8 <chassisTask+0x120>
			} else {
				faceFront();
 8001da4:	f7ff fe74 	bl	8001a90 <faceFront>
			}

			if (directionCmd == MOVE_BACKWARD_LEFT
 8001da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d003      	beq.n	8001db8 <chassisTask+0x130>
					|| directionCmd == MOVE_FORWARD_LEFT) {
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d162      	bne.n	8001e7e <chassisTask+0x1f6>
				setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142  // w
 8001db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fba2 	bl	8000504 <__aeabi_ui2d>
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b6e      	ldr	r3, [pc, #440]	; (8001f80 <chassisTask+0x2f8>)
 8001dc6:	f7fe fd41 	bl	800084c <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	f7fe fa59 	bl	800028c <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	a35d      	add	r3, pc, #372	; (adr r3, 8001f58 <chassisTask+0x2d0>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe fc06 	bl	80005f8 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
						* (16.5 + 16.5)) / DISTANCE_PER_ENCODER_PULSE;
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <chassisTask+0x2fc>)
 8001dfa:	f7fe fbfd 	bl	80005f8 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	a356      	add	r3, pc, #344	; (adr r3, 8001f60 <chassisTask+0x2d8>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fd1e 	bl	800084c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
				setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142  // w
 8001e14:	495c      	ldr	r1, [pc, #368]	; (8001f88 <chassisTask+0x300>)
 8001e16:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb71 	bl	8000504 <__aeabi_ui2d>
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <chassisTask+0x2f8>)
 8001e28:	f7fe fd10 	bl	800084c <__aeabi_ddiv>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	f7fe fa28 	bl	800028c <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	a344      	add	r3, pc, #272	; (adr r3, 8001f58 <chassisTask+0x2d0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fbd5 	bl	80005f8 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
						* (16.5)) / DISTANCE_PER_ENCODER_PULSE;
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <chassisTask+0x304>)
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	a33d      	add	r3, pc, #244	; (adr r3, 8001f60 <chassisTask+0x2d8>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fced 	bl	800084c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
				setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001e76:	4946      	ldr	r1, [pc, #280]	; (8001f90 <chassisTask+0x308>)
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
 8001e7c:	e0a2      	b.n	8001fc4 <chassisTask+0x33c>
			} else if (directionCmd == MOVE_FORWARD_RIGHT
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d004      	beq.n	8001e90 <chassisTask+0x208>
					|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	f040 8086 	bne.w	8001f9c <chassisTask+0x314>
				setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb36 	bl	8000504 <__aeabi_ui2d>
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <chassisTask+0x2f8>)
 8001e9e:	f7fe fcd5 	bl	800084c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	a327      	add	r3, pc, #156	; (adr r3, 8001f58 <chassisTask+0x2d0>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb9a 	bl	80005f8 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
						* (16.5 + 26.5)) / DISTANCE_PER_ENCODER_PULSE; // was 27.3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <chassisTask+0x30c>)
 8001ed2:	f7fe fb91 	bl	80005f8 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	a320      	add	r3, pc, #128	; (adr r3, 8001f60 <chassisTask+0x2d8>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fcb2 	bl	800084c <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
				setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001eec:	4928      	ldr	r1, [pc, #160]	; (8001f90 <chassisTask+0x308>)
 8001eee:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142
 8001ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb05 	bl	8000504 <__aeabi_ui2d>
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <chassisTask+0x2f8>)
 8001f00:	f7fe fca4 	bl	800084c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	f7fe f9bc 	bl	800028c <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	a30e      	add	r3, pc, #56	; (adr r3, 8001f58 <chassisTask+0x2d0>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb69 	bl	80005f8 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
						* (26.5)) / DISTANCE_PER_ENCODER_PULSE;
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <chassisTask+0x310>)
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	a307      	add	r3, pc, #28	; (adr r3, 8001f60 <chassisTask+0x2d8>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fc81 	bl	800084c <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
				setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142
 8001f4e:	490e      	ldr	r1, [pc, #56]	; (8001f88 <chassisTask+0x300>)
 8001f50:	e9c1 2300 	strd	r2, r3, [r1]
 8001f54:	e036      	b.n	8001fc4 <chassisTask+0x33c>
 8001f56:	bf00      	nop
 8001f58:	e5604189 	.word	0xe5604189
 8001f5c:	400922d0 	.word	0x400922d0
 8001f60:	952ec048 	.word	0x952ec048
 8001f64:	3f8b3966 	.word	0x3f8b3966
 8001f68:	200002cc 	.word	0x200002cc
 8001f6c:	20000314 	.word	0x20000314
 8001f70:	20000438 	.word	0x20000438
 8001f74:	0800dd24 	.word	0x0800dd24
 8001f78:	10624dd3 	.word	0x10624dd3
 8001f7c:	0800dd2c 	.word	0x0800dd2c
 8001f80:	40768000 	.word	0x40768000
 8001f84:	40408000 	.word	0x40408000
 8001f88:	20000468 	.word	0x20000468
 8001f8c:	40308000 	.word	0x40308000
 8001f90:	20000450 	.word	0x20000450
 8001f94:	40458000 	.word	0x40458000
 8001f98:	403a8000 	.word	0x403a8000

			} else {
				setpoint_left = ((double) distanceCmd)
 8001f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fab0 	bl	8000504 <__aeabi_ui2d>
						/ DISTANCE_PER_ENCODER_PULSE;
 8001fa4:	a39d      	add	r3, pc, #628	; (adr r3, 800221c <chassisTask+0x594>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fc4f 	bl	800084c <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
				setpoint_left = ((double) distanceCmd)
 8001fb2:	498f      	ldr	r1, [pc, #572]	; (80021f0 <chassisTask+0x568>)
 8001fb4:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_right = setpoint_left;
 8001fb8:	4b8d      	ldr	r3, [pc, #564]	; (80021f0 <chassisTask+0x568>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	498d      	ldr	r1, [pc, #564]	; (80021f4 <chassisTask+0x56c>)
 8001fc0:	e9c1 2300 	strd	r2, r3, [r1]
			}

			// reset other variables
			input_left = 0;
 8001fc4:	498c      	ldr	r1, [pc, #560]	; (80021f8 <chassisTask+0x570>)
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c1 2300 	strd	r2, r3, [r1]
			output_left = 0;
 8001fd2:	498a      	ldr	r1, [pc, #552]	; (80021fc <chassisTask+0x574>)
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]
			input_right = 0;
 8001fe0:	4987      	ldr	r1, [pc, #540]	; (8002200 <chassisTask+0x578>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	e9c1 2300 	strd	r2, r3, [r1]
			output_right = 0;
 8001fee:	4985      	ldr	r1, [pc, #532]	; (8002204 <chassisTask+0x57c>)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9c1 2300 	strd	r2, r3, [r1]

			// reset encoder value
			encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 8001ffc:	4b82      	ldr	r3, [pc, #520]	; (8002208 <chassisTask+0x580>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
			encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <chassisTask+0x584>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	64bb      	str	r3, [r7, #72]	; 0x48

			// set toMove flag
			toMove = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	647b      	str	r3, [r7, #68]	; 0x44
		}

		if (toMove) {
 8002010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 81a3 	beq.w	800235e <chassisTask+0x6d6>
			int left_complete = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
			int right_complete = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
			// get current encoder count and ticks
			encoder_A_count2 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <chassisTask+0x580>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
			encoder_B_count2 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8002028:	4b78      	ldr	r3, [pc, #480]	; (800220c <chassisTask+0x584>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c

			// calculate the encoder count
			encoder_A_count_delta = getEncoderDelta(encoder_A_count1,
 8002030:	4a75      	ldr	r2, [pc, #468]	; (8002208 <chassisTask+0x580>)
 8002032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002034:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002036:	f7ff fde5 	bl	8001c04 <getEncoderDelta>
 800203a:	6338      	str	r0, [r7, #48]	; 0x30
					encoder_A_count2, &htim2);
			encoder_B_count_delta = getEncoderDelta(encoder_B_count1,
 800203c:	4a73      	ldr	r2, [pc, #460]	; (800220c <chassisTask+0x584>)
 800203e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002040:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002042:	f7ff fddf 	bl	8001c04 <getEncoderDelta>
 8002046:	62b8      	str	r0, [r7, #40]	; 0x28
					encoder_B_count2, &htim3);

			input_left += (double) encoder_A_count_delta;
 8002048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800204a:	f7fe fa5b 	bl	8000504 <__aeabi_ui2d>
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <chassisTask+0x570>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe f91a 	bl	800028c <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4966      	ldr	r1, [pc, #408]	; (80021f8 <chassisTask+0x570>)
 800205e:	e9c1 2300 	strd	r2, r3, [r1]
			input_right += (double) encoder_B_count_delta;
 8002062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002064:	f7fe fa4e 	bl	8000504 <__aeabi_ui2d>
 8002068:	4b65      	ldr	r3, [pc, #404]	; (8002200 <chassisTask+0x578>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe f90d 	bl	800028c <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4962      	ldr	r1, [pc, #392]	; (8002200 <chassisTask+0x578>)
 8002078:	e9c1 2300 	strd	r2, r3, [r1]

			if (directionCmdBuffer == MOVE_BACKWARD
 800207c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002080:	2b02      	cmp	r3, #2
 8002082:	d003      	beq.n	800208c <chassisTask+0x404>
					|| directionCmdBuffer == MOVE_FORWARD) {
 8002084:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002088:	2b01      	cmp	r3, #1
 800208a:	d153      	bne.n	8002134 <chassisTask+0x4ac>

				if (distanceCmdBuffer >= 10) {
 800208c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002090:	2b09      	cmp	r3, #9
 8002092:	dd42      	ble.n	800211a <chassisTask+0x492>
					output_right = PID_calc(&right_pid, input_right,
 8002094:	4b5a      	ldr	r3, [pc, #360]	; (8002200 <chassisTask+0x578>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fda3 	bl	8000be8 <__aeabi_d2f>
 80020a2:	4604      	mov	r4, r0
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <chassisTask+0x56c>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd9b 	bl	8000be8 <__aeabi_d2f>
 80020b2:	4603      	mov	r3, r0
 80020b4:	ee00 3a90 	vmov	s1, r3
 80020b8:	ee00 4a10 	vmov	s0, r4
 80020bc:	4854      	ldr	r0, [pc, #336]	; (8002210 <chassisTask+0x588>)
 80020be:	f000 f9db 	bl	8002478 <PID_calc>
 80020c2:	ee10 3a10 	vmov	r3, s0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	494c      	ldr	r1, [pc, #304]	; (8002204 <chassisTask+0x57c>)
 80020d2:	e9c1 2300 	strd	r2, r3, [r1]
							setpoint_right);
					output_left = PID_calc(&left_pid, input_left,
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <chassisTask+0x570>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fd82 	bl	8000be8 <__aeabi_d2f>
 80020e4:	4604      	mov	r4, r0
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <chassisTask+0x56c>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fd7a 	bl	8000be8 <__aeabi_d2f>
 80020f4:	4603      	mov	r3, r0
 80020f6:	ee00 3a90 	vmov	s1, r3
 80020fa:	ee00 4a10 	vmov	s0, r4
 80020fe:	4845      	ldr	r0, [pc, #276]	; (8002214 <chassisTask+0x58c>)
 8002100:	f000 f9ba 	bl	8002478 <PID_calc>
 8002104:	ee10 3a10 	vmov	r3, s0
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	493a      	ldr	r1, [pc, #232]	; (80021fc <chassisTask+0x574>)
 8002114:	e9c1 2300 	strd	r2, r3, [r1]
				if (distanceCmdBuffer >= 10) {
 8002118:	e09d      	b.n	8002256 <chassisTask+0x5ce>
							setpoint_right);
				} else {
					output_left = 1500;
 800211a:	4938      	ldr	r1, [pc, #224]	; (80021fc <chassisTask+0x574>)
 800211c:	a332      	add	r3, pc, #200	; (adr r3, 80021e8 <chassisTask+0x560>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	e9c1 2300 	strd	r2, r3, [r1]
					output_right = 1500;
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <chassisTask+0x57c>)
 8002128:	a32f      	add	r3, pc, #188	; (adr r3, 80021e8 <chassisTask+0x560>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	e9c1 2300 	strd	r2, r3, [r1]
				if (distanceCmdBuffer >= 10) {
 8002132:	e090      	b.n	8002256 <chassisTask+0x5ce>
				}
			} else {
				left_complete = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
				right_complete = 1;
 8002138:	2301      	movs	r3, #1
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
				// replace with turning via Gyro code

				if (directionCmdBuffer == MOVE_FORWARD_LEFT) {
 800213c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002140:	2b03      	cmp	r3, #3
 8002142:	d115      	bne.n	8002170 <chassisTask+0x4e8>
					targetAngle = 4 * distanceCmdBuffer;
 8002144:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <chassisTask+0x590>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(1000);
 8002158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800215c:	f7ff fc24 	bl	80019a8 <setLeftPWM>
					setRightPWM(2000);
 8002160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002164:	f7ff fc32 	bl	80019cc <setRightPWM>
					robotTurn(&targetAngle);
 8002168:	482b      	ldr	r0, [pc, #172]	; (8002218 <chassisTask+0x590>)
 800216a:	f7ff fcad 	bl	8001ac8 <robotTurn>
 800216e:	e072      	b.n	8002256 <chassisTask+0x5ce>
				} else if (directionCmdBuffer == MOVE_FORWARD_RIGHT) {
 8002170:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002174:	2b05      	cmp	r3, #5
 8002176:	d118      	bne.n	80021aa <chassisTask+0x522>
					targetAngle = -distanceCmdBuffer * 4;
 8002178:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800217c:	4613      	mov	r3, r2
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <chassisTask+0x590>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(2000);
 8002192:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002196:	f7ff fc07 	bl	80019a8 <setLeftPWM>
					setRightPWM(1000);
 800219a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800219e:	f7ff fc15 	bl	80019cc <setRightPWM>
					robotTurn(&targetAngle);
 80021a2:	481d      	ldr	r0, [pc, #116]	; (8002218 <chassisTask+0x590>)
 80021a4:	f7ff fc90 	bl	8001ac8 <robotTurn>
 80021a8:	e055      	b.n	8002256 <chassisTask+0x5ce>
				} else if (directionCmdBuffer == MOVE_BACKWARD_LEFT) {
 80021aa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d138      	bne.n	8002224 <chassisTask+0x59c>
					targetAngle = -distanceCmdBuffer * 4;
 80021b2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80021b6:	4613      	mov	r3, r2
 80021b8:	079b      	lsls	r3, r3, #30
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <chassisTask+0x590>)
 80021c8:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	f7ff fbea 	bl	80019a8 <setLeftPWM>
					setRightPWM(2000);
 80021d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021d8:	f7ff fbf8 	bl	80019cc <setRightPWM>
					robotTurn(&targetAngle);
 80021dc:	480e      	ldr	r0, [pc, #56]	; (8002218 <chassisTask+0x590>)
 80021de:	f7ff fc73 	bl	8001ac8 <robotTurn>
 80021e2:	e038      	b.n	8002256 <chassisTask+0x5ce>
 80021e4:	f3af 8000 	nop.w
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40977000 	.word	0x40977000
 80021f0:	20000450 	.word	0x20000450
 80021f4:	20000468 	.word	0x20000468
 80021f8:	20000460 	.word	0x20000460
 80021fc:	20000458 	.word	0x20000458
 8002200:	20000478 	.word	0x20000478
 8002204:	20000470 	.word	0x20000470
 8002208:	200002cc 	.word	0x200002cc
 800220c:	20000314 	.word	0x20000314
 8002210:	200004d0 	.word	0x200004d0
 8002214:	20000480 	.word	0x20000480
 8002218:	2000043c 	.word	0x2000043c
 800221c:	952ec048 	.word	0x952ec048
 8002220:	3f8b3966 	.word	0x3f8b3966
				} else if (directionCmdBuffer == MOVE_BACKWARD_RIGHT) {
 8002224:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002228:	2b06      	cmp	r3, #6
 800222a:	d114      	bne.n	8002256 <chassisTask+0x5ce>
					targetAngle = distanceCmdBuffer * 4;
 800222c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <chassisTask+0x6f0>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(2000);
 8002240:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002244:	f7ff fbb0 	bl	80019a8 <setLeftPWM>
					setRightPWM(1000);
 8002248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224c:	f7ff fbbe 	bl	80019cc <setRightPWM>
					robotTurn(&targetAngle);
 8002250:	4849      	ldr	r0, [pc, #292]	; (8002378 <chassisTask+0x6f0>)
 8002252:	f7ff fc39 	bl	8001ac8 <robotTurn>
				//		setpoint_left);
				//output_right = PID_calc(&right_turn_pid, input_right,
				//		setpoint_right);
			}

			if (setpoint_left - input_left <= 40) {
 8002256:	4b49      	ldr	r3, [pc, #292]	; (800237c <chassisTask+0x6f4>)
 8002258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <chassisTask+0x6f8>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f811 	bl	8000288 <__aeabi_dsub>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b44      	ldr	r3, [pc, #272]	; (8002384 <chassisTask+0x6fc>)
 8002274:	f7fe fc3c 	bl	8000af0 <__aeabi_dcmple>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <chassisTask+0x62a>
				input_left = 0;
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <chassisTask+0x6f8>)
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c1 2300 	strd	r2, r3, [r1]
				output_left = 0;
 800228c:	493e      	ldr	r1, [pc, #248]	; (8002388 <chassisTask+0x700>)
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_left = 0;
 800229a:	4938      	ldr	r1, [pc, #224]	; (800237c <chassisTask+0x6f4>)
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9c1 2300 	strd	r2, r3, [r1]
				setLeftPWM(0);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fb7d 	bl	80019a8 <setLeftPWM>
				left_complete = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

			if (setpoint_right - input_right <= 40) {
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <chassisTask+0x704>)
 80022b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <chassisTask+0x708>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd ffe3 	bl	8000288 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <chassisTask+0x6fc>)
 80022d0:	f7fe fc0e 	bl	8000af0 <__aeabi_dcmple>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d019      	beq.n	800230e <chassisTask+0x686>
				input_right = 0;
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <chassisTask+0x708>)
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9c1 2300 	strd	r2, r3, [r1]
				output_right = 0;
 80022e8:	492a      	ldr	r1, [pc, #168]	; (8002394 <chassisTask+0x70c>)
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_right = 0;
 80022f6:	4925      	ldr	r1, [pc, #148]	; (800238c <chassisTask+0x704>)
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c1 2300 	strd	r2, r3, [r1]
				setRightPWM(0);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fb61 	bl	80019cc <setRightPWM>
				right_complete = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			// drive the motor
			if (!left_complete)
 800230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <chassisTask+0x6a4>
				setLeftPWM(output_left);
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <chassisTask+0x700>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fc43 	bl	8000ba8 <__aeabi_d2uiz>
 8002322:	4603      	mov	r3, r0
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb3e 	bl	80019a8 <setLeftPWM>
			if (!right_complete)
 800232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <chassisTask+0x6c2>
				setRightPWM(output_right);
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <chassisTask+0x70c>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7fe fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8002340:	4603      	mov	r3, r0
 8002342:	b29b      	uxth	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb41 	bl	80019cc <setRightPWM>

			if (left_complete && right_complete) {
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <chassisTask+0x6d6>
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <chassisTask+0x6d6>
				toMove = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
				current_cmd = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
			}

		}
		// restart the process
		encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <chassisTask+0x710>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
		encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <chassisTask+0x714>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
		osDelay(50);
 800236e:	2032      	movs	r0, #50	; 0x32
 8002370:	f005 fba0 	bl	8007ab4 <osDelay>
	for (;;) {
 8002374:	e4a6      	b.n	8001cc4 <chassisTask+0x3c>
 8002376:	bf00      	nop
 8002378:	2000043c 	.word	0x2000043c
 800237c:	20000450 	.word	0x20000450
 8002380:	20000460 	.word	0x20000460
 8002384:	40440000 	.word	0x40440000
 8002388:	20000458 	.word	0x20000458
 800238c:	20000468 	.word	0x20000468
 8002390:	20000478 	.word	0x20000478
 8002394:	20000470 	.word	0x20000470
 8002398:	200002cc 	.word	0x200002cc
 800239c:	20000314 	.word	0x20000314

080023a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b2:	f000 fdd5 	bl	8002f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40001400 	.word	0x40001400

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>

080023ce <PID_init>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const fp32 PID[3], fp32 max_out, fp32 max_iout)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b087      	sub	sp, #28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6178      	str	r0, [r7, #20]
 80023d6:	460b      	mov	r3, r1
 80023d8:	60fa      	str	r2, [r7, #12]
 80023da:	ed87 0a02 	vstr	s0, [r7, #8]
 80023de:	edc7 0a01 	vstr	s1, [r7, #4]
 80023e2:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <PID_init+0x9e>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03d      	beq.n	800246c <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	7cfa      	ldrb	r2, [r7, #19]
 80023f4:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
 800246a:	e000      	b.n	800246e <PID_init+0xa0>
        return;
 800246c:	bf00      	nop
}
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <PID_calc>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
fp32 PID_calc(pid_type_def *pid, fp32 ref, fp32 set)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	ed87 0a02 	vstr	s0, [r7, #8]
 8002484:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <PID_calc+0x1c>
    {
        return 0.0f;
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e130      	b.n	80026f6 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80024b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80024b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8095 	bne.w	80025f6 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	ed93 7a03 	vldr	s14, [r3, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	edd3 7a05 	vldr	s15, [r3, #20]
 800254a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	dd04      	ble.n	800255e <PID_calc+0xe6>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
 800255c:	e014      	b.n	8002588 <PID_calc+0x110>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	edd3 7a05 	vldr	s15, [r3, #20]
 800256a:	eef1 7a67 	vneg.f32	s15, s15
 800256e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	d507      	bpl.n	8002588 <PID_calc+0x110>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	edd3 7a05 	vldr	s15, [r3, #20]
 800257e:	eef1 7a67 	vneg.f32	s15, s15
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800259e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80025b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	dd04      	ble.n	80025c8 <PID_calc+0x150>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]
 80025c6:	e094      	b.n	80026f2 <PID_calc+0x27a>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80025d4:	eef1 7a67 	vneg.f32	s15, s15
 80025d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e0:	f140 8087 	bpl.w	80026f2 <PID_calc+0x27a>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80025ea:	eef1 7a67 	vneg.f32	s15, s15
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edc3 7a08 	vstr	s15, [r3, #32]
 80025f4:	e07d      	b.n	80026f2 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d179      	bne.n	80026f2 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	ed93 7a01 	vldr	s14, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002610:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	ed93 7a02 	vldr	s14, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002650:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002654:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	ed93 7a03 	vldr	s14, [r3, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	ed93 7a08 	vldr	s14, [r3, #32]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002690:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd04      	ble.n	80026c8 <PID_calc+0x250>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e014      	b.n	80026f2 <PID_calc+0x27a>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80026d4:	eef1 7a67 	vneg.f32	s15, s15
 80026d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	d507      	bpl.n	80026f2 <PID_calc+0x27a>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80026e8:	eef1 7a67 	vneg.f32	s15, s15
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
}
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_MspInit+0x54>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_MspInit+0x54>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_MspInit+0x54>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_MspInit+0x54>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_MspInit+0x54>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_MspInit+0x54>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	210f      	movs	r1, #15
 800274a:	f06f 0001 	mvn.w	r0, #1
 800274e:	f000 fd03 	bl	8003158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800

08002760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_I2C_MspInit+0x84>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12c      	bne.n	80027dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a4:	2312      	movs	r3, #18
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b0:	2304      	movs	r3, #4
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	480c      	ldr	r0, [pc, #48]	; (80027ec <HAL_I2C_MspInit+0x8c>)
 80027bc:	f000 fd88 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40005400 	.word	0x40005400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020400 	.word	0x40020400

080027f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a23      	ldr	r2, [pc, #140]	; (800289c <HAL_TIM_Base_MspInit+0xac>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800282e:	e030      	b.n	8002892 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12b      	bne.n	8002892 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_TIM_Base_MspInit+0xb0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002882:	2303      	movs	r3, #3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	4806      	ldr	r0, [pc, #24]	; (80028a8 <HAL_TIM_Base_MspInit+0xb8>)
 800288e:	f000 fd1f 	bl	80032d0 <HAL_GPIO_Init>
}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40020800 	.word	0x40020800

080028ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d14b      	bne.n	8002966 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002934:	2301      	movs	r3, #1
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	4825      	ldr	r0, [pc, #148]	; (80029d4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002940:	f000 fcc6 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002944:	2308      	movs	r3, #8
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	481e      	ldr	r0, [pc, #120]	; (80029d8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002960:	f000 fcb6 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002964:	e030      	b.n	80029c8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_TIM_Encoder_MspInit+0x130>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d12b      	bne.n	80029c8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6313      	str	r3, [r2, #48]	; 0x30
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4619      	mov	r1, r3
 80029c2:	4804      	ldr	r0, [pc, #16]	; (80029d4 <HAL_TIM_Encoder_MspInit+0x128>)
 80029c4:	f000 fc84 	bl	80032d0 <HAL_GPIO_Init>
}
 80029c8:	bf00      	nop
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_TIM_IC_MspInit+0x94>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d134      	bne.n	8002a6c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_TIM_IC_MspInit+0x98>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4809      	ldr	r0, [pc, #36]	; (8002a7c <HAL_TIM_IC_MspInit+0x9c>)
 8002a58:	f000 fc3a 	bl	80032d0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2105      	movs	r1, #5
 8002a60:	201e      	movs	r0, #30
 8002a62:	f000 fb79 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a66:	201e      	movs	r0, #30
 8002a68:	f000 fb92 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020c00 	.word	0x40020c00

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_TIM_MspPostInit+0x68>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11e      	bne.n	8002ae0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	f043 0310 	orr.w	r3, r3, #16
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8002abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_TIM_MspPostInit+0x70>)
 8002adc:	f000 fbf8 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_UART_MspInit+0xb8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d145      	bne.n	8002ba2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_UART_MspInit+0xbc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b60:	2307      	movs	r3, #7
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4812      	ldr	r0, [pc, #72]	; (8002bb4 <HAL_UART_MspInit+0xc0>)
 8002b6c:	f000 fbb0 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b82:	2307      	movs	r3, #7
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <HAL_UART_MspInit+0xc0>)
 8002b8e:	f000 fb9f 	bl	80032d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2105      	movs	r1, #5
 8002b96:	2027      	movs	r0, #39	; 0x27
 8002b98:	f000 fade 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b9c:	2027      	movs	r0, #39	; 0x27
 8002b9e:	f000 faf7 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40004800 	.word	0x40004800
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020800 	.word	0x40020800

08002bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_InitTick+0xe4>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_InitTick+0xe4>)
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_InitTick+0xe4>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002be4:	f107 0210 	add.w	r2, r7, #16
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f9be 	bl	8004f70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bfe:	f002 f98f 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8002c02:	6378      	str	r0, [r7, #52]	; 0x34
 8002c04:	e004      	b.n	8002c10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c06:	f002 f98b 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <HAL_InitTick+0xe8>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <HAL_InitTick+0xf0>)
 8002c22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c24:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c2a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002c44:	4817      	ldr	r0, [pc, #92]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c46:	f002 f9c5 	bl	8004fd4 <HAL_TIM_Base_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11b      	bne.n	8002c90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002c58:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <HAL_InitTick+0xec>)
 8002c5a:	f002 fa0b 	bl	8005074 <HAL_TIM_Base_Start_IT>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c6c:	2037      	movs	r0, #55	; 0x37
 8002c6e:	f000 fa8f 	bl	8003190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d808      	bhi.n	8002c8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	2037      	movs	r0, #55	; 0x37
 8002c7e:	f000 fa6b 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_InitTick+0xf4>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e002      	b.n	8002c90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3738      	adds	r7, #56	; 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	431bde83 	.word	0x431bde83
 8002ca4:	200005c0 	.word	0x200005c0
 8002ca8:	40001400 	.word	0x40001400
 8002cac:	20000028 	.word	0x20000028

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <TIM4_IRQHandler+0x10>)
 8002ce2:	f002 fcdc 	bl	800569e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000035c 	.word	0x2000035c

08002cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <USART3_IRQHandler+0x10>)
 8002cf6:	f003 fe55 	bl	80069a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200003ec 	.word	0x200003ec

08002d04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <TIM7_IRQHandler+0x10>)
 8002d0a:	f002 fcc8 	bl	800569e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200005c0 	.word	0x200005c0

08002d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return 1;
 8002d1c:	2301      	movs	r3, #1
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_kill>:

int _kill(int pid, int sig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d32:	f007 ffb9 	bl	800aca8 <__errno>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2216      	movs	r2, #22
 8002d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_exit>:

void _exit (int status)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ffe7 	bl	8002d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d5a:	e7fe      	b.n	8002d5a <_exit+0x12>

08002d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e00a      	b.n	8002d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d6e:	f3af 8000 	nop.w
 8002d72:	4601      	mov	r1, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	60ba      	str	r2, [r7, #8]
 8002d7a:	b2ca      	uxtb	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf0      	blt.n	8002d6e <_read+0x12>
  }

  return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	60ba      	str	r2, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dbf1      	blt.n	8002da8 <_write+0x12>
  }
  return len;
 8002dc4:	687b      	ldr	r3, [r7, #4]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_close>:

int _close(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df6:	605a      	str	r2, [r3, #4]
  return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_isatty>:

int _isatty(int file)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <_sbrk+0x5c>)
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <_sbrk+0x60>)
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <_sbrk+0x64>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <_sbrk+0x68>)
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <_sbrk+0x64>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d207      	bcs.n	8002e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e68:	f007 ff1e 	bl	800aca8 <__errno>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	220c      	movs	r2, #12
 8002e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e009      	b.n	8002e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <_sbrk+0x64>)
 8002e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20020000 	.word	0x20020000
 8002e98:	00000400 	.word	0x00000400
 8002e9c:	20000608 	.word	0x20000608
 8002ea0:	20005430 	.word	0x20005430

08002ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <SystemInit+0x20>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <SystemInit+0x20>)
 8002eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	; (8002f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef2:	f7ff ffd7 	bl	8002ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f007 ffd3 	bl	800aea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7fe f847 	bl	8000f8c <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002f0c:	0800ec14 	.word	0x0800ec14
  ldr r2, =_sbss
 8002f10:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002f14:	20005430 	.word	0x20005430

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_Init+0x40>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_Init+0x40>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_Init+0x40>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f44:	2003      	movs	r0, #3
 8002f46:	f000 f8fc 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4a:	200f      	movs	r0, #15
 8002f4c:	f7ff fe34 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f50:	f7ff fbda 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000002c 	.word	0x2000002c
 8002f84:	2000060c 	.word	0x2000060c

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000060c 	.word	0x2000060c

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000002c 	.word	0x2000002c

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ba:	f7ff fee5 	bl	8002f88 <HAL_GetTick>
 80031be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d008      	beq.n	80031de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e052      	b.n	8003284 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0216 	bic.w	r2, r2, #22
 80031ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_DMA_Abort+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0208 	bic.w	r2, r2, #8
 800321c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800322e:	e013      	b.n	8003258 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003230:	f7ff feaa 	bl	8002f88 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b05      	cmp	r3, #5
 800323c:	d90c      	bls.n	8003258 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e015      	b.n	8003284 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e4      	bne.n	8003230 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	223f      	movs	r2, #63	; 0x3f
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00c      	b.n	80032c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2205      	movs	r2, #5
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e16b      	b.n	80035c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	f040 815a 	bne.w	80035be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d005      	beq.n	8003322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	2b02      	cmp	r3, #2
 8003320:	d130      	bne.n	8003384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 0201 	and.w	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b03      	cmp	r3, #3
 800338e:	d017      	beq.n	80033c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d123      	bne.n	8003414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	220f      	movs	r2, #15
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80b4 	beq.w	80035be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b60      	ldr	r3, [pc, #384]	; (80035dc <HAL_GPIO_Init+0x30c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	4a5f      	ldr	r2, [pc, #380]	; (80035dc <HAL_GPIO_Init+0x30c>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003464:	6453      	str	r3, [r2, #68]	; 0x44
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <HAL_GPIO_Init+0x30c>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003472:	4a5b      	ldr	r2, [pc, #364]	; (80035e0 <HAL_GPIO_Init+0x310>)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_GPIO_Init+0x314>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <HAL_GPIO_Init+0x226>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_GPIO_Init+0x318>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x222>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_GPIO_Init+0x31c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x21e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <HAL_GPIO_Init+0x320>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x21a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_GPIO_Init+0x324>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x216>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_GPIO_Init+0x328>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x212>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <HAL_GPIO_Init+0x32c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x20e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4b      	ldr	r2, [pc, #300]	; (8003600 <HAL_GPIO_Init+0x330>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x20a>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e00e      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034da:	2308      	movs	r3, #8
 80034dc:	e00c      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034de:	2306      	movs	r3, #6
 80034e0:	e00a      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034e2:	2305      	movs	r3, #5
 80034e4:	e008      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034e6:	2304      	movs	r3, #4
 80034e8:	e006      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034ea:	2303      	movs	r3, #3
 80034ec:	e004      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_GPIO_Init+0x228>
 80034f6:	2300      	movs	r3, #0
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f002 0203 	and.w	r2, r2, #3
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	4093      	lsls	r3, r2
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003508:	4935      	ldr	r1, [pc, #212]	; (80035e0 <HAL_GPIO_Init+0x310>)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_GPIO_Init+0x334>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800353a:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_GPIO_Init+0x334>)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_GPIO_Init+0x334>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_GPIO_Init+0x334>)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_GPIO_Init+0x334>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_GPIO_Init+0x334>)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_GPIO_Init+0x334>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <HAL_GPIO_Init+0x334>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3301      	adds	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	f67f ae90 	bls.w	80032ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40013800 	.word	0x40013800
 80035e4:	40020000 	.word	0x40020000
 80035e8:	40020400 	.word	0x40020400
 80035ec:	40020800 	.word	0x40020800
 80035f0:	40020c00 	.word	0x40020c00
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40021400 	.word	0x40021400
 80035fc:	40021800 	.word	0x40021800
 8003600:	40021c00 	.word	0x40021c00
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003624:	e003      	b.n	800362e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800364c:	887a      	ldrh	r2, [r7, #2]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4013      	ands	r3, r2
 8003652:	041a      	lsls	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43d9      	mvns	r1, r3
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	400b      	ands	r3, r1
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	619a      	str	r2, [r3, #24]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e12b      	b.n	80038da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff f862 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d4:	f001 fc24 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a81      	ldr	r2, [pc, #516]	; (80038e4 <HAL_I2C_Init+0x274>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d807      	bhi.n	80036f4 <HAL_I2C_Init+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_I2C_Init+0x278>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e006      	b.n	8003702 <HAL_I2C_Init+0x92>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_I2C_Init+0x27c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e7      	b.n	80038da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <HAL_I2C_Init+0x280>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_I2C_Init+0x274>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <HAL_I2C_Init+0xd4>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3301      	adds	r3, #1
 8003742:	e009      	b.n	8003758 <HAL_I2C_Init+0xe8>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a69      	ldr	r2, [pc, #420]	; (80038f4 <HAL_I2C_Init+0x284>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	3301      	adds	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	495c      	ldr	r1, [pc, #368]	; (80038e4 <HAL_I2C_Init+0x274>)
 8003774:	428b      	cmp	r3, r1
 8003776:	d819      	bhi.n	80037ac <HAL_I2C_Init+0x13c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e59      	subs	r1, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fbb1 f3f3 	udiv	r3, r1, r3
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800378c:	400b      	ands	r3, r1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_I2C_Init+0x138>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1e59      	subs	r1, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	e051      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037a8:	2304      	movs	r3, #4
 80037aa:	e04f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_I2C_Init+0x168>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e012      	b.n	80037fe <HAL_I2C_Init+0x18e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x196>
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_I2C_Init+0x1dc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_I2C_Init+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e58      	subs	r0, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	440b      	add	r3, r1
 800381c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	e00f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6911      	ldr	r1, [r2, #16]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	000186a0 	.word	0x000186a0
 80038e8:	001e847f 	.word	0x001e847f
 80038ec:	003d08ff 	.word	0x003d08ff
 80038f0:	431bde83 	.word	0x431bde83
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003912:	f7ff fb39 	bl	8002f88 <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	f040 80d9 	bne.w	8003ad8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2319      	movs	r3, #25
 800392c:	2201      	movs	r2, #1
 800392e:	496d      	ldr	r1, [pc, #436]	; (8003ae4 <HAL_I2C_Mem_Write+0x1ec>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fc7f 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	e0cc      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_I2C_Mem_Write+0x56>
 800394a:	2302      	movs	r3, #2
 800394c:	e0c5      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d007      	beq.n	8003974 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2221      	movs	r2, #33	; 0x21
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_I2C_Mem_Write+0x1f0>)
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039b6:	88f8      	ldrh	r0, [r7, #6]
 80039b8:	893a      	ldrh	r2, [r7, #8]
 80039ba:	8979      	ldrh	r1, [r7, #10]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fab6 	bl	8003f38 <I2C_RequestMemoryWrite>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d052      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e081      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fd00 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d107      	bne.n	80039fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06b      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d11b      	bne.n	8003a78 <HAL_I2C_Mem_Write+0x180>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d017      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1aa      	bne.n	80039d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fcec 	bl	8004462 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d107      	bne.n	8003aa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e016      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	00100002 	.word	0x00100002
 8003ae8:	ffff0000 	.word	0xffff0000

08003aec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b06:	f7ff fa3f 	bl	8002f88 <HAL_GetTick>
 8003b0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	f040 8208 	bne.w	8003f2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2319      	movs	r3, #25
 8003b20:	2201      	movs	r2, #1
 8003b22:	497b      	ldr	r1, [pc, #492]	; (8003d10 <HAL_I2C_Mem_Read+0x224>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fb85 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
 8003b32:	e1fb      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2C_Mem_Read+0x56>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e1f4      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d007      	beq.n	8003b68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2222      	movs	r2, #34	; 0x22
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2240      	movs	r2, #64	; 0x40
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_I2C_Mem_Read+0x228>)
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003baa:	88f8      	ldrh	r0, [r7, #6]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa52 	bl	8004064 <I2C_RequestMemoryRead>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1b0      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e184      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d11b      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e164      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d11b      	bne.n	8003c7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	e144      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c90:	e138      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	f200 80f1 	bhi.w	8003e7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d123      	bne.n	8003cec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fc1b 	bl	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e139      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cea:	e10b      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d14e      	bne.n	8003d92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	4906      	ldr	r1, [pc, #24]	; (8003d18 <HAL_I2C_Mem_Read+0x22c>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa98 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e10e      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
 8003d0e:	bf00      	nop
 8003d10:	00100002 	.word	0x00100002
 8003d14:	ffff0000 	.word	0xffff0000
 8003d18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d90:	e0b8      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4966      	ldr	r1, [pc, #408]	; (8003f34 <HAL_I2C_Mem_Read+0x448>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa49 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0bf      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2200      	movs	r2, #0
 8003df6:	494f      	ldr	r1, [pc, #316]	; (8003f34 <HAL_I2C_Mem_Read+0x448>)
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa1b 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e091      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e7c:	e042      	b.n	8003f04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fb2e 	bl	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e04c      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d118      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f aec2 	bne.w	8003c92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e000      	b.n	8003f2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3728      	adds	r7, #40	; 0x28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010004 	.word	0x00010004

08003f38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f960 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f88:	d103      	bne.n	8003f92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e05f      	b.n	8004056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	492d      	ldr	r1, [pc, #180]	; (8004060 <I2C_RequestMemoryWrite+0x128>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f998 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04c      	b.n	8004056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa02 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e02b      	b.n	8004056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]
 800400e:	e021      	b.n	8004054 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	b29b      	uxth	r3, r3
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	6a39      	ldr	r1, [r7, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f9dc 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b04      	cmp	r3, #4
 8004034:	d107      	bne.n	8004046 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e005      	b.n	8004056 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404a:	893b      	ldrh	r3, [r7, #8]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	00010002 	.word	0x00010002

08004064 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f8c2 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d103      	bne.n	80040ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0aa      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	4952      	ldr	r1, [pc, #328]	; (8004230 <I2C_RequestMemoryRead+0x1cc>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f8fa 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e097      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f964 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e076      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]
 800414a:	e021      	b.n	8004190 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b29b      	uxth	r3, r3
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f93e 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e050      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	6a39      	ldr	r1, [r7, #32]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f923 	bl	80043e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d107      	bne.n	80041b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e035      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f82b 	bl	8004234 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d103      	bne.n	80041fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e013      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	4906      	ldr	r1, [pc, #24]	; (8004230 <I2C_RequestMemoryRead+0x1cc>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f863 	bl	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	00010002 	.word	0x00010002

08004234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004244:	e025      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d021      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe fe9b 	bl	8002f88 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e023      	b.n	80042da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10d      	bne.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	e00c      	b.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d0b6      	beq.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f0:	e051      	b.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d123      	bne.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800431a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e046      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fe19 	bl	8002f88 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e020      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10c      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e00b      	b.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d18d      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	e02d      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8ce 	bl	8004590 <I2C_IsAcknowledgeFailed>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e02d      	b.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d021      	beq.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fdbf 	bl	8002f88 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e007      	b.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d1ca      	bne.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800446e:	e02d      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f88d 	bl	8004590 <I2C_IsAcknowledgeFailed>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e02d      	b.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d021      	beq.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7fe fd7e 	bl	8002f88 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d1ca      	bne.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f0:	e042      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d119      	bne.n	8004534 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e029      	b.n	8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe fd28 	bl	8002f88 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d1b5      	bne.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d11b      	bne.n	80045e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0204 	orr.w	r2, r3, #4
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x20>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_PWR_EnableBkUpAccess+0x24>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004602:	687b      	ldr	r3, [r7, #4]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	420e0020 	.word	0x420e0020
 8004614:	40007000 	.word	0x40007000

08004618 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_PWR_DisableBkUpAccess+0x24>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800462a:	687b      	ldr	r3, [r7, #4]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	420e0020 	.word	0x420e0020
 800463c:	40007000 	.word	0x40007000

08004640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e267      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d075      	beq.n	800474a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d112      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d10b      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <HAL_RCC_OscConfig+0x108>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e242      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x74>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6f      	ldr	r2, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a68      	ldr	r2, [pc, #416]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe fc46 	bl	8002f88 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fe fc42 	bl	8002f88 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e207      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xc0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe fc32 	bl	8002f88 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe fc2e 	bl	8002f88 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1f3      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0xe8>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1c7      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4937      	ldr	r1, [pc, #220]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e03a      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b34      	ldr	r3, [pc, #208]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe fbe7 	bl	8002f88 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe fbe3 	bl	8002f88 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1a8      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4925      	ldr	r1, [pc, #148]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fe fbc6 	bl	8002f88 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004800:	f7fe fbc2 	bl	8002f88 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e187      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fe fba6 	bl	8002f88 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004840:	f7fe fba2 	bl	8002f88 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e167      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x200>
 800485e:	e01b      	b.n	8004898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe fb8f 	bl	8002f88 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00e      	b.n	800488c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486e:	f7fe fb8b 	bl	8002f88 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d907      	bls.n	800488c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e150      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	42470000 	.word	0x42470000
 8004888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ea      	bne.n	800486e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8097 	beq.w	80049d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b81      	ldr	r3, [pc, #516]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b7d      	ldr	r3, [pc, #500]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a7c      	ldr	r2, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b77      	ldr	r3, [pc, #476]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b74      	ldr	r3, [pc, #464]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fe fb4b 	bl	8002f88 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fe fb47 	bl	8002f88 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e10c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x2ea>
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
 8004928:	e01c      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x30c>
 8004932:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a5e      	ldr	r2, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a5b      	ldr	r2, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800494c:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a54      	ldr	r2, [pc, #336]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fb0c 	bl	8002f88 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe fb08 	bl	8002f88 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0cb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ee      	beq.n	8004974 <HAL_RCC_OscConfig+0x334>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004998:	f7fe faf6 	bl	8002f88 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fe faf2 	bl	8002f88 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b5      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ee      	bne.n	80049a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a1 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d05c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d141      	bne.n	8004a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fe fac6 	bl	8002f88 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe fac2 	bl	8002f88 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e087      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fa9b 	bl	8002f88 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fe fa97 	bl	8002f88 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e05c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x416>
 8004a74:	e054      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fa84 	bl	8002f88 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fe fa80 	bl	8002f88 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
 8004aa2:	e03d      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e038      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d121      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11a      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	3b01      	subs	r3, #1
 8004b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fe f9b2 	bl	8002f88 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fe f9ae 	bl	8002f88 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd ff6e 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	0800ddac 	.word	0x0800ddac
 8004cf4:	20000024 	.word	0x20000024
 8004cf8:	20000028 	.word	0x20000028

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b094      	sub	sp, #80	; 0x50
 8004d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
 8004d08:	2300      	movs	r3, #0
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x40>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f200 80e1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d2e:	e0db      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d34:	e0db      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b73      	ldr	r3, [pc, #460]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3a:	e0d8      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b6d      	ldr	r3, [pc, #436]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d80:	0150      	lsls	r0, r2, #5
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4621      	mov	r1, r4
 8004d88:	1a51      	subs	r1, r2, r1
 8004d8a:	6139      	str	r1, [r7, #16]
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da0:	4659      	mov	r1, fp
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004daa:	4651      	mov	r1, sl
 8004dac:	018a      	lsls	r2, r1, #6
 8004dae:	4651      	mov	r1, sl
 8004db0:	ebb2 0801 	subs.w	r8, r2, r1
 8004db4:	4659      	mov	r1, fp
 8004db6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	462b      	mov	r3, r5
 8004ddc:	eb49 0303 	adc.w	r3, r9, r3
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dee:	4629      	mov	r1, r5
 8004df0:	024b      	lsls	r3, r1, #9
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004df8:	4621      	mov	r1, r4
 8004dfa:	024a      	lsls	r2, r1, #9
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	2200      	movs	r2, #0
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0c:	f7fb ff3c 	bl	8000c88 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	e058      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	4611      	mov	r1, r2
 8004e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e46:	0150      	lsls	r0, r2, #5
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e52:	4649      	mov	r1, r9
 8004e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e70:	eb63 050b 	sbc.w	r5, r3, fp
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb45 0303 	adc.w	r3, r5, r3
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec0:	f7fb fee2 	bl	8000c88 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3750      	adds	r7, #80	; 0x50
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000024 	.word	0x20000024

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	0800ddbc 	.word	0x0800ddbc

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f4c:	f7ff ffdc 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0b5b      	lsrs	r3, r3, #13
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800ddbc 	.word	0x0800ddbc

08004f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f80:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0203 	and.w	r2, r3, #3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <HAL_RCC_GetClockConfig+0x60>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0207 	and.w	r2, r3, #7
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40023c00 	.word	0x40023c00

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e041      	b.n	800506a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fbf8 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fe9a 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04e      	b.n	800512a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <HAL_TIM_Base_Start_IT+0xc4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d01d      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_Base_Start_IT+0xc8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_Base_Start_IT+0xcc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_TIM_Base_Start_IT+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIM_Base_Start_IT+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <HAL_TIM_Base_Start_IT+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d010      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	e007      	b.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40001800 	.word	0x40001800

08005154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e041      	b.n	80051ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f839 	bl	80051f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fdda 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <HAL_TIM_PWM_Start+0x24>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e022      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d109      	bne.n	8005246 <HAL_TIM_PWM_Start+0x3e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	bf14      	ite	ne
 800523e:	2301      	movne	r3, #1
 8005240:	2300      	moveq	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e015      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d109      	bne.n	8005260 <HAL_TIM_PWM_Start+0x58>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e008      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e07c      	b.n	8005374 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0x82>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005288:	e013      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start+0x92>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005298:	e00b      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a8:	e003      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f95a 	bl	8006574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <HAL_TIM_PWM_Start+0x174>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIM_PWM_Start+0xcc>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <HAL_TIM_PWM_Start+0x178>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d101      	bne.n	80052d8 <HAL_TIM_PWM_Start+0xd0>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <HAL_TIM_PWM_Start+0xd2>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a22      	ldr	r2, [pc, #136]	; (800537c <HAL_TIM_PWM_Start+0x174>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d01d      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1f      	ldr	r2, [pc, #124]	; (8005384 <HAL_TIM_PWM_Start+0x17c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d018      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIM_PWM_Start+0x180>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_TIM_PWM_Start+0x184>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_TIM_PWM_Start+0x178>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_TIM_PWM_Start+0x188>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIM_PWM_Start+0x136>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIM_PWM_Start+0x18c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b06      	cmp	r3, #6
 800534e:	d010      	beq.n	8005372 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	e007      	b.n	8005372 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40010000 	.word	0x40010000
 8005380:	40010400 	.word	0x40010400
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40014000 	.word	0x40014000
 8005394:	40001800 	.word	0x40001800

08005398 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e041      	b.n	800542e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fd fb0e 	bl	80029e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f000 fcb8 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e097      	b.n	800557a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fa24 	bl	80028ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fc5e 	bl	8005d4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	4313      	orrs	r3, r2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054d6:	f023 030c 	bic.w	r3, r3, #12
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	4313      	orrs	r3, r2
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	011a      	lsls	r2, r3, #4
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	4313      	orrs	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005514:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800551c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4313      	orrs	r3, r2
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005592:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800559a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055aa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d110      	bne.n	80055d4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055b8:	7b7b      	ldrb	r3, [r7, #13]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d001      	beq.n	80055c2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e069      	b.n	8005696 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d2:	e031      	b.n	8005638 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d110      	bne.n	80055fc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e0:	7b3b      	ldrb	r3, [r7, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e055      	b.n	8005696 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fa:	e01d      	b.n	8005638 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005608:	7b7b      	ldrb	r3, [r7, #13]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d102      	bne.n	8005614 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800560e:	7b3b      	ldrb	r3, [r7, #12]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d001      	beq.n	8005618 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e03e      	b.n	8005696 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_Encoder_Start+0xc4>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d008      	beq.n	8005656 <HAL_TIM_Encoder_Start+0xd4>
 8005644:	e00f      	b.n	8005666 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2201      	movs	r2, #1
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f000 ff90 	bl	8006574 <TIM_CCxChannelCmd>
      break;
 8005654:	e016      	b.n	8005684 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	2104      	movs	r1, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f000 ff88 	bl	8006574 <TIM_CCxChannelCmd>
      break;
 8005664:	e00e      	b.n	8005684 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff80 	bl	8006574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	2104      	movs	r1, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f000 ff79 	bl	8006574 <TIM_CCxChannelCmd>
      break;
 8005682:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d122      	bne.n	80056fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d11b      	bne.n	80056fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0202 	mvn.w	r2, #2
 80056ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb14 	bl	8005d0e <HAL_TIM_IC_CaptureCallback>
 80056e6:	e005      	b.n	80056f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb06 	bl	8005cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb17 	bl	8005d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d122      	bne.n	800574e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b04      	cmp	r3, #4
 8005714:	d11b      	bne.n	800574e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0204 	mvn.w	r2, #4
 800571e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 faea 	bl	8005d0e <HAL_TIM_IC_CaptureCallback>
 800573a:	e005      	b.n	8005748 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fadc 	bl	8005cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 faed 	bl	8005d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b08      	cmp	r3, #8
 800575a:	d122      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11b      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0208 	mvn.w	r2, #8
 8005772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2204      	movs	r2, #4
 8005778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fac0 	bl	8005d0e <HAL_TIM_IC_CaptureCallback>
 800578e:	e005      	b.n	800579c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fab2 	bl	8005cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fac3 	bl	8005d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d122      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d11b      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0210 	mvn.w	r2, #16
 80057c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2208      	movs	r2, #8
 80057cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa96 	bl	8005d0e <HAL_TIM_IC_CaptureCallback>
 80057e2:	e005      	b.n	80057f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa88 	bl	8005cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa99 	bl	8005d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0201 	mvn.w	r2, #1
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fc fdbf 	bl	80023a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 ff91 	bl	8006770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa5e 	bl	8005d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d10e      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b20      	cmp	r3, #32
 8005894:	d107      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0220 	mvn.w	r2, #32
 800589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 ff5b 	bl	800675c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e088      	b.n	80059de <HAL_TIM_IC_ConfigChannel+0x130>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11b      	bne.n	8005912 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f000 fc7f 	bl	80061ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 020c 	bic.w	r2, r2, #12
 80058fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	619a      	str	r2, [r3, #24]
 8005910:	e060      	b.n	80059d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d11c      	bne.n	8005952 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f000 fd03 	bl	8006332 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800593a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6999      	ldr	r1, [r3, #24]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	021a      	lsls	r2, r3, #8
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	619a      	str	r2, [r3, #24]
 8005950:	e040      	b.n	80059d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f000 fd50 	bl	800640c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 020c 	bic.w	r2, r2, #12
 800597a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69d9      	ldr	r1, [r3, #28]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	61da      	str	r2, [r3, #28]
 800598e:	e021      	b.n	80059d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d11c      	bne.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f000 fd6d 	bl	8006484 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	021a      	lsls	r2, r3, #8
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	61da      	str	r2, [r3, #28]
 80059ce:	e001      	b.n	80059d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0ae      	b.n	8005b64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	f200 809f 	bhi.w	8005b54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005b55 	.word	0x08005b55
 8005a24:	08005b55 	.word	0x08005b55
 8005a28:	08005b55 	.word	0x08005b55
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005b55 	.word	0x08005b55
 8005a34:	08005b55 	.word	0x08005b55
 8005a38:	08005b55 	.word	0x08005b55
 8005a3c:	08005ad3 	.word	0x08005ad3
 8005a40:	08005b55 	.word	0x08005b55
 8005a44:	08005b55 	.word	0x08005b55
 8005a48:	08005b55 	.word	0x08005b55
 8005a4c:	08005b13 	.word	0x08005b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa18 	bl	8005e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	619a      	str	r2, [r3, #24]
      break;
 8005a8e:	e064      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa68 	bl	8005f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
      break;
 8005ad0:	e043      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fabd 	bl	8006058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0204 	bic.w	r2, r2, #4
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      break;
 8005b10:	e023      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb11 	bl	8006140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	021a      	lsls	r2, r3, #8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
      break;
 8005b52:	e002      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
      break;
 8005b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_ConfigClockSource+0x1c>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0b4      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x186>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc0:	d03e      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0xd4>
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc6:	f200 8087 	bhi.w	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	f000 8086 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x172>
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d87f      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b70      	cmp	r3, #112	; 0x70
 8005bda:	d01a      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0xa6>
 8005bdc:	2b70      	cmp	r3, #112	; 0x70
 8005bde:	d87b      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b60      	cmp	r3, #96	; 0x60
 8005be2:	d050      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x11a>
 8005be4:	2b60      	cmp	r3, #96	; 0x60
 8005be6:	d877      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b50      	cmp	r3, #80	; 0x50
 8005bea:	d03c      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0xfa>
 8005bec:	2b50      	cmp	r3, #80	; 0x50
 8005bee:	d873      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d058      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x13a>
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d86f      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b30      	cmp	r3, #48	; 0x30
 8005bfa:	d064      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d86b      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d060      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d867      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d05c      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d05a      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c10:	e062      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6899      	ldr	r1, [r3, #8]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f000 fc87 	bl	8006534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	609a      	str	r2, [r3, #8]
      break;
 8005c3e:	e04f      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6899      	ldr	r1, [r3, #8]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f000 fc70 	bl	8006534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c62:	609a      	str	r2, [r3, #8]
      break;
 8005c64:	e03c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fb2e 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2150      	movs	r1, #80	; 0x50
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fc3d 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005c84:	e02c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fb8a 	bl	80063ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2160      	movs	r1, #96	; 0x60
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fc2d 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e01c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 fb0e 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2140      	movs	r1, #64	; 0x40
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fc1d 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e00c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fc14 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005cd6:	e003      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e000      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a40      	ldr	r2, [pc, #256]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d02b      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d027      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d023      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2b      	ldr	r2, [pc, #172]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01f      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01b      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d017      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_Base_SetConfig+0x128>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_Base_SetConfig+0x12c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00f      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00b      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0x134>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d007      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <TIM_Base_SetConfig+0x138>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a23      	ldr	r2, [pc, #140]	; (8005e88 <TIM_Base_SetConfig+0x13c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d108      	bne.n	8005e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d103      	bne.n	8005e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	615a      	str	r2, [r3, #20]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800
 8005e80:	40001800 	.word	0x40001800
 8005e84:	40001c00 	.word	0x40001c00
 8005e88:	40002000 	.word	0x40002000

08005e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 0302 	bic.w	r3, r3, #2
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_OC1_SetConfig+0xd8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_OC1_SetConfig+0x64>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <TIM_OC1_SetConfig+0xdc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10c      	bne.n	8005f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0308 	bic.w	r3, r3, #8
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 0304 	bic.w	r3, r3, #4
 8005f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <TIM_OC1_SetConfig+0xd8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <TIM_OC1_SetConfig+0x8e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <TIM_OC1_SetConfig+0xdc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d111      	bne.n	8005f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40010400 	.word	0x40010400

08005f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0210 	bic.w	r2, r3, #16
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0320 	bic.w	r3, r3, #32
 8005fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a22      	ldr	r2, [pc, #136]	; (8006050 <TIM_OC2_SetConfig+0xe4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC2_SetConfig+0x68>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a21      	ldr	r2, [pc, #132]	; (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d10d      	bne.n	8005ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <TIM_OC2_SetConfig+0xe4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC2_SetConfig+0x94>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d113      	bne.n	8006028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400

08006058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a21      	ldr	r2, [pc, #132]	; (8006138 <TIM_OC3_SetConfig+0xe0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC3_SetConfig+0x66>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a20      	ldr	r2, [pc, #128]	; (800613c <TIM_OC3_SetConfig+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10d      	bne.n	80060da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <TIM_OC3_SetConfig+0xe0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC3_SetConfig+0x92>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <TIM_OC3_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d113      	bne.n	8006112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	621a      	str	r2, [r3, #32]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800618a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <TIM_OC4_SetConfig+0xa4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC4_SetConfig+0x68>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <TIM_OC4_SetConfig+0xa8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d109      	bne.n	80061bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	019b      	lsls	r3, r3, #6
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400

080061ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	f023 0201 	bic.w	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <TIM_TI1_SetConfig+0xcc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d017      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a25      	ldr	r2, [pc, #148]	; (80062bc <TIM_TI1_SetConfig+0xd0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <TIM_TI1_SetConfig+0xd4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a23      	ldr	r2, [pc, #140]	; (80062c4 <TIM_TI1_SetConfig+0xd8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <TIM_TI1_SetConfig+0xdc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a21      	ldr	r2, [pc, #132]	; (80062cc <TIM_TI1_SetConfig+0xe0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_TI1_SetConfig+0x66>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <TIM_TI1_SetConfig+0xe4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <TIM_TI1_SetConfig+0x6a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <TIM_TI1_SetConfig+0x6c>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e003      	b.n	8006276 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800627c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	b2db      	uxtb	r3, r3
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f023 030a 	bic.w	r3, r3, #10
 8006290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 030a 	and.w	r3, r3, #10
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40010400 	.word	0x40010400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40001800 	.word	0x40001800

080062d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 030a 	bic.w	r3, r3, #10
 8006310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0210 	bic.w	r2, r3, #16
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	b29b      	uxth	r3, r3
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006384:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	031b      	lsls	r3, r3, #12
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0303 	bic.w	r3, r3, #3
 8006438:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	b2db      	uxtb	r3, r3
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800645c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	031b      	lsls	r3, r3, #12
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	031b      	lsls	r3, r3, #12
 80064dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	f043 0307 	orr.w	r3, r3, #7
 8006520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800654e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	431a      	orrs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2201      	movs	r2, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	43db      	mvns	r3, r3
 8006596:	401a      	ands	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e05a      	b.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a21      	ldr	r2, [pc, #132]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006624:	d01d      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1d      	ldr	r2, [pc, #116]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1b      	ldr	r2, [pc, #108]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10c      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40010400 	.word	0x40010400
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40001800 	.word	0x40001800

080066b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e03d      	b.n	8006750 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e03f      	b.n	8006816 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc f9a2 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	; 0x24
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fddf 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695a      	ldr	r2, [r3, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b08a      	sub	sp, #40	; 0x28
 8006822:	af02      	add	r7, sp, #8
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b20      	cmp	r3, #32
 800683c:	d17c      	bne.n	8006938 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_UART_Transmit+0x2c>
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e075      	b.n	800693a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_UART_Transmit+0x3e>
 8006858:	2302      	movs	r3, #2
 800685a:	e06e      	b.n	800693a <HAL_UART_Transmit+0x11c>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2221      	movs	r2, #33	; 0x21
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006872:	f7fc fb89 	bl	8002f88 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	88fa      	ldrh	r2, [r7, #6]
 800687c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	88fa      	ldrh	r2, [r7, #6]
 8006882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688c:	d108      	bne.n	80068a0 <HAL_UART_Transmit+0x82>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e003      	b.n	80068a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068b0:	e02a      	b.n	8006908 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	; 0x80
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fb1f 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e036      	b.n	800693a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3302      	adds	r3, #2
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e007      	b.n	80068fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3301      	adds	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1cf      	bne.n	80068b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	2140      	movs	r1, #64	; 0x40
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 faef 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e000      	b.n	800693a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006938:	2302      	movs	r3, #2
  }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	4613      	mov	r3, r2
 800694e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b20      	cmp	r3, #32
 800695a:	d11d      	bne.n	8006998 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Receive_IT+0x26>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e016      	b.n	800699a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_UART_Receive_IT+0x38>
 8006976:	2302      	movs	r3, #2
 8006978:	e00f      	b.n	800699a <HAL_UART_Receive_IT+0x58>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	461a      	mov	r2, r3
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fb24 	bl	8006fdc <UART_Start_Receive_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	e000      	b.n	800699a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b0ba      	sub	sp, #232	; 0xe8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_UART_IRQHandler+0x66>
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fc07 	bl	8007216 <UART_Receive_IT>
      return;
 8006a08:	e256      	b.n	8006eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 80de 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x22c>
 8006a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80d1 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <HAL_UART_IRQHandler+0xae>
 8006a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_UART_IRQHandler+0xd2>
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f043 0202 	orr.w	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0xf6>
 8006a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0204 	orr.w	r2, r3, #4
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d011      	beq.n	8006aca <HAL_UART_IRQHandler+0x126>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0208 	orr.w	r2, r3, #8
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 81ed 	beq.w	8006eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_UART_IRQHandler+0x14e>
 8006ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb92 	bl	8007216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <HAL_UART_IRQHandler+0x17a>
 8006b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d04f      	beq.n	8006bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa9a 	bl	8007058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b40      	cmp	r3, #64	; 0x40
 8006b30:	d141      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1d9      	bne.n	8006b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	4a7d      	ldr	r2, [pc, #500]	; (8006d80 <HAL_UART_IRQHandler+0x3dc>)
 8006b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fc fb7a 	bl	800328c <HAL_DMA_Abort_IT>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	e00e      	b.n	8006bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f990 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	e00a      	b.n	8006bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f98c 	bl	8006ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbc:	e006      	b.n	8006bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f988 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bca:	e170      	b.n	8006eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bcc:	bf00      	nop
    return;
 8006bce:	e16e      	b.n	8006eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	f040 814a 	bne.w	8006e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8143 	beq.w	8006e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 813c 	beq.w	8006e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	f040 80b4 	bne.w	8006d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8140 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	f080 8139 	bcs.w	8006eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	f000 8088 	beq.w	8006d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1d9      	bne.n	8006c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e1      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3314      	adds	r3, #20
 8006ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3314      	adds	r3, #20
 8006cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e3      	bne.n	8006cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d36:	f023 0310 	bic.w	r3, r3, #16
 8006d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e3      	bne.n	8006d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fc fa23 	bl	80031ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8b6 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d7c:	e099      	b.n	8006eb2 <HAL_UART_IRQHandler+0x50e>
 8006d7e:	bf00      	nop
 8006d80:	0800711f 	.word	0x0800711f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 808b 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8086 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dce:	647a      	str	r2, [r7, #68]	; 0x44
 8006dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e3      	bne.n	8006daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	623b      	str	r3, [r7, #32]
   return(result);
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e06:	633a      	str	r2, [r7, #48]	; 0x30
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e3      	bne.n	8006de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e3      	bne.n	8006e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f83e 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e6c:	e023      	b.n	8006eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_UART_IRQHandler+0x4ea>
 8006e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f95d 	bl	8007146 <UART_Transmit_IT>
    return;
 8006e8c:	e014      	b.n	8006eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x514>
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f99d 	bl	80071e6 <UART_EndTransmit_IT>
    return;
 8006eac:	e004      	b.n	8006eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8006eae:	bf00      	nop
 8006eb0:	e002      	b.n	8006eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8006eb2:	bf00      	nop
 8006eb4:	e000      	b.n	8006eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8006eb6:	bf00      	nop
  }
}
 8006eb8:	37e8      	adds	r7, #232	; 0xe8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	e050      	b.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d04c      	beq.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f20:	f7fc f832 	bl	8002f88 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d241      	bcs.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f50:	637a      	str	r2, [r7, #52]	; 0x34
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e5      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f84:	623a      	str	r2, [r7, #32]
 8006f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	69f9      	ldr	r1, [r7, #28]
 8006f8a:	6a3a      	ldr	r2, [r7, #32]
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e00f      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d09f      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3740      	adds	r7, #64	; 0x40
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2222      	movs	r2, #34	; 0x22
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0220 	orr.w	r2, r2, #32
 8007048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b095      	sub	sp, #84	; 0x54
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007080:	643a      	str	r2, [r7, #64]	; 0x40
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d119      	bne.n	8007104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f023 0310 	bic.w	r3, r3, #16
 80070e6:	647b      	str	r3, [r7, #68]	; 0x44
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f0:	61ba      	str	r2, [r7, #24]
 80070f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	613b      	str	r3, [r7, #16]
   return(result);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007112:	bf00      	nop
 8007114:	3754      	adds	r7, #84	; 0x54
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fecb 	bl	8006ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b21      	cmp	r3, #33	; 0x21
 8007158:	d13e      	bne.n	80071d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d114      	bne.n	800718e <UART_Transmit_IT+0x48>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d110      	bne.n	800718e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	621a      	str	r2, [r3, #32]
 800718c:	e008      	b.n	80071a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	1c59      	adds	r1, r3, #1
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6211      	str	r1, [r2, #32]
 8007198:	781a      	ldrb	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4619      	mov	r1, r3
 80071ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10f      	bne.n	80071d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e000      	b.n	80071da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fe5a 	bl	8006ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b08c      	sub	sp, #48	; 0x30
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b22      	cmp	r3, #34	; 0x22
 8007228:	f040 80ab 	bne.w	8007382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d117      	bne.n	8007266 <UART_Receive_IT+0x50>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d113      	bne.n	8007266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007254:	b29a      	uxth	r2, r3
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28
 8007264:	e026      	b.n	80072b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800726c:	2300      	movs	r3, #0
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d007      	beq.n	800728a <UART_Receive_IT+0x74>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <UART_Receive_IT+0x82>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e008      	b.n	80072aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29b      	uxth	r3, r3
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4619      	mov	r1, r3
 80072c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d15a      	bne.n	800737e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0220 	bic.w	r2, r2, #32
 80072d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695a      	ldr	r2, [r3, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	2b01      	cmp	r3, #1
 8007306:	d135      	bne.n	8007374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	613b      	str	r3, [r7, #16]
   return(result);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	623a      	str	r2, [r7, #32]
 8007330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	69f9      	ldr	r1, [r7, #28]
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	61bb      	str	r3, [r7, #24]
   return(result);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b10      	cmp	r3, #16
 800734e:	d10a      	bne.n	8007366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fdbb 	bl	8006ee8 <HAL_UARTEx_RxEventCallback>
 8007372:	e002      	b.n	800737a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fa fa5d 	bl	8001834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e002      	b.n	8007384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3730      	adds	r7, #48	; 0x30
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c0      	sub	sp, #256	; 0x100
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073e4:	f021 010c 	bic.w	r1, r1, #12
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	ea40 0301 	orr.w	r3, r0, r1
 8007412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8f      	ldr	r3, [pc, #572]	; (8007658 <UART_SetConfig+0x2cc>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <UART_SetConfig+0xa0>
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8d      	ldr	r3, [pc, #564]	; (800765c <UART_SetConfig+0x2d0>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fd fd8c 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 8007430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007434:	e003      	b.n	800743e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fd fd73 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800743a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007448:	f040 810c 	bne.w	8007664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800745a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	1891      	adds	r1, r2, r2
 8007464:	65b9      	str	r1, [r7, #88]	; 0x58
 8007466:	415b      	adcs	r3, r3
 8007468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800746e:	4621      	mov	r1, r4
 8007470:	eb12 0801 	adds.w	r8, r2, r1
 8007474:	4629      	mov	r1, r5
 8007476:	eb43 0901 	adc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800749c:	462b      	mov	r3, r5
 800749e:	eb49 0303 	adc.w	r3, r9, r3
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	18db      	adds	r3, r3, r3
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
 80074c0:	4613      	mov	r3, r2
 80074c2:	eb42 0303 	adc.w	r3, r2, r3
 80074c6:	657b      	str	r3, [r7, #84]	; 0x54
 80074c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074d0:	f7f9 fbda 	bl	8000c88 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b61      	ldr	r3, [pc, #388]	; (8007660 <UART_SetConfig+0x2d4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80074fc:	415b      	adcs	r3, r3
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007504:	4641      	mov	r1, r8
 8007506:	eb12 0a01 	adds.w	sl, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0b01 	adc.w	fp, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	4692      	mov	sl, r2
 8007526:	469b      	mov	fp, r3
 8007528:	4643      	mov	r3, r8
 800752a:	eb1a 0303 	adds.w	r3, sl, r3
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007532:	464b      	mov	r3, r9
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800754c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	643b      	str	r3, [r7, #64]	; 0x40
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
 800755e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007566:	f7f9 fb8f 	bl	8000c88 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b3b      	ldr	r3, [pc, #236]	; (8007660 <UART_SetConfig+0x2d4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	; 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <UART_SetConfig+0x2d4>)
 8007588:	fba3 2302 	umull	r2, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80075b0:	415b      	adcs	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6339      	str	r1, [r7, #48]	; 0x30
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ec:	464b      	mov	r3, r9
 80075ee:	460a      	mov	r2, r1
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800760c:	460b      	mov	r3, r1
 800760e:	18db      	adds	r3, r3, r3
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
 8007612:	4613      	mov	r3, r2
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800761a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800761e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007622:	f7f9 fb31 	bl	8000c88 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <UART_SetConfig+0x2d4>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	; 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	; 0x32
 800763e:	4a08      	ldr	r2, [pc, #32]	; (8007660 <UART_SetConfig+0x2d4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4422      	add	r2, r4
 8007652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007654:	e105      	b.n	8007862 <UART_SetConfig+0x4d6>
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800766e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007676:	4642      	mov	r2, r8
 8007678:	464b      	mov	r3, r9
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6239      	str	r1, [r7, #32]
 800767e:	415b      	adcs	r3, r3
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
 8007682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007686:	4641      	mov	r1, r8
 8007688:	1854      	adds	r4, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0501 	adc.w	r5, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	00eb      	lsls	r3, r5, #3
 800769a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769e:	00e2      	lsls	r2, r4, #3
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	18e3      	adds	r3, r4, r3
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ac:	464b      	mov	r3, r9
 80076ae:	eb45 0303 	adc.w	r3, r5, r3
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076d2:	4629      	mov	r1, r5
 80076d4:	008b      	lsls	r3, r1, #2
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076dc:	4621      	mov	r1, r4
 80076de:	008a      	lsls	r2, r1, #2
 80076e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076e4:	f7f9 fad0 	bl	8000c88 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4b60      	ldr	r3, [pc, #384]	; (8007870 <UART_SetConfig+0x4e4>)
 80076ee:	fba3 2302 	umull	r2, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	011c      	lsls	r4, r3, #4
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	61b9      	str	r1, [r7, #24]
 8007710:	415b      	adcs	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	67bb      	str	r3, [r7, #120]	; 0x78
 8007762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007770:	4649      	mov	r1, r9
 8007772:	008b      	lsls	r3, r1, #2
 8007774:	4641      	mov	r1, r8
 8007776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777a:	4641      	mov	r1, r8
 800777c:	008a      	lsls	r2, r1, #2
 800777e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007782:	f7f9 fa81 	bl	8000c88 <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4b39      	ldr	r3, [pc, #228]	; (8007870 <UART_SetConfig+0x4e4>)
 800778c:	fba3 1302 	umull	r1, r3, r3, r2
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	2164      	movs	r1, #100	; 0x64
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	3332      	adds	r3, #50	; 0x32
 800779e:	4a34      	ldr	r2, [pc, #208]	; (8007870 <UART_SetConfig+0x4e4>)
 80077a0:	fba2 2303 	umull	r2, r3, r2, r3
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077aa:	441c      	add	r4, r3
 80077ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b0:	2200      	movs	r2, #0
 80077b2:	673b      	str	r3, [r7, #112]	; 0x70
 80077b4:	677a      	str	r2, [r7, #116]	; 0x74
 80077b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077ba:	4642      	mov	r2, r8
 80077bc:	464b      	mov	r3, r9
 80077be:	1891      	adds	r1, r2, r2
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	415b      	adcs	r3, r3
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077ca:	4641      	mov	r1, r8
 80077cc:	1851      	adds	r1, r2, r1
 80077ce:	6039      	str	r1, [r7, #0]
 80077d0:	4649      	mov	r1, r9
 80077d2:	414b      	adcs	r3, r1
 80077d4:	607b      	str	r3, [r7, #4]
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e2:	4659      	mov	r1, fp
 80077e4:	00cb      	lsls	r3, r1, #3
 80077e6:	4651      	mov	r1, sl
 80077e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ec:	4651      	mov	r1, sl
 80077ee:	00ca      	lsls	r2, r1, #3
 80077f0:	4610      	mov	r0, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	4642      	mov	r2, r8
 80077f8:	189b      	adds	r3, r3, r2
 80077fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fc:	464b      	mov	r3, r9
 80077fe:	460a      	mov	r2, r1
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	663b      	str	r3, [r7, #96]	; 0x60
 8007810:	667a      	str	r2, [r7, #100]	; 0x64
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800781e:	4649      	mov	r1, r9
 8007820:	008b      	lsls	r3, r1, #2
 8007822:	4641      	mov	r1, r8
 8007824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007828:	4641      	mov	r1, r8
 800782a:	008a      	lsls	r2, r1, #2
 800782c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007830:	f7f9 fa2a 	bl	8000c88 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <UART_SetConfig+0x4e4>)
 800783a:	fba3 1302 	umull	r1, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	2164      	movs	r1, #100	; 0x64
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	3332      	adds	r3, #50	; 0x32
 800784c:	4a08      	ldr	r2, [pc, #32]	; (8007870 <UART_SetConfig+0x4e4>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4422      	add	r2, r4
 8007860:	609a      	str	r2, [r3, #8]
}
 8007862:	bf00      	nop
 8007864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786e:	bf00      	nop
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <__NVIC_SetPriority>:
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007884:	2b00      	cmp	r3, #0
 8007886:	db0a      	blt.n	800789e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	b2da      	uxtb	r2, r3
 800788c:	490c      	ldr	r1, [pc, #48]	; (80078c0 <__NVIC_SetPriority+0x4c>)
 800788e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007892:	0112      	lsls	r2, r2, #4
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	440b      	add	r3, r1
 8007898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800789c:	e00a      	b.n	80078b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4908      	ldr	r1, [pc, #32]	; (80078c4 <__NVIC_SetPriority+0x50>)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	3b04      	subs	r3, #4
 80078ac:	0112      	lsls	r2, r2, #4
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	440b      	add	r3, r1
 80078b2:	761a      	strb	r2, [r3, #24]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	e000e100 	.word	0xe000e100
 80078c4:	e000ed00 	.word	0xe000ed00

080078c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <SysTick_Handler+0x1c>)
 80078ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80078d0:	f001 fe98 	bl	8009604 <xTaskGetSchedulerState>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d001      	beq.n	80078de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80078da:	f002 fc7d 	bl	800a1d8 <xPortSysTickHandler>
  }
}
 80078de:	bf00      	nop
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	e000e010 	.word	0xe000e010

080078e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	f06f 0004 	mvn.w	r0, #4
 80078f2:	f7ff ffbf 	bl	8007874 <__NVIC_SetPriority>
#endif
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007902:	f3ef 8305 	mrs	r3, IPSR
 8007906:	603b      	str	r3, [r7, #0]
  return(result);
 8007908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800790e:	f06f 0305 	mvn.w	r3, #5
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e00c      	b.n	8007930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <osKernelInitialize+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <osKernelInitialize+0x44>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007924:	2300      	movs	r3, #0
 8007926:	607b      	str	r3, [r7, #4]
 8007928:	e002      	b.n	8007930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007930:	687b      	ldr	r3, [r7, #4]
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000610 	.word	0x20000610

08007944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794a:	f3ef 8305 	mrs	r3, IPSR
 800794e:	603b      	str	r3, [r7, #0]
  return(result);
 8007950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007956:	f06f 0305 	mvn.w	r3, #5
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	e010      	b.n	8007980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <osKernelStart+0x48>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d109      	bne.n	800797a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007966:	f7ff ffbf 	bl	80078e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <osKernelStart+0x48>)
 800796c:	2202      	movs	r2, #2
 800796e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007970:	f001 fa24 	bl	8008dbc <vTaskStartScheduler>
      stat = osOK;
 8007974:	2300      	movs	r3, #0
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	e002      	b.n	8007980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007980:	687b      	ldr	r3, [r7, #4]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000610 	.word	0x20000610

08007990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af04      	add	r7, sp, #16
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a0:	f3ef 8305 	mrs	r3, IPSR
 80079a4:	617b      	str	r3, [r7, #20]
  return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d17e      	bne.n	8007aaa <osThreadNew+0x11a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d07b      	beq.n	8007aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079b2:	2380      	movs	r3, #128	; 0x80
 80079b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079b6:	2318      	movs	r3, #24
 80079b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295
 80079c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d045      	beq.n	8007a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <osThreadNew+0x48>
        name = attr->name;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <osThreadNew+0x6e>
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b38      	cmp	r3, #56	; 0x38
 80079f0:	d805      	bhi.n	80079fe <osThreadNew+0x6e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <osThreadNew+0x72>
        return (NULL);
 80079fe:	2300      	movs	r3, #0
 8007a00:	e054      	b.n	8007aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <osThreadNew+0xa8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2bbb      	cmp	r3, #187	; 0xbb
 8007a20:	d90a      	bls.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <osThreadNew+0xa8>
        mem = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e010      	b.n	8007a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <osThreadNew+0xca>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <osThreadNew+0xca>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <osThreadNew+0xca>
          mem = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e001      	b.n	8007a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d110      	bne.n	8007a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 ffc4 	bl	8008a04 <xTaskCreateStatic>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	e013      	b.n	8007aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d110      	bne.n	8007aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f001 f80f 	bl	8008abe <xTaskCreate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d001      	beq.n	8007aaa <osThreadNew+0x11a>
            hTask = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aaa:	693b      	ldr	r3, [r7, #16]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3728      	adds	r7, #40	; 0x28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abc:	f3ef 8305 	mrs	r3, IPSR
 8007ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <osDelay+0x1c>
    stat = osErrorISR;
 8007ac8:	f06f 0305 	mvn.w	r3, #5
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e007      	b.n	8007ae0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f93a 	bl	8008d54 <vTaskDelay>
    }
  }

  return (stat);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b08a      	sub	sp, #40	; 0x28
 8007aee:	af02      	add	r7, sp, #8
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007afa:	f3ef 8305 	mrs	r3, IPSR
 8007afe:	613b      	str	r3, [r7, #16]
  return(result);
 8007b00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d15f      	bne.n	8007bc6 <osMessageQueueNew+0xdc>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d05c      	beq.n	8007bc6 <osMessageQueueNew+0xdc>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d059      	beq.n	8007bc6 <osMessageQueueNew+0xdc>
    mem = -1;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d029      	beq.n	8007b72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d012      	beq.n	8007b4c <osMessageQueueNew+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8007b2c:	d90e      	bls.n	8007b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d302      	bcc.n	8007b4c <osMessageQueueNew+0x62>
        mem = 1;
 8007b46:	2301      	movs	r3, #1
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	e014      	b.n	8007b76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d110      	bne.n	8007b76 <osMessageQueueNew+0x8c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d108      	bne.n	8007b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <osMessageQueueNew+0x8c>
          mem = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	e001      	b.n	8007b76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10b      	bne.n	8007b94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2100      	movs	r1, #0
 8007b86:	9100      	str	r1, [sp, #0]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fa21 	bl	8007fd2 <xQueueGenericCreateStatic>
 8007b90:	61f8      	str	r0, [r7, #28]
 8007b92:	e008      	b.n	8007ba6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d105      	bne.n	8007ba6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fa8f 	bl	80080c2 <xQueueGenericCreate>
 8007ba4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <osMessageQueueNew+0xd0>
        name = attr->name;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e001      	b.n	8007bbe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007bbe:	6979      	ldr	r1, [r7, #20]
 8007bc0:	69f8      	ldr	r0, [r7, #28]
 8007bc2:	f000 fec1 	bl	8008948 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007bc6:	69fb      	ldr	r3, [r7, #28]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007be8:	f3ef 8305 	mrs	r3, IPSR
 8007bec:	617b      	str	r3, [r7, #20]
  return(result);
 8007bee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d028      	beq.n	8007c46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <osMessageQueuePut+0x36>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <osMessageQueuePut+0x36>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007c06:	f06f 0303 	mvn.w	r3, #3
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	e038      	b.n	8007c80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c12:	f107 0210 	add.w	r2, r7, #16
 8007c16:	2300      	movs	r3, #0
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	69b8      	ldr	r0, [r7, #24]
 8007c1c:	f000 fb94 	bl	8008348 <xQueueGenericSendFromISR>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d003      	beq.n	8007c2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007c26:	f06f 0302 	mvn.w	r3, #2
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	e028      	b.n	8007c80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d025      	beq.n	8007c80 <osMessageQueuePut+0xb0>
 8007c34:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <osMessageQueuePut+0xbc>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	e01c      	b.n	8007c80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <osMessageQueuePut+0x82>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007c52:	f06f 0303 	mvn.w	r3, #3
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	e012      	b.n	8007c80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	69b8      	ldr	r0, [r7, #24]
 8007c62:	f000 fa8b 	bl	800817c <xQueueGenericSend>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d009      	beq.n	8007c80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007c72:	f06f 0301 	mvn.w	r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	e002      	b.n	8007c80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007c7a:	f06f 0302 	mvn.w	r3, #2
 8007c7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007c80:	69fb      	ldr	r3, [r7, #28]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca6:	f3ef 8305 	mrs	r3, IPSR
 8007caa:	617b      	str	r3, [r7, #20]
  return(result);
 8007cac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d028      	beq.n	8007d04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <osMessageQueueGet+0x34>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <osMessageQueueGet+0x34>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007cc4:	f06f 0303 	mvn.w	r3, #3
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	e037      	b.n	8007d3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007cd0:	f107 0310 	add.w	r3, r7, #16
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	69b8      	ldr	r0, [r7, #24]
 8007cda:	f000 fca5 	bl	8008628 <xQueueReceiveFromISR>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d003      	beq.n	8007cec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ce4:	f06f 0302 	mvn.w	r3, #2
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	e027      	b.n	8007d3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d024      	beq.n	8007d3c <osMessageQueueGet+0xac>
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <osMessageQueueGet+0xb8>)
 8007cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	e01b      	b.n	8007d3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <osMessageQueueGet+0x80>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007d10:	f06f 0303 	mvn.w	r3, #3
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	e011      	b.n	8007d3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	69b8      	ldr	r0, [r7, #24]
 8007d1e:	f000 fbaf 	bl	8008480 <xQueueReceive>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d009      	beq.n	8007d3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007d2e:	f06f 0301 	mvn.w	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	e002      	b.n	8007d3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007d36:	f06f 0302 	mvn.w	r3, #2
 8007d3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007d3c:	69fb      	ldr	r3, [r7, #28]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a06      	ldr	r2, [pc, #24]	; (8007d7c <vApplicationGetIdleTaskMemory+0x30>)
 8007d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2280      	movs	r2, #128	; 0x80
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000614 	.word	0x20000614
 8007d7c:	200006d0 	.word	0x200006d0

08007d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a07      	ldr	r2, [pc, #28]	; (8007dac <vApplicationGetTimerTaskMemory+0x2c>)
 8007d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <vApplicationGetTimerTaskMemory+0x30>)
 8007d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d9e:	601a      	str	r2, [r3, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	200008d0 	.word	0x200008d0
 8007db0:	2000098c 	.word	0x2000098c

08007db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f103 0208 	add.w	r2, r3, #8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f103 0208 	add.w	r2, r3, #8
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f103 0208 	add.w	r2, r3, #8
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d103      	bne.n	8007e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e00c      	b.n	8007e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e002      	b.n	8007e84 <vListInsert+0x2e>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d2f6      	bcs.n	8007e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6892      	ldr	r2, [r2, #8]
 8007ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6852      	ldr	r2, [r2, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d103      	bne.n	8007efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1e5a      	subs	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f46:	f002 f8b5 	bl	800a0b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f56:	fb01 f303 	mul.w	r3, r1, r3
 8007f5a:	441a      	add	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	3b01      	subs	r3, #1
 8007f78:	68f9      	ldr	r1, [r7, #12]
 8007f7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22ff      	movs	r2, #255	; 0xff
 8007f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3310      	adds	r3, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 f96f 	bl	800928c <xTaskRemoveFromEventList>
 8007fae:	e009      	b.n	8007fc4 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3310      	adds	r3, #16
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fefd 	bl	8007db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3324      	adds	r3, #36	; 0x24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fef8 	bl	8007db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fc4:	f002 f8a6 	bl	800a114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fc8:	2301      	movs	r3, #1
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b08e      	sub	sp, #56	; 0x38
 8007fd6:	af02      	add	r7, sp, #8
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <xQueueGenericCreateStatic+0x52>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <xQueueGenericCreateStatic+0x56>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xQueueGenericCreateStatic+0x58>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	623b      	str	r3, [r7, #32]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <xQueueGenericCreateStatic+0x7e>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGenericCreateStatic+0x82>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGenericCreateStatic+0x84>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61fb      	str	r3, [r7, #28]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008070:	2350      	movs	r3, #80	; 0x50
 8008072:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2b50      	cmp	r3, #80	; 0x50
 8008078:	d00a      	beq.n	8008090 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	61bb      	str	r3, [r7, #24]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008090:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00d      	beq.n	80080b8 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f83f 	bl	8008136 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3730      	adds	r7, #48	; 0x30
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b08a      	sub	sp, #40	; 0x28
 80080c6:	af02      	add	r7, sp, #8
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	4613      	mov	r3, r2
 80080ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <xQueueGenericCreate+0x2a>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	613b      	str	r3, [r7, #16]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	3350      	adds	r3, #80	; 0x50
 80080fa:	4618      	mov	r0, r3
 80080fc:	f002 f8fc 	bl	800a2f8 <pvPortMalloc>
 8008100:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d011      	beq.n	800812c <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3350      	adds	r3, #80	; 0x50
 8008110:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800811a:	79fa      	ldrb	r2, [r7, #7]
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 f805 	bl	8008136 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800812c:	69bb      	ldr	r3, [r7, #24]
	}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e002      	b.n	8008158 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008164:	2101      	movs	r1, #1
 8008166:	69b8      	ldr	r0, [r7, #24]
 8008168:	f7ff fed8 	bl	8007f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	; 0x38
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800818a:	2300      	movs	r3, #0
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xQueueGenericSend+0x32>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <xQueueGenericSend+0x40>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <xQueueGenericSend+0x44>
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <xQueueGenericSend+0x46>
 80081c0:	2300      	movs	r3, #0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <xQueueGenericSend+0x60>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <xQueueGenericSend+0x6e>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <xQueueGenericSend+0x72>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <xQueueGenericSend+0x74>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xQueueGenericSend+0x8e>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	623b      	str	r3, [r7, #32]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800820a:	f001 f9fb 	bl	8009604 <xTaskGetSchedulerState>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <xQueueGenericSend+0x9e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <xQueueGenericSend+0xa2>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueGenericSend+0xa4>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericSend+0xbe>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61fb      	str	r3, [r7, #28]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800823a:	f001 ff3b 	bl	800a0b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	429a      	cmp	r2, r3
 8008248:	d302      	bcc.n	8008250 <xQueueGenericSend+0xd4>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d112      	bne.n	8008276 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008256:	f000 fa67 	bl	8008728 <prvCopyDataToQueue>
 800825a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	3324      	adds	r3, #36	; 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f001 f80f 	bl	800928c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800826e:	f001 ff51 	bl	800a114 <vPortExitCritical>
				return pdPASS;
 8008272:	2301      	movs	r3, #1
 8008274:	e062      	b.n	800833c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800827c:	f001 ff4a 	bl	800a114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008280:	2300      	movs	r3, #0
 8008282:	e05b      	b.n	800833c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800828a:	f107 0314 	add.w	r3, r7, #20
 800828e:	4618      	mov	r0, r3
 8008290:	f001 f860 	bl	8009354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008298:	f001 ff3c 	bl	800a114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800829c:	f000 fdfe 	bl	8008e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082a0:	f001 ff08 	bl	800a0b4 <vPortEnterCritical>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082aa:	b25b      	sxtb	r3, r3
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d103      	bne.n	80082ba <xQueueGenericSend+0x13e>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d103      	bne.n	80082d0 <xQueueGenericSend+0x154>
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d0:	f001 ff20 	bl	800a114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082d4:	1d3a      	adds	r2, r7, #4
 80082d6:	f107 0314 	add.w	r3, r7, #20
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f84f 	bl	8009380 <xTaskCheckForTimeOut>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d123      	bne.n	8008330 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ea:	f000 fb15 	bl	8008918 <prvIsQueueFull>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d017      	beq.n	8008324 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	3310      	adds	r3, #16
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 ff75 	bl	80091ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008304:	f000 faa0 	bl	8008848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008308:	f000 fdd6 	bl	8008eb8 <xTaskResumeAll>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d193      	bne.n	800823a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008312:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <xQueueGenericSend+0x1c8>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	e78a      	b.n	800823a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008326:	f000 fa8f 	bl	8008848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800832a:	f000 fdc5 	bl	8008eb8 <xTaskResumeAll>
 800832e:	e784      	b.n	800823a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008332:	f000 fa89 	bl	8008848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008336:	f000 fdbf 	bl	8008eb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800833a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800833c:	4618      	mov	r0, r3
 800833e:	3738      	adds	r7, #56	; 0x38
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b090      	sub	sp, #64	; 0x40
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <xQueueGenericSendFromISR+0x3c>
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <xQueueGenericSendFromISR+0x40>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <xQueueGenericSendFromISR+0x42>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d103      	bne.n	80083b2 <xQueueGenericSendFromISR+0x6a>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <xQueueGenericSendFromISR+0x6e>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueGenericSendFromISR+0x70>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	623b      	str	r3, [r7, #32]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d2:	f001 ff51 	bl	800a278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083d6:	f3ef 8211 	mrs	r2, BASEPRI
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	61fa      	str	r2, [r7, #28]
 80083ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <xQueueGenericSendFromISR+0xbc>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b02      	cmp	r3, #2
 8008402:	d12f      	bne.n	8008464 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800841a:	f000 f985 	bl	8008728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800841e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d112      	bne.n	800844e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d016      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f000 ff29 	bl	800928c <xTaskRemoveFromEventList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e007      	b.n	800845e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800844e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008452:	3301      	adds	r3, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	b25a      	sxtb	r2, r3
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800845e:	2301      	movs	r3, #1
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008462:	e001      	b.n	8008468 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008476:	4618      	mov	r0, r3
 8008478:	3740      	adds	r7, #64	; 0x40
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	; 0x30
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <xQueueReceive+0x30>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	623b      	str	r3, [r7, #32]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <xQueueReceive+0x3e>
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <xQueueReceive+0x42>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <xQueueReceive+0x44>
 80084c2:	2300      	movs	r3, #0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xQueueReceive+0x5e>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61fb      	str	r3, [r7, #28]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084de:	f001 f891 	bl	8009604 <xTaskGetSchedulerState>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <xQueueReceive+0x6e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <xQueueReceive+0x72>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <xQueueReceive+0x74>
 80084f2:	2300      	movs	r3, #0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xQueueReceive+0x8e>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	61bb      	str	r3, [r7, #24]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800850e:	f001 fdd1 	bl	800a0b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008522:	f000 f96b 	bl	80087fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	3310      	adds	r3, #16
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fea6 	bl	800928c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008540:	f001 fde8 	bl	800a114 <vPortExitCritical>
				return pdPASS;
 8008544:	2301      	movs	r3, #1
 8008546:	e069      	b.n	800861c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800854e:	f001 fde1 	bl	800a114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008552:	2300      	movs	r3, #0
 8008554:	e062      	b.n	800861c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fef7 	bl	8009354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008566:	2301      	movs	r3, #1
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800856a:	f001 fdd3 	bl	800a114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800856e:	f000 fc95 	bl	8008e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008572:	f001 fd9f 	bl	800a0b4 <vPortEnterCritical>
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800857c:	b25b      	sxtb	r3, r3
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d103      	bne.n	800858c <xQueueReceive+0x10c>
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008592:	b25b      	sxtb	r3, r3
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d103      	bne.n	80085a2 <xQueueReceive+0x122>
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a2:	f001 fdb7 	bl	800a114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085a6:	1d3a      	adds	r2, r7, #4
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fee6 	bl	8009380 <xTaskCheckForTimeOut>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d123      	bne.n	8008602 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085bc:	f000 f996 	bl	80088ec <prvIsQueueEmpty>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d017      	beq.n	80085f6 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	3324      	adds	r3, #36	; 0x24
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fe0c 	bl	80091ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d6:	f000 f937 	bl	8008848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085da:	f000 fc6d 	bl	8008eb8 <xTaskResumeAll>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d194      	bne.n	800850e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085e4:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <xQueueReceive+0x1a4>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	e78b      	b.n	800850e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f8:	f000 f926 	bl	8008848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085fc:	f000 fc5c 	bl	8008eb8 <xTaskResumeAll>
 8008600:	e785      	b.n	800850e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008604:	f000 f920 	bl	8008848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008608:	f000 fc56 	bl	8008eb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800860c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800860e:	f000 f96d 	bl	80088ec <prvIsQueueEmpty>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	f43f af7a 	beq.w	800850e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800861a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800861c:	4618      	mov	r0, r3
 800861e:	3730      	adds	r7, #48	; 0x30
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	623b      	str	r3, [r7, #32]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d103      	bne.n	8008662 <xQueueReceiveFromISR+0x3a>
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <xQueueReceiveFromISR+0x3e>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <xQueueReceiveFromISR+0x40>
 8008666:	2300      	movs	r3, #0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	61fb      	str	r3, [r7, #28]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008682:	f001 fdf9 	bl	800a278 <vPortValidateInterruptPriority>
	__asm volatile
 8008686:	f3ef 8211 	mrs	r2, BASEPRI
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	61ba      	str	r2, [r7, #24]
 800869c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800869e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d02f      	beq.n	800870e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086bc:	f000 f89e 	bl	80087fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	1e5a      	subs	r2, r3, #1
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80086c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d112      	bne.n	80086f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	3310      	adds	r3, #16
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fdd4 	bl	800928c <xTaskRemoveFromEventList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00e      	beq.n	8008708 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e007      	b.n	8008708 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086fc:	3301      	adds	r3, #1
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	b25a      	sxtb	r2, r3
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008708:	2301      	movs	r3, #1
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
 800870c:	e001      	b.n	8008712 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800870e:	2300      	movs	r3, #0
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f383 8811 	msr	BASEPRI, r3
}
 800871c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008720:	4618      	mov	r0, r3
 8008722:	3738      	adds	r7, #56	; 0x38
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10d      	bne.n	8008762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d14d      	bne.n	80087ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 ff74 	bl	8009640 <xTaskPriorityDisinherit>
 8008758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	e043      	b.n	80087ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d119      	bne.n	800879c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6858      	ldr	r0, [r3, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	461a      	mov	r2, r3
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	f002 fbbb 	bl	800aeee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	d32b      	bcc.n	80087ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	e026      	b.n	80087ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68d8      	ldr	r0, [r3, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	461a      	mov	r2, r3
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	f002 fba1 	bl	800aeee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	425b      	negs	r3, r3
 80087b6:	441a      	add	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d207      	bcs.n	80087d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	425b      	negs	r3, r3
 80087d2:	441a      	add	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d105      	bne.n	80087ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087f2:	697b      	ldr	r3, [r7, #20]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d018      	beq.n	8008840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	441a      	add	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d303      	bcc.n	8008830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68d9      	ldr	r1, [r3, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	461a      	mov	r2, r3
 800883a:	6838      	ldr	r0, [r7, #0]
 800883c:	f002 fb57 	bl	800aeee <memcpy>
	}
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008850:	f001 fc30 	bl	800a0b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800885a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800885c:	e011      	b.n	8008882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d012      	beq.n	800888c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fd0e 	bl	800928c <xTaskRemoveFromEventList>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008876:	f000 fde5 	bl	8009444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	3b01      	subs	r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dce9      	bgt.n	800885e <prvUnlockQueue+0x16>
 800888a:	e000      	b.n	800888e <prvUnlockQueue+0x46>
					break;
 800888c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008896:	f001 fc3d 	bl	800a114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800889a:	f001 fc0b 	bl	800a0b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088a6:	e011      	b.n	80088cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d012      	beq.n	80088d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fce9 	bl	800928c <xTaskRemoveFromEventList>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088c0:	f000 fdc0 	bl	8009444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dce9      	bgt.n	80088a8 <prvUnlockQueue+0x60>
 80088d4:	e000      	b.n	80088d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	22ff      	movs	r2, #255	; 0xff
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088e0:	f001 fc18 	bl	800a114 <vPortExitCritical>
}
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088f4:	f001 fbde 	bl	800a0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008900:	2301      	movs	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	e001      	b.n	800890a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800890a:	f001 fc03 	bl	800a114 <vPortExitCritical>

	return xReturn;
 800890e:	68fb      	ldr	r3, [r7, #12]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008920:	f001 fbc8 	bl	800a0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892c:	429a      	cmp	r2, r3
 800892e:	d102      	bne.n	8008936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	e001      	b.n	800893a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800893a:	f001 fbeb 	bl	800a114 <vPortExitCritical>

	return xReturn;
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e014      	b.n	8008982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008958:	4a0f      	ldr	r2, [pc, #60]	; (8008998 <vQueueAddToRegistry+0x50>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008964:	490c      	ldr	r1, [pc, #48]	; (8008998 <vQueueAddToRegistry+0x50>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800896e:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <vQueueAddToRegistry+0x50>)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	4413      	add	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800897a:	e006      	b.n	800898a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3301      	adds	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b07      	cmp	r3, #7
 8008986:	d9e7      	bls.n	8008958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000d8c 	.word	0x20000d8c

0800899c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089ac:	f001 fb82 	bl	800a0b4 <vPortEnterCritical>
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d103      	bne.n	80089c6 <vQueueWaitForMessageRestricted+0x2a>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d103      	bne.n	80089dc <vQueueWaitForMessageRestricted+0x40>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089dc:	f001 fb9a 	bl	800a114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	3324      	adds	r3, #36	; 0x24
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fc1f 	bl	8009234 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f7ff ff26 	bl	8008848 <prvUnlockQueue>
	}
 80089fc:	bf00      	nop
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	; 0x38
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	623b      	str	r3, [r7, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <xTaskCreateStatic+0x46>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	61fb      	str	r3, [r7, #28]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a4a:	23bc      	movs	r3, #188	; 0xbc
 8008a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2bbc      	cmp	r3, #188	; 0xbc
 8008a52:	d00a      	beq.n	8008a6a <xTaskCreateStatic+0x66>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	61bb      	str	r3, [r7, #24]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01e      	beq.n	8008ab0 <xTaskCreateStatic+0xac>
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01b      	beq.n	8008ab0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	9302      	str	r3, [sp, #8]
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	68b9      	ldr	r1, [r7, #8]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f850 	bl	8008b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aaa:	f000 f8f3 	bl	8008c94 <prvAddNewTaskToReadyList>
 8008aae:	e001      	b.n	8008ab4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ab4:	697b      	ldr	r3, [r7, #20]
	}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3728      	adds	r7, #40	; 0x28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08c      	sub	sp, #48	; 0x30
 8008ac2:	af04      	add	r7, sp, #16
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	603b      	str	r3, [r7, #0]
 8008aca:	4613      	mov	r3, r2
 8008acc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 fc10 	bl	800a2f8 <pvPortMalloc>
 8008ad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00e      	beq.n	8008afe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ae0:	20bc      	movs	r0, #188	; 0xbc
 8008ae2:	f001 fc09 	bl	800a2f8 <pvPortMalloc>
 8008ae6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
 8008af4:	e005      	b.n	8008b02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008af6:	6978      	ldr	r0, [r7, #20]
 8008af8:	f001 fcca 	bl	800a490 <vPortFree>
 8008afc:	e001      	b.n	8008b02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	2300      	movs	r3, #0
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	9302      	str	r3, [sp, #8]
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f80e 	bl	8008b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b2c:	69f8      	ldr	r0, [r7, #28]
 8008b2e:	f000 f8b1 	bl	8008c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b32:	2301      	movs	r3, #1
 8008b34:	61bb      	str	r3, [r7, #24]
 8008b36:	e002      	b.n	8008b3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3720      	adds	r7, #32
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	461a      	mov	r2, r3
 8008b60:	21a5      	movs	r1, #165	; 0xa5
 8008b62:	f002 f9d2 	bl	800af0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b70:	3b01      	subs	r3, #1
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	617b      	str	r3, [r7, #20]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01f      	beq.n	8008be6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	e012      	b.n	8008bd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	7819      	ldrb	r1, [r3, #0]
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	4413      	add	r3, r2
 8008bba:	3334      	adds	r3, #52	; 0x34
 8008bbc:	460a      	mov	r2, r1
 8008bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d006      	beq.n	8008bda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	2b0f      	cmp	r3, #15
 8008bd6:	d9e9      	bls.n	8008bac <prvInitialiseNewTask+0x64>
 8008bd8:	e000      	b.n	8008bdc <prvInitialiseNewTask+0x94>
			{
				break;
 8008bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008be4:	e003      	b.n	8008bee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2b37      	cmp	r3, #55	; 0x37
 8008bf2:	d901      	bls.n	8008bf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bf4:	2337      	movs	r3, #55	; 0x37
 8008bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	2200      	movs	r2, #0
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff f8f0 	bl	8007df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	3318      	adds	r3, #24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff f8eb 	bl	8007df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	3354      	adds	r3, #84	; 0x54
 8008c48:	2260      	movs	r2, #96	; 0x60
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f002 f95c 	bl	800af0a <memset>
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <prvInitialiseNewTask+0x140>)
 8008c56:	659a      	str	r2, [r3, #88]	; 0x58
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <prvInitialiseNewTask+0x144>)
 8008c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	4a0b      	ldr	r2, [pc, #44]	; (8008c90 <prvInitialiseNewTask+0x148>)
 8008c62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	69b8      	ldr	r0, [r7, #24]
 8008c6a:	f001 f8f9 	bl	8009e60 <pxPortInitialiseStack>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c80:	bf00      	nop
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	0800e848 	.word	0x0800e848
 8008c8c:	0800e868 	.word	0x0800e868
 8008c90:	0800e828 	.word	0x0800e828

08008c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c9c:	f001 fa0a 	bl	800a0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ca0:	4b26      	ldr	r3, [pc, #152]	; (8008d3c <prvAddNewTaskToReadyList+0xa8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	4a25      	ldr	r2, [pc, #148]	; (8008d3c <prvAddNewTaskToReadyList+0xa8>)
 8008ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008caa:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <prvAddNewTaskToReadyList+0xac>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cb2:	4a23      	ldr	r2, [pc, #140]	; (8008d40 <prvAddNewTaskToReadyList+0xac>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cb8:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <prvAddNewTaskToReadyList+0xa8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d110      	bne.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cc0:	f000 fbde 	bl	8009480 <prvInitialiseTaskLists>
 8008cc4:	e00d      	b.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cc6:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <prvAddNewTaskToReadyList+0xb0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cce:	4b1c      	ldr	r3, [pc, #112]	; (8008d40 <prvAddNewTaskToReadyList+0xac>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d802      	bhi.n	8008ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cdc:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <prvAddNewTaskToReadyList+0xac>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ce2:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <prvAddNewTaskToReadyList+0xb4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <prvAddNewTaskToReadyList+0xb4>)
 8008cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008cec:	4b16      	ldr	r3, [pc, #88]	; (8008d48 <prvAddNewTaskToReadyList+0xb4>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <prvAddNewTaskToReadyList+0xb8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d903      	bls.n	8008d08 <prvAddNewTaskToReadyList+0x74>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <prvAddNewTaskToReadyList+0xb8>)
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <prvAddNewTaskToReadyList+0xbc>)
 8008d16:	441a      	add	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7ff f875 	bl	8007e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d24:	f001 f9f6 	bl	800a114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d28:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <prvAddNewTaskToReadyList+0xb0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d30:	4b03      	ldr	r3, [pc, #12]	; (8008d40 <prvAddNewTaskToReadyList+0xac>)
 8008d32:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	200012a0 	.word	0x200012a0
 8008d40:	20000dcc 	.word	0x20000dcc
 8008d44:	200012ac 	.word	0x200012ac
 8008d48:	200012bc 	.word	0x200012bc
 8008d4c:	200012a8 	.word	0x200012a8
 8008d50:	20000dd0 	.word	0x20000dd0

08008d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <vTaskDelay+0x60>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <vTaskDelay+0x30>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60bb      	str	r3, [r7, #8]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d84:	f000 f88a 	bl	8008e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fcc6 	bl	800971c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d90:	f000 f892 	bl	8008eb8 <xTaskResumeAll>
 8008d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <vTaskDelay+0x64>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200012c8 	.word	0x200012c8
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dca:	463a      	mov	r2, r7
 8008dcc:	1d39      	adds	r1, r7, #4
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe ffba 	bl	8007d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	9202      	str	r2, [sp, #8]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	460a      	mov	r2, r1
 8008dea:	4924      	ldr	r1, [pc, #144]	; (8008e7c <vTaskStartScheduler+0xc0>)
 8008dec:	4824      	ldr	r0, [pc, #144]	; (8008e80 <vTaskStartScheduler+0xc4>)
 8008dee:	f7ff fe09 	bl	8008a04 <xTaskCreateStatic>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4a23      	ldr	r2, [pc, #140]	; (8008e84 <vTaskStartScheduler+0xc8>)
 8008df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008df8:	4b22      	ldr	r3, [pc, #136]	; (8008e84 <vTaskStartScheduler+0xc8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	e001      	b.n	8008e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d102      	bne.n	8008e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e10:	f000 fcd8 	bl	80097c4 <xTimerCreateTimerTask>
 8008e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d11b      	bne.n	8008e54 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	613b      	str	r3, [r7, #16]
}
 8008e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <vTaskStartScheduler+0xcc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3354      	adds	r3, #84	; 0x54
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <vTaskStartScheduler+0xd0>)
 8008e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <vTaskStartScheduler+0xd4>)
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <vTaskStartScheduler+0xd8>)
 8008e44:	2201      	movs	r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e48:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <vTaskStartScheduler+0xdc>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e4e:	f001 f88f 	bl	8009f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e52:	e00e      	b.n	8008e72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d10a      	bne.n	8008e72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vTaskStartScheduler+0xb4>
}
 8008e72:	bf00      	nop
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800dd34 	.word	0x0800dd34
 8008e80:	0800945d 	.word	0x0800945d
 8008e84:	200012c4 	.word	0x200012c4
 8008e88:	20000dcc 	.word	0x20000dcc
 8008e8c:	20000034 	.word	0x20000034
 8008e90:	200012c0 	.word	0x200012c0
 8008e94:	200012ac 	.word	0x200012ac
 8008e98:	200012a4 	.word	0x200012a4

08008e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <vTaskSuspendAll+0x18>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a03      	ldr	r2, [pc, #12]	; (8008eb4 <vTaskSuspendAll+0x18>)
 8008ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	200012c8 	.word	0x200012c8

08008eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ec6:	4b3c      	ldr	r3, [pc, #240]	; (8008fb8 <xTaskResumeAll+0x100>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	603b      	str	r3, [r7, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ee4:	f001 f8e6 	bl	800a0b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee8:	4b33      	ldr	r3, [pc, #204]	; (8008fb8 <xTaskResumeAll+0x100>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a32      	ldr	r2, [pc, #200]	; (8008fb8 <xTaskResumeAll+0x100>)
 8008ef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef2:	4b31      	ldr	r3, [pc, #196]	; (8008fb8 <xTaskResumeAll+0x100>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d156      	bne.n	8008fa8 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008efa:	4b30      	ldr	r3, [pc, #192]	; (8008fbc <xTaskResumeAll+0x104>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d052      	beq.n	8008fa8 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f02:	e02f      	b.n	8008f64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f04:	4b2e      	ldr	r3, [pc, #184]	; (8008fc0 <xTaskResumeAll+0x108>)
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3318      	adds	r3, #24
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe ffd9 	bl	8007ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe ffd4 	bl	8007ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f24:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <xTaskResumeAll+0x10c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d903      	bls.n	8008f34 <xTaskResumeAll+0x7c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	4a24      	ldr	r2, [pc, #144]	; (8008fc4 <xTaskResumeAll+0x10c>)
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4a21      	ldr	r2, [pc, #132]	; (8008fc8 <xTaskResumeAll+0x110>)
 8008f42:	441a      	add	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	f7fe ff5f 	bl	8007e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <xTaskResumeAll+0x114>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <xTaskResumeAll+0x108>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1cb      	bne.n	8008f04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f72:	f000 fb27 	bl	80095c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f76:	4b17      	ldr	r3, [pc, #92]	; (8008fd4 <xTaskResumeAll+0x11c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d010      	beq.n	8008fa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f82:	f000 f839 	bl	8008ff8 <xTaskIncrementTick>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f8c:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f1      	bne.n	8008f82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <xTaskResumeAll+0x11c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fa8:	f001 f8b4 	bl	800a114 <vPortExitCritical>

	return xAlreadyYielded;
 8008fac:	687b      	ldr	r3, [r7, #4]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200012c8 	.word	0x200012c8
 8008fbc:	200012a0 	.word	0x200012a0
 8008fc0:	20001260 	.word	0x20001260
 8008fc4:	200012a8 	.word	0x200012a8
 8008fc8:	20000dd0 	.word	0x20000dd0
 8008fcc:	20000dcc 	.word	0x20000dcc
 8008fd0:	200012b4 	.word	0x200012b4
 8008fd4:	200012b0 	.word	0x200012b0

08008fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <xTaskGetTickCount+0x1c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fe4:	687b      	ldr	r3, [r7, #4]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200012a4 	.word	0x200012a4

08008ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009002:	4b3f      	ldr	r3, [pc, #252]	; (8009100 <xTaskIncrementTick+0x108>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d170      	bne.n	80090ec <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800900a:	4b3e      	ldr	r3, [pc, #248]	; (8009104 <xTaskIncrementTick+0x10c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3301      	adds	r3, #1
 8009010:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009012:	4a3c      	ldr	r2, [pc, #240]	; (8009104 <xTaskIncrementTick+0x10c>)
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d120      	bne.n	8009060 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800901e:	4b3a      	ldr	r3, [pc, #232]	; (8009108 <xTaskIncrementTick+0x110>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <xTaskIncrementTick+0x46>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	603b      	str	r3, [r7, #0]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xTaskIncrementTick+0x44>
 800903e:	4b32      	ldr	r3, [pc, #200]	; (8009108 <xTaskIncrementTick+0x110>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	4b31      	ldr	r3, [pc, #196]	; (800910c <xTaskIncrementTick+0x114>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a2f      	ldr	r2, [pc, #188]	; (8009108 <xTaskIncrementTick+0x110>)
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	4a2f      	ldr	r2, [pc, #188]	; (800910c <xTaskIncrementTick+0x114>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	4b2f      	ldr	r3, [pc, #188]	; (8009110 <xTaskIncrementTick+0x118>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	4a2d      	ldr	r2, [pc, #180]	; (8009110 <xTaskIncrementTick+0x118>)
 800905a:	6013      	str	r3, [r2, #0]
 800905c:	f000 fab2 	bl	80095c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009060:	4b2c      	ldr	r3, [pc, #176]	; (8009114 <xTaskIncrementTick+0x11c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	429a      	cmp	r2, r3
 8009068:	d345      	bcc.n	80090f6 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800906a:	4b27      	ldr	r3, [pc, #156]	; (8009108 <xTaskIncrementTick+0x110>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009074:	4b27      	ldr	r3, [pc, #156]	; (8009114 <xTaskIncrementTick+0x11c>)
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	601a      	str	r2, [r3, #0]
					break;
 800907c:	e03b      	b.n	80090f6 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907e:	4b22      	ldr	r3, [pc, #136]	; (8009108 <xTaskIncrementTick+0x110>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d203      	bcs.n	800909e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009096:	4a1f      	ldr	r2, [pc, #124]	; (8009114 <xTaskIncrementTick+0x11c>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800909c:	e02b      	b.n	80090f6 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe ff10 	bl	8007ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3318      	adds	r3, #24
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe ff07 	bl	8007ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	4b16      	ldr	r3, [pc, #88]	; (8009118 <xTaskIncrementTick+0x120>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d903      	bls.n	80090ce <xTaskIncrementTick+0xd6>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ca:	4a13      	ldr	r2, [pc, #76]	; (8009118 <xTaskIncrementTick+0x120>)
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4a10      	ldr	r2, [pc, #64]	; (800911c <xTaskIncrementTick+0x124>)
 80090dc:	441a      	add	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe fe92 	bl	8007e0e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ea:	e7be      	b.n	800906a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090ec:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <xTaskIncrementTick+0x128>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a0b      	ldr	r2, [pc, #44]	; (8009120 <xTaskIncrementTick+0x128>)
 80090f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090f6:	697b      	ldr	r3, [r7, #20]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	200012c8 	.word	0x200012c8
 8009104:	200012a4 	.word	0x200012a4
 8009108:	20001258 	.word	0x20001258
 800910c:	2000125c 	.word	0x2000125c
 8009110:	200012b8 	.word	0x200012b8
 8009114:	200012c0 	.word	0x200012c0
 8009118:	200012a8 	.word	0x200012a8
 800911c:	20000dd0 	.word	0x20000dd0
 8009120:	200012b0 	.word	0x200012b0

08009124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800912a:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <vTaskSwitchContext+0xb0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <vTaskSwitchContext+0xb4>)
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009138:	e046      	b.n	80091c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800913a:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <vTaskSwitchContext+0xb4>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009140:	4b26      	ldr	r3, [pc, #152]	; (80091dc <vTaskSwitchContext+0xb8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e010      	b.n	800916a <vTaskSwitchContext+0x46>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <vTaskSwitchContext+0x40>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <vTaskSwitchContext+0x3e>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3b01      	subs	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	491d      	ldr	r1, [pc, #116]	; (80091e0 <vTaskSwitchContext+0xbc>)
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0e4      	beq.n	8009148 <vTaskSwitchContext+0x24>
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a15      	ldr	r2, [pc, #84]	; (80091e0 <vTaskSwitchContext+0xbc>)
 800918a:	4413      	add	r3, r2
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	605a      	str	r2, [r3, #4]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3308      	adds	r3, #8
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d104      	bne.n	80091ae <vTaskSwitchContext+0x8a>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4a0b      	ldr	r2, [pc, #44]	; (80091e4 <vTaskSwitchContext+0xc0>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4a08      	ldr	r2, [pc, #32]	; (80091dc <vTaskSwitchContext+0xb8>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <vTaskSwitchContext+0xc0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3354      	adds	r3, #84	; 0x54
 80091c4:	4a08      	ldr	r2, [pc, #32]	; (80091e8 <vTaskSwitchContext+0xc4>)
 80091c6:	6013      	str	r3, [r2, #0]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	200012c8 	.word	0x200012c8
 80091d8:	200012b4 	.word	0x200012b4
 80091dc:	200012a8 	.word	0x200012a8
 80091e0:	20000dd0 	.word	0x20000dd0
 80091e4:	20000dcc 	.word	0x20000dcc
 80091e8:	20000034 	.word	0x20000034

080091ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60fb      	str	r3, [r7, #12]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009212:	4b07      	ldr	r3, [pc, #28]	; (8009230 <vTaskPlaceOnEventList+0x44>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3318      	adds	r3, #24
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7fe fe1b 	bl	8007e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009220:	2101      	movs	r1, #1
 8009222:	6838      	ldr	r0, [r7, #0]
 8009224:	f000 fa7a 	bl	800971c <prvAddCurrentTaskToDelayedList>
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000dcc 	.word	0x20000dcc

08009234 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	617b      	str	r3, [r7, #20]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <vTaskPlaceOnEventListRestricted+0x54>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3318      	adds	r3, #24
 8009262:	4619      	mov	r1, r3
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f7fe fdd2 	bl	8007e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009270:	f04f 33ff 	mov.w	r3, #4294967295
 8009274:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	68b8      	ldr	r0, [r7, #8]
 800927a:	f000 fa4f 	bl	800971c <prvAddCurrentTaskToDelayedList>
	}
 800927e:	bf00      	nop
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000dcc 	.word	0x20000dcc

0800928c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10a      	bne.n	80092b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	60fb      	str	r3, [r7, #12]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	3318      	adds	r3, #24
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fe03 	bl	8007ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c2:	4b1e      	ldr	r3, [pc, #120]	; (800933c <xTaskRemoveFromEventList+0xb0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d11d      	bne.n	8009306 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fdfa 	bl	8007ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	4b19      	ldr	r3, [pc, #100]	; (8009340 <xTaskRemoveFromEventList+0xb4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d903      	bls.n	80092e8 <xTaskRemoveFromEventList+0x5c>
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a16      	ldr	r2, [pc, #88]	; (8009340 <xTaskRemoveFromEventList+0xb4>)
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4a13      	ldr	r2, [pc, #76]	; (8009344 <xTaskRemoveFromEventList+0xb8>)
 80092f6:	441a      	add	r2, r3
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4619      	mov	r1, r3
 80092fe:	4610      	mov	r0, r2
 8009300:	f7fe fd85 	bl	8007e0e <vListInsertEnd>
 8009304:	e005      	b.n	8009312 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	3318      	adds	r3, #24
 800930a:	4619      	mov	r1, r3
 800930c:	480e      	ldr	r0, [pc, #56]	; (8009348 <xTaskRemoveFromEventList+0xbc>)
 800930e:	f7fe fd7e 	bl	8007e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <xTaskRemoveFromEventList+0xc0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	429a      	cmp	r2, r3
 800931e:	d905      	bls.n	800932c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009324:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <xTaskRemoveFromEventList+0xc4>)
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e001      	b.n	8009330 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009330:	697b      	ldr	r3, [r7, #20]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	200012c8 	.word	0x200012c8
 8009340:	200012a8 	.word	0x200012a8
 8009344:	20000dd0 	.word	0x20000dd0
 8009348:	20001260 	.word	0x20001260
 800934c:	20000dcc 	.word	0x20000dcc
 8009350:	200012b4 	.word	0x200012b4

08009354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <vTaskInternalSetTimeOutState+0x24>)
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009364:	4b05      	ldr	r3, [pc, #20]	; (800937c <vTaskInternalSetTimeOutState+0x28>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	605a      	str	r2, [r3, #4]
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	200012b8 	.word	0x200012b8
 800937c:	200012a4 	.word	0x200012a4

08009380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	613b      	str	r3, [r7, #16]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	60fb      	str	r3, [r7, #12]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093c2:	f000 fe77 	bl	800a0b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093c6:	4b1d      	ldr	r3, [pc, #116]	; (800943c <xTaskCheckForTimeOut+0xbc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d102      	bne.n	80093e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	e023      	b.n	800942e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b15      	ldr	r3, [pc, #84]	; (8009440 <xTaskCheckForTimeOut+0xc0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d007      	beq.n	8009402 <xTaskCheckForTimeOut+0x82>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d302      	bcc.n	8009402 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	e015      	b.n	800942e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	429a      	cmp	r2, r3
 800940a:	d20b      	bcs.n	8009424 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	1ad2      	subs	r2, r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff9b 	bl	8009354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	e004      	b.n	800942e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800942e:	f000 fe71 	bl	800a114 <vPortExitCritical>

	return xReturn;
 8009432:	69fb      	ldr	r3, [r7, #28]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	200012a4 	.word	0x200012a4
 8009440:	200012b8 	.word	0x200012b8

08009444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009448:	4b03      	ldr	r3, [pc, #12]	; (8009458 <vTaskMissedYield+0x14>)
 800944a:	2201      	movs	r2, #1
 800944c:	601a      	str	r2, [r3, #0]
}
 800944e:	bf00      	nop
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	200012b4 	.word	0x200012b4

0800945c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009464:	f000 f84c 	bl	8009500 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8009468:	4b04      	ldr	r3, [pc, #16]	; (800947c <prvIdleTask+0x20>)
 800946a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009478:	e7f4      	b.n	8009464 <prvIdleTask+0x8>
 800947a:	bf00      	nop
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009486:	2300      	movs	r3, #0
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	e00c      	b.n	80094a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4a12      	ldr	r2, [pc, #72]	; (80094e0 <prvInitialiseTaskLists+0x60>)
 8009498:	4413      	add	r3, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fc8a 	bl	8007db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3301      	adds	r3, #1
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b37      	cmp	r3, #55	; 0x37
 80094aa:	d9ef      	bls.n	800948c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094ac:	480d      	ldr	r0, [pc, #52]	; (80094e4 <prvInitialiseTaskLists+0x64>)
 80094ae:	f7fe fc81 	bl	8007db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094b2:	480d      	ldr	r0, [pc, #52]	; (80094e8 <prvInitialiseTaskLists+0x68>)
 80094b4:	f7fe fc7e 	bl	8007db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094b8:	480c      	ldr	r0, [pc, #48]	; (80094ec <prvInitialiseTaskLists+0x6c>)
 80094ba:	f7fe fc7b 	bl	8007db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094be:	480c      	ldr	r0, [pc, #48]	; (80094f0 <prvInitialiseTaskLists+0x70>)
 80094c0:	f7fe fc78 	bl	8007db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094c4:	480b      	ldr	r0, [pc, #44]	; (80094f4 <prvInitialiseTaskLists+0x74>)
 80094c6:	f7fe fc75 	bl	8007db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <prvInitialiseTaskLists+0x78>)
 80094cc:	4a05      	ldr	r2, [pc, #20]	; (80094e4 <prvInitialiseTaskLists+0x64>)
 80094ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <prvInitialiseTaskLists+0x7c>)
 80094d2:	4a05      	ldr	r2, [pc, #20]	; (80094e8 <prvInitialiseTaskLists+0x68>)
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000dd0 	.word	0x20000dd0
 80094e4:	20001230 	.word	0x20001230
 80094e8:	20001244 	.word	0x20001244
 80094ec:	20001260 	.word	0x20001260
 80094f0:	20001274 	.word	0x20001274
 80094f4:	2000128c 	.word	0x2000128c
 80094f8:	20001258 	.word	0x20001258
 80094fc:	2000125c 	.word	0x2000125c

08009500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009506:	e019      	b.n	800953c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009508:	f000 fdd4 	bl	800a0b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <prvCheckTasksWaitingTermination+0x50>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3304      	adds	r3, #4
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fcd5 	bl	8007ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800951e:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <prvCheckTasksWaitingTermination+0x54>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3b01      	subs	r3, #1
 8009524:	4a0b      	ldr	r2, [pc, #44]	; (8009554 <prvCheckTasksWaitingTermination+0x54>)
 8009526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009528:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <prvCheckTasksWaitingTermination+0x58>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3b01      	subs	r3, #1
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <prvCheckTasksWaitingTermination+0x58>)
 8009530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009532:	f000 fdef 	bl	800a114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f810 	bl	800955c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <prvCheckTasksWaitingTermination+0x58>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e1      	bne.n	8009508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20001274 	.word	0x20001274
 8009554:	200012a0 	.word	0x200012a0
 8009558:	20001288 	.word	0x20001288

0800955c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3354      	adds	r3, #84	; 0x54
 8009568:	4618      	mov	r0, r3
 800956a:	f002 f9e3 	bl	800b934 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009574:	2b00      	cmp	r3, #0
 8009576:	d108      	bne.n	800958a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	4618      	mov	r0, r3
 800957e:	f000 ff87 	bl	800a490 <vPortFree>
				vPortFree( pxTCB );
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 ff84 	bl	800a490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009588:	e018      	b.n	80095bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009590:	2b01      	cmp	r3, #1
 8009592:	d103      	bne.n	800959c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 ff7b 	bl	800a490 <vPortFree>
	}
 800959a:	e00f      	b.n	80095bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d00a      	beq.n	80095bc <prvDeleteTCB+0x60>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	60fb      	str	r3, [r7, #12]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <prvDeleteTCB+0x5e>
	}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <prvResetNextTaskUnblockTime+0x38>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <prvResetNextTaskUnblockTime+0x3c>)
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095dc:	e008      	b.n	80095f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095de:	4b07      	ldr	r3, [pc, #28]	; (80095fc <prvResetNextTaskUnblockTime+0x38>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4a04      	ldr	r2, [pc, #16]	; (8009600 <prvResetNextTaskUnblockTime+0x3c>)
 80095ee:	6013      	str	r3, [r2, #0]
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	20001258 	.word	0x20001258
 8009600:	200012c0 	.word	0x200012c0

08009604 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800960a:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <xTaskGetSchedulerState+0x34>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009612:	2301      	movs	r3, #1
 8009614:	607b      	str	r3, [r7, #4]
 8009616:	e008      	b.n	800962a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009618:	4b08      	ldr	r3, [pc, #32]	; (800963c <xTaskGetSchedulerState+0x38>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009620:	2302      	movs	r3, #2
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	e001      	b.n	800962a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009626:	2300      	movs	r3, #0
 8009628:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800962a:	687b      	ldr	r3, [r7, #4]
	}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	200012ac 	.word	0x200012ac
 800963c:	200012c8 	.word	0x200012c8

08009640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d056      	beq.n	8009704 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009656:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <xTaskPriorityDisinherit+0xd0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	429a      	cmp	r2, r3
 800965e:	d00a      	beq.n	8009676 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60fb      	str	r3, [r7, #12]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10a      	bne.n	8009694 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	60bb      	str	r3, [r7, #8]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009698:	1e5a      	subs	r2, r3, #1
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d02c      	beq.n	8009704 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d128      	bne.n	8009704 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fc06 	bl	8007ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <xTaskPriorityDisinherit+0xd4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d903      	bls.n	80096e4 <xTaskPriorityDisinherit+0xa4>
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	4a0c      	ldr	r2, [pc, #48]	; (8009714 <xTaskPriorityDisinherit+0xd4>)
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4a09      	ldr	r2, [pc, #36]	; (8009718 <xTaskPriorityDisinherit+0xd8>)
 80096f2:	441a      	add	r2, r3
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f7fe fb87 	bl	8007e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009704:	697b      	ldr	r3, [r7, #20]
	}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000dcc 	.word	0x20000dcc
 8009714:	200012a8 	.word	0x200012a8
 8009718:	20000dd0 	.word	0x20000dd0

0800971c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009726:	4b21      	ldr	r3, [pc, #132]	; (80097ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800972c:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3304      	adds	r3, #4
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fbc8 	bl	8007ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973e:	d10a      	bne.n	8009756 <prvAddCurrentTaskToDelayedList+0x3a>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009746:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4819      	ldr	r0, [pc, #100]	; (80097b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009750:	f7fe fb5d 	bl	8007e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009754:	e026      	b.n	80097a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	429a      	cmp	r2, r3
 800976c:	d209      	bcs.n	8009782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3304      	adds	r3, #4
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f7fe fb6b 	bl	8007e56 <vListInsert>
}
 8009780:	e010      	b.n	80097a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3304      	adds	r3, #4
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fe fb61 	bl	8007e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009794:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	429a      	cmp	r2, r3
 800979c:	d202      	bcs.n	80097a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6013      	str	r3, [r2, #0]
}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200012a4 	.word	0x200012a4
 80097b0:	20000dcc 	.word	0x20000dcc
 80097b4:	2000128c 	.word	0x2000128c
 80097b8:	2000125c 	.word	0x2000125c
 80097bc:	20001258 	.word	0x20001258
 80097c0:	200012c0 	.word	0x200012c0

080097c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08a      	sub	sp, #40	; 0x28
 80097c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097ce:	f000 fb07 	bl	8009de0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <xTimerCreateTimerTask+0x80>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d021      	beq.n	800981e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097e2:	1d3a      	adds	r2, r7, #4
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fac7 	bl	8007d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	9202      	str	r2, [sp, #8]
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	2302      	movs	r3, #2
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	460a      	mov	r2, r1
 8009804:	4910      	ldr	r1, [pc, #64]	; (8009848 <xTimerCreateTimerTask+0x84>)
 8009806:	4811      	ldr	r0, [pc, #68]	; (800984c <xTimerCreateTimerTask+0x88>)
 8009808:	f7ff f8fc 	bl	8008a04 <xTaskCreateStatic>
 800980c:	4603      	mov	r3, r0
 800980e:	4a10      	ldr	r2, [pc, #64]	; (8009850 <xTimerCreateTimerTask+0x8c>)
 8009810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <xTimerCreateTimerTask+0x8c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800981a:	2301      	movs	r3, #1
 800981c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	613b      	str	r3, [r7, #16]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800983a:	697b      	ldr	r3, [r7, #20]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200012fc 	.word	0x200012fc
 8009848:	0800dd3c 	.word	0x0800dd3c
 800984c:	08009989 	.word	0x08009989
 8009850:	20001300 	.word	0x20001300

08009854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009862:	2300      	movs	r3, #0
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xTimerGenericCommand+0x2e>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	623b      	str	r3, [r7, #32]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009882:	4b1a      	ldr	r3, [pc, #104]	; (80098ec <xTimerGenericCommand+0x98>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02a      	beq.n	80098e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b05      	cmp	r3, #5
 800989a:	dc18      	bgt.n	80098ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800989c:	f7ff feb2 	bl	8009604 <xTaskGetSchedulerState>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d109      	bne.n	80098ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098a6:	4b11      	ldr	r3, [pc, #68]	; (80098ec <xTimerGenericCommand+0x98>)
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f107 0110 	add.w	r1, r7, #16
 80098ae:	2300      	movs	r3, #0
 80098b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b2:	f7fe fc63 	bl	800817c <xQueueGenericSend>
 80098b6:	6278      	str	r0, [r7, #36]	; 0x24
 80098b8:	e012      	b.n	80098e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098ba:	4b0c      	ldr	r3, [pc, #48]	; (80098ec <xTimerGenericCommand+0x98>)
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f107 0110 	add.w	r1, r7, #16
 80098c2:	2300      	movs	r3, #0
 80098c4:	2200      	movs	r2, #0
 80098c6:	f7fe fc59 	bl	800817c <xQueueGenericSend>
 80098ca:	6278      	str	r0, [r7, #36]	; 0x24
 80098cc:	e008      	b.n	80098e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098ce:	4b07      	ldr	r3, [pc, #28]	; (80098ec <xTimerGenericCommand+0x98>)
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	f107 0110 	add.w	r1, r7, #16
 80098d6:	2300      	movs	r3, #0
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	f7fe fd35 	bl	8008348 <xQueueGenericSendFromISR>
 80098de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3728      	adds	r7, #40	; 0x28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	200012fc 	.word	0x200012fc

080098f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098fa:	4b22      	ldr	r3, [pc, #136]	; (8009984 <prvProcessExpiredTimer+0x94>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	3304      	adds	r3, #4
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe fadd 	bl	8007ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009914:	f003 0304 	and.w	r3, r3, #4
 8009918:	2b00      	cmp	r3, #0
 800991a:	d022      	beq.n	8009962 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	18d1      	adds	r1, r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	6978      	ldr	r0, [r7, #20]
 800992a:	f000 f8d1 	bl	8009ad0 <prvInsertTimerInActiveList>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01f      	beq.n	8009974 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009934:	2300      	movs	r3, #0
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	2100      	movs	r1, #0
 800993e:	6978      	ldr	r0, [r7, #20]
 8009940:	f7ff ff88 	bl	8009854 <xTimerGenericCommand>
 8009944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d113      	bne.n	8009974 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	60fb      	str	r3, [r7, #12]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	6978      	ldr	r0, [r7, #20]
 800997a:	4798      	blx	r3
}
 800997c:	bf00      	nop
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	200012f4 	.word	0x200012f4

08009988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f857 	bl	8009a48 <prvGetNextExpireTime>
 800999a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4619      	mov	r1, r3
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 f803 	bl	80099ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099a6:	f000 f8d5 	bl	8009b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099aa:	e7f1      	b.n	8009990 <prvTimerTask+0x8>

080099ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099b6:	f7ff fa71 	bl	8008e9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f866 	bl	8009a90 <prvSampleTimeNow>
 80099c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d130      	bne.n	8009a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <prvProcessTimerOrBlockTask+0x3c>
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d806      	bhi.n	80099e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099da:	f7ff fa6d 	bl	8008eb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7ff ff85 	bl	80098f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099e6:	e024      	b.n	8009a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d008      	beq.n	8009a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <prvProcessTimerOrBlockTask+0x90>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <prvProcessTimerOrBlockTask+0x50>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <prvProcessTimerOrBlockTask+0x52>
 80099fc:	2300      	movs	r3, #0
 80099fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a00:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <prvProcessTimerOrBlockTask+0x94>)
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	f7fe ffc5 	bl	800899c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a12:	f7ff fa51 	bl	8008eb8 <xTaskResumeAll>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <prvProcessTimerOrBlockTask+0x98>)
 8009a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	f3bf 8f6f 	isb	sy
}
 8009a2c:	e001      	b.n	8009a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a2e:	f7ff fa43 	bl	8008eb8 <xTaskResumeAll>
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200012f8 	.word	0x200012f8
 8009a40:	200012fc 	.word	0x200012fc
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a50:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <prvGetNextExpireTime+0x44>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <prvGetNextExpireTime+0x16>
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	e000      	b.n	8009a60 <prvGetNextExpireTime+0x18>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d105      	bne.n	8009a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <prvGetNextExpireTime+0x44>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	e001      	b.n	8009a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	200012f4 	.word	0x200012f4

08009a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a98:	f7ff fa9e 	bl	8008fd8 <xTaskGetTickCount>
 8009a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <prvSampleTimeNow+0x3c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d205      	bcs.n	8009ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009aa8:	f000 f936 	bl	8009d18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009aba:	4a04      	ldr	r2, [pc, #16]	; (8009acc <prvSampleTimeNow+0x3c>)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20001304 	.word	0x20001304

08009ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d812      	bhi.n	8009b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d302      	bcc.n	8009b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	e01b      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b0a:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <prvInsertTimerInActiveList+0x7c>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7fe f99e 	bl	8007e56 <vListInsert>
 8009b1a:	e012      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d206      	bcs.n	8009b32 <prvInsertTimerInActiveList+0x62>
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e007      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b32:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <prvInsertTimerInActiveList+0x80>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f7fe f98a 	bl	8007e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200012f8 	.word	0x200012f8
 8009b50:	200012f4 	.word	0x200012f4

08009b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08e      	sub	sp, #56	; 0x38
 8009b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b5a:	e0ca      	b.n	8009cf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da18      	bge.n	8009b94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b62:	1d3b      	adds	r3, r7, #4
 8009b64:	3304      	adds	r3, #4
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	61fb      	str	r3, [r7, #28]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8a:	6850      	ldr	r0, [r2, #4]
 8009b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8e:	6892      	ldr	r2, [r2, #8]
 8009b90:	4611      	mov	r1, r2
 8009b92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f2c0 80aa 	blt.w	8009cf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	3304      	adds	r3, #4
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe f98b 	bl	8007ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff ff6b 	bl	8009a90 <prvSampleTimeNow>
 8009bba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b09      	cmp	r3, #9
 8009bc0:	f200 8097 	bhi.w	8009cf2 <prvProcessReceivedCommands+0x19e>
 8009bc4:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <prvProcessReceivedCommands+0x78>)
 8009bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bca:	bf00      	nop
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009bf5 	.word	0x08009bf5
 8009bd8:	08009c69 	.word	0x08009c69
 8009bdc:	08009c7d 	.word	0x08009c7d
 8009be0:	08009cc7 	.word	0x08009cc7
 8009be4:	08009bf5 	.word	0x08009bf5
 8009be8:	08009bf5 	.word	0x08009bf5
 8009bec:	08009c69 	.word	0x08009c69
 8009bf0:	08009c7d 	.word	0x08009c7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	18d1      	adds	r1, r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c14:	f7ff ff5c 	bl	8009ad0 <prvInsertTimerInActiveList>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d069      	beq.n	8009cf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d05e      	beq.n	8009cf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	441a      	add	r2, r3
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	2300      	movs	r3, #0
 8009c42:	2100      	movs	r1, #0
 8009c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c46:	f7ff fe05 	bl	8009854 <xTimerGenericCommand>
 8009c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d14f      	bne.n	8009cf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	61bb      	str	r3, [r7, #24]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c7a:	e03a      	b.n	8009cf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c82:	f043 0301 	orr.w	r3, r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10a      	bne.n	8009cb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	617b      	str	r3, [r7, #20]
}
 8009cae:	bf00      	nop
 8009cb0:	e7fe      	b.n	8009cb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	18d1      	adds	r1, r2, r3
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc0:	f7ff ff06 	bl	8009ad0 <prvInsertTimerInActiveList>
					break;
 8009cc4:	e015      	b.n	8009cf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd6:	f000 fbdb 	bl	800a490 <vPortFree>
 8009cda:	e00a      	b.n	8009cf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce2:	f023 0301 	bic.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cee:	e000      	b.n	8009cf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009cf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cf2:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <prvProcessReceivedCommands+0x1c0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	1d39      	adds	r1, r7, #4
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fbc0 	bl	8008480 <xQueueReceive>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f47f af2a 	bne.w	8009b5c <prvProcessReceivedCommands+0x8>
	}
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	3730      	adds	r7, #48	; 0x30
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200012fc 	.word	0x200012fc

08009d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d1e:	e048      	b.n	8009db2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d20:	4b2d      	ldr	r3, [pc, #180]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d2a:	4b2b      	ldr	r3, [pc, #172]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe f8c5 	bl	8007ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02e      	beq.n	8009db2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d90e      	bls.n	8009d84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d72:	4b19      	ldr	r3, [pc, #100]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7fe f86a 	bl	8007e56 <vListInsert>
 8009d82:	e016      	b.n	8009db2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d84:	2300      	movs	r3, #0
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff fd60 	bl	8009854 <xTimerGenericCommand>
 8009d94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	603b      	str	r3, [r7, #0]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1b1      	bne.n	8009d20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dbc:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dc2:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <prvSwitchTimerLists+0xc4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a04      	ldr	r2, [pc, #16]	; (8009dd8 <prvSwitchTimerLists+0xc0>)
 8009dc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dca:	4a04      	ldr	r2, [pc, #16]	; (8009ddc <prvSwitchTimerLists+0xc4>)
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	6013      	str	r3, [r2, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	200012f4 	.word	0x200012f4
 8009ddc:	200012f8 	.word	0x200012f8

08009de0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009de6:	f000 f965 	bl	800a0b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dea:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <prvCheckForValidListAndQueue+0x60>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d120      	bne.n	8009e34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009df2:	4814      	ldr	r0, [pc, #80]	; (8009e44 <prvCheckForValidListAndQueue+0x64>)
 8009df4:	f7fd ffde 	bl	8007db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009df8:	4813      	ldr	r0, [pc, #76]	; (8009e48 <prvCheckForValidListAndQueue+0x68>)
 8009dfa:	f7fd ffdb 	bl	8007db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <prvCheckForValidListAndQueue+0x6c>)
 8009e00:	4a10      	ldr	r2, [pc, #64]	; (8009e44 <prvCheckForValidListAndQueue+0x64>)
 8009e02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e04:	4b12      	ldr	r3, [pc, #72]	; (8009e50 <prvCheckForValidListAndQueue+0x70>)
 8009e06:	4a10      	ldr	r2, [pc, #64]	; (8009e48 <prvCheckForValidListAndQueue+0x68>)
 8009e08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <prvCheckForValidListAndQueue+0x74>)
 8009e10:	4a11      	ldr	r2, [pc, #68]	; (8009e58 <prvCheckForValidListAndQueue+0x78>)
 8009e12:	2110      	movs	r1, #16
 8009e14:	200a      	movs	r0, #10
 8009e16:	f7fe f8dc 	bl	8007fd2 <xQueueGenericCreateStatic>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4a08      	ldr	r2, [pc, #32]	; (8009e40 <prvCheckForValidListAndQueue+0x60>)
 8009e1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <prvCheckForValidListAndQueue+0x60>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <prvCheckForValidListAndQueue+0x60>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	490b      	ldr	r1, [pc, #44]	; (8009e5c <prvCheckForValidListAndQueue+0x7c>)
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fd8a 	bl	8008948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e34:	f000 f96e 	bl	800a114 <vPortExitCritical>
}
 8009e38:	bf00      	nop
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200012fc 	.word	0x200012fc
 8009e44:	200012cc 	.word	0x200012cc
 8009e48:	200012e0 	.word	0x200012e0
 8009e4c:	200012f4 	.word	0x200012f4
 8009e50:	200012f8 	.word	0x200012f8
 8009e54:	200013a8 	.word	0x200013a8
 8009e58:	20001308 	.word	0x20001308
 8009e5c:	0800dd44 	.word	0x0800dd44

08009e60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3b04      	subs	r3, #4
 8009e70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3b04      	subs	r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0201 	bic.w	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e90:	4a0c      	ldr	r2, [pc, #48]	; (8009ec4 <pxPortInitialiseStack+0x64>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3b14      	subs	r3, #20
 8009e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f06f 0202 	mvn.w	r2, #2
 8009eae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3b20      	subs	r3, #32
 8009eb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	08009ec9 	.word	0x08009ec9

08009ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ed2:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <prvTaskExitError+0x54>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d00a      	beq.n	8009ef2 <prvTaskExitError+0x2a>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <prvTaskExitError+0x28>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	60bb      	str	r3, [r7, #8]
}
 8009f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f06:	bf00      	nop
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0fc      	beq.n	8009f08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	20000030 	.word	0x20000030

08009f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f20:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <pxCurrentTCBConst2>)
 8009f22:	6819      	ldr	r1, [r3, #0]
 8009f24:	6808      	ldr	r0, [r1, #0]
 8009f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2a:	f380 8809 	msr	PSP, r0
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f04f 0000 	mov.w	r0, #0
 8009f36:	f380 8811 	msr	BASEPRI, r0
 8009f3a:	4770      	bx	lr
 8009f3c:	f3af 8000 	nop.w

08009f40 <pxCurrentTCBConst2>:
 8009f40:	20000dcc 	.word	0x20000dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f48:	4808      	ldr	r0, [pc, #32]	; (8009f6c <prvPortStartFirstTask+0x24>)
 8009f4a:	6800      	ldr	r0, [r0, #0]
 8009f4c:	6800      	ldr	r0, [r0, #0]
 8009f4e:	f380 8808 	msr	MSP, r0
 8009f52:	f04f 0000 	mov.w	r0, #0
 8009f56:	f380 8814 	msr	CONTROL, r0
 8009f5a:	b662      	cpsie	i
 8009f5c:	b661      	cpsie	f
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	df00      	svc	0
 8009f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f6a:	bf00      	nop
 8009f6c:	e000ed08 	.word	0xe000ed08

08009f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f76:	4b46      	ldr	r3, [pc, #280]	; (800a090 <xPortStartScheduler+0x120>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a46      	ldr	r2, [pc, #280]	; (800a094 <xPortStartScheduler+0x124>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d10a      	bne.n	8009f96 <xPortStartScheduler+0x26>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	613b      	str	r3, [r7, #16]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f96:	4b3e      	ldr	r3, [pc, #248]	; (800a090 <xPortStartScheduler+0x120>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a3f      	ldr	r2, [pc, #252]	; (800a098 <xPortStartScheduler+0x128>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10a      	bne.n	8009fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60fb      	str	r3, [r7, #12]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fb6:	4b39      	ldr	r3, [pc, #228]	; (800a09c <xPortStartScheduler+0x12c>)
 8009fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	22ff      	movs	r2, #255	; 0xff
 8009fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b31      	ldr	r3, [pc, #196]	; (800a0a0 <xPortStartScheduler+0x130>)
 8009fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fde:	4b31      	ldr	r3, [pc, #196]	; (800a0a4 <xPortStartScheduler+0x134>)
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fe4:	e009      	b.n	8009ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fe6:	4b2f      	ldr	r3, [pc, #188]	; (800a0a4 <xPortStartScheduler+0x134>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <xPortStartScheduler+0x134>)
 8009fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	d0ef      	beq.n	8009fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a006:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <xPortStartScheduler+0x134>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1c3 0307 	rsb	r3, r3, #7
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d00a      	beq.n	800a028 <xPortStartScheduler+0xb8>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	60bb      	str	r3, [r7, #8]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <xPortStartScheduler+0x134>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <xPortStartScheduler+0x134>)
 800a030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a032:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <xPortStartScheduler+0x134>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a03a:	4a1a      	ldr	r2, [pc, #104]	; (800a0a4 <xPortStartScheduler+0x134>)
 800a03c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a046:	4b18      	ldr	r3, [pc, #96]	; (800a0a8 <xPortStartScheduler+0x138>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a17      	ldr	r2, [pc, #92]	; (800a0a8 <xPortStartScheduler+0x138>)
 800a04c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <xPortStartScheduler+0x138>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a14      	ldr	r2, [pc, #80]	; (800a0a8 <xPortStartScheduler+0x138>)
 800a058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a05c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a05e:	f000 f8dd 	bl	800a21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a062:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <xPortStartScheduler+0x13c>)
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a068:	f000 f8fc 	bl	800a264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a06c:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <xPortStartScheduler+0x140>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a0f      	ldr	r2, [pc, #60]	; (800a0b0 <xPortStartScheduler+0x140>)
 800a072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a078:	f7ff ff66 	bl	8009f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a07c:	f7ff f852 	bl	8009124 <vTaskSwitchContext>
	prvTaskExitError();
 800a080:	f7ff ff22 	bl	8009ec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	e000ed00 	.word	0xe000ed00
 800a094:	410fc271 	.word	0x410fc271
 800a098:	410fc270 	.word	0x410fc270
 800a09c:	e000e400 	.word	0xe000e400
 800a0a0:	200013f8 	.word	0x200013f8
 800a0a4:	200013fc 	.word	0x200013fc
 800a0a8:	e000ed20 	.word	0xe000ed20
 800a0ac:	20000030 	.word	0x20000030
 800a0b0:	e000ef34 	.word	0xe000ef34

0800a0b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	607b      	str	r3, [r7, #4]
}
 800a0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <vPortEnterCritical+0x58>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	4a0d      	ldr	r2, [pc, #52]	; (800a10c <vPortEnterCritical+0x58>)
 800a0d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <vPortEnterCritical+0x58>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10f      	bne.n	800a100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <vPortEnterCritical+0x5c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	603b      	str	r3, [r7, #0]
}
 800a0fc:	bf00      	nop
 800a0fe:	e7fe      	b.n	800a0fe <vPortEnterCritical+0x4a>
	}
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000030 	.word	0x20000030
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a11a:	4b12      	ldr	r3, [pc, #72]	; (800a164 <vPortExitCritical+0x50>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <vPortExitCritical+0x24>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	607b      	str	r3, [r7, #4]
}
 800a134:	bf00      	nop
 800a136:	e7fe      	b.n	800a136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a138:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <vPortExitCritical+0x50>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	4a09      	ldr	r2, [pc, #36]	; (800a164 <vPortExitCritical+0x50>)
 800a140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a142:	4b08      	ldr	r3, [pc, #32]	; (800a164 <vPortExitCritical+0x50>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d105      	bne.n	800a156 <vPortExitCritical+0x42>
 800a14a:	2300      	movs	r3, #0
 800a14c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	f383 8811 	msr	BASEPRI, r3
}
 800a154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000030 	.word	0x20000030
	...

0800a170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a170:	f3ef 8009 	mrs	r0, PSP
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <pxCurrentTCBConst>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	f01e 0f10 	tst.w	lr, #16
 800a180:	bf08      	it	eq
 800a182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	6010      	str	r0, [r2, #0]
 800a18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a194:	f380 8811 	msr	BASEPRI, r0
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f7fe ffc0 	bl	8009124 <vTaskSwitchContext>
 800a1a4:	f04f 0000 	mov.w	r0, #0
 800a1a8:	f380 8811 	msr	BASEPRI, r0
 800a1ac:	bc09      	pop	{r0, r3}
 800a1ae:	6819      	ldr	r1, [r3, #0]
 800a1b0:	6808      	ldr	r0, [r1, #0]
 800a1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b6:	f01e 0f10 	tst.w	lr, #16
 800a1ba:	bf08      	it	eq
 800a1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1c0:	f380 8809 	msr	PSP, r0
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	f3af 8000 	nop.w

0800a1d0 <pxCurrentTCBConst>:
 800a1d0:	20000dcc 	.word	0x20000dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop

0800a1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	607b      	str	r3, [r7, #4]
}
 800a1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1f2:	f7fe ff01 	bl	8008ff8 <xTaskIncrementTick>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1fc:	4b06      	ldr	r3, [pc, #24]	; (800a218 <xPortSysTickHandler+0x40>)
 800a1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	2300      	movs	r3, #0
 800a206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	f383 8811 	msr	BASEPRI, r3
}
 800a20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a220:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <vPortSetupTimerInterrupt+0x34>)
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <vPortSetupTimerInterrupt+0x38>)
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <vPortSetupTimerInterrupt+0x3c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a0a      	ldr	r2, [pc, #40]	; (800a25c <vPortSetupTimerInterrupt+0x40>)
 800a232:	fba2 2303 	umull	r2, r3, r2, r3
 800a236:	099b      	lsrs	r3, r3, #6
 800a238:	4a09      	ldr	r2, [pc, #36]	; (800a260 <vPortSetupTimerInterrupt+0x44>)
 800a23a:	3b01      	subs	r3, #1
 800a23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <vPortSetupTimerInterrupt+0x34>)
 800a240:	2207      	movs	r2, #7
 800a242:	601a      	str	r2, [r3, #0]
}
 800a244:	bf00      	nop
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	e000e010 	.word	0xe000e010
 800a254:	e000e018 	.word	0xe000e018
 800a258:	20000024 	.word	0x20000024
 800a25c:	10624dd3 	.word	0x10624dd3
 800a260:	e000e014 	.word	0xe000e014

0800a264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a274 <vPortEnableVFP+0x10>
 800a268:	6801      	ldr	r1, [r0, #0]
 800a26a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a26e:	6001      	str	r1, [r0, #0]
 800a270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a272:	bf00      	nop
 800a274:	e000ed88 	.word	0xe000ed88

0800a278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a27e:	f3ef 8305 	mrs	r3, IPSR
 800a282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d914      	bls.n	800a2b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a28a:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <vPortValidateInterruptPriority+0x70>)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a294:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <vPortValidateInterruptPriority+0x74>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	7afa      	ldrb	r2, [r7, #11]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d20a      	bcs.n	800a2b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	607b      	str	r3, [r7, #4]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <vPortValidateInterruptPriority+0x78>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <vPortValidateInterruptPriority+0x7c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d90a      	bls.n	800a2da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	603b      	str	r3, [r7, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <vPortValidateInterruptPriority+0x60>
	}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	e000e3f0 	.word	0xe000e3f0
 800a2ec:	200013f8 	.word	0x200013f8
 800a2f0:	e000ed0c 	.word	0xe000ed0c
 800a2f4:	200013fc 	.word	0x200013fc

0800a2f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	; 0x28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a300:	2300      	movs	r3, #0
 800a302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a304:	f7fe fdca 	bl	8008e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a308:	4b5b      	ldr	r3, [pc, #364]	; (800a478 <pvPortMalloc+0x180>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a310:	f000 f920 	bl	800a554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a314:	4b59      	ldr	r3, [pc, #356]	; (800a47c <pvPortMalloc+0x184>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 8093 	bne.w	800a448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01d      	beq.n	800a364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a328:	2208      	movs	r2, #8
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4413      	add	r3, r2
 800a32e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	2b00      	cmp	r3, #0
 800a338:	d014      	beq.n	800a364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f023 0307 	bic.w	r3, r3, #7
 800a340:	3308      	adds	r3, #8
 800a342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00a      	beq.n	800a364 <pvPortMalloc+0x6c>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	617b      	str	r3, [r7, #20]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d06e      	beq.n	800a448 <pvPortMalloc+0x150>
 800a36a:	4b45      	ldr	r3, [pc, #276]	; (800a480 <pvPortMalloc+0x188>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	429a      	cmp	r2, r3
 800a372:	d869      	bhi.n	800a448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a374:	4b43      	ldr	r3, [pc, #268]	; (800a484 <pvPortMalloc+0x18c>)
 800a376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a378:	4b42      	ldr	r3, [pc, #264]	; (800a484 <pvPortMalloc+0x18c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a37e:	e004      	b.n	800a38a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d903      	bls.n	800a39c <pvPortMalloc+0xa4>
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f1      	bne.n	800a380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a39c:	4b36      	ldr	r3, [pc, #216]	; (800a478 <pvPortMalloc+0x180>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d050      	beq.n	800a448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	4413      	add	r3, r2
 800a3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d91f      	bls.n	800a408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00a      	beq.n	800a3f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	613b      	str	r3, [r7, #16]
}
 800a3ec:	bf00      	nop
 800a3ee:	e7fe      	b.n	800a3ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	1ad2      	subs	r2, r2, r3
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a402:	69b8      	ldr	r0, [r7, #24]
 800a404:	f000 f908 	bl	800a618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a408:	4b1d      	ldr	r3, [pc, #116]	; (800a480 <pvPortMalloc+0x188>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	4a1b      	ldr	r2, [pc, #108]	; (800a480 <pvPortMalloc+0x188>)
 800a414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a416:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <pvPortMalloc+0x188>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b1b      	ldr	r3, [pc, #108]	; (800a488 <pvPortMalloc+0x190>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d203      	bcs.n	800a42a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a422:	4b17      	ldr	r3, [pc, #92]	; (800a480 <pvPortMalloc+0x188>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a18      	ldr	r2, [pc, #96]	; (800a488 <pvPortMalloc+0x190>)
 800a428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <pvPortMalloc+0x184>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	431a      	orrs	r2, r3
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <pvPortMalloc+0x194>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3301      	adds	r3, #1
 800a444:	4a11      	ldr	r2, [pc, #68]	; (800a48c <pvPortMalloc+0x194>)
 800a446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a448:	f7fe fd36 	bl	8008eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <pvPortMalloc+0x174>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60fb      	str	r3, [r7, #12]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <pvPortMalloc+0x172>
	return pvReturn;
 800a46c:	69fb      	ldr	r3, [r7, #28]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3728      	adds	r7, #40	; 0x28
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20005008 	.word	0x20005008
 800a47c:	2000501c 	.word	0x2000501c
 800a480:	2000500c 	.word	0x2000500c
 800a484:	20005000 	.word	0x20005000
 800a488:	20005010 	.word	0x20005010
 800a48c:	20005014 	.word	0x20005014

0800a490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d04d      	beq.n	800a53e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4a2:	2308      	movs	r3, #8
 800a4a4:	425b      	negs	r3, r3
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	4b24      	ldr	r3, [pc, #144]	; (800a548 <vPortFree+0xb8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <vPortFree+0x44>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60fb      	str	r3, [r7, #12]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <vPortFree+0x62>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60bb      	str	r3, [r7, #8]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <vPortFree+0xb8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01e      	beq.n	800a53e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11a      	bne.n	800a53e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <vPortFree+0xb8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	43db      	mvns	r3, r3
 800a512:	401a      	ands	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a518:	f7fe fcc0 	bl	8008e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <vPortFree+0xbc>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4413      	add	r3, r2
 800a526:	4a09      	ldr	r2, [pc, #36]	; (800a54c <vPortFree+0xbc>)
 800a528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a52a:	6938      	ldr	r0, [r7, #16]
 800a52c:	f000 f874 	bl	800a618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <vPortFree+0xc0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a06      	ldr	r2, [pc, #24]	; (800a550 <vPortFree+0xc0>)
 800a538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a53a:	f7fe fcbd 	bl	8008eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a53e:	bf00      	nop
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	2000501c 	.word	0x2000501c
 800a54c:	2000500c 	.word	0x2000500c
 800a550:	20005018 	.word	0x20005018

0800a554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a55a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a560:	4b27      	ldr	r3, [pc, #156]	; (800a600 <prvHeapInit+0xac>)
 800a562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00c      	beq.n	800a588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	4a1f      	ldr	r2, [pc, #124]	; (800a600 <prvHeapInit+0xac>)
 800a584:	4413      	add	r3, r2
 800a586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a58c:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <prvHeapInit+0xb0>)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <prvHeapInit+0xb0>)
 800a594:	2200      	movs	r2, #0
 800a596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	4413      	add	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	1a9b      	subs	r3, r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f023 0307 	bic.w	r3, r3, #7
 800a5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4a15      	ldr	r2, [pc, #84]	; (800a608 <prvHeapInit+0xb4>)
 800a5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <prvHeapInit+0xb4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5be:	4b12      	ldr	r3, [pc, #72]	; (800a608 <prvHeapInit+0xb4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <prvHeapInit+0xb4>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <prvHeapInit+0xb8>)
 800a5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <prvHeapInit+0xbc>)
 800a5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <prvHeapInit+0xc0>)
 800a5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5f2:	601a      	str	r2, [r3, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	20001400 	.word	0x20001400
 800a604:	20005000 	.word	0x20005000
 800a608:	20005008 	.word	0x20005008
 800a60c:	20005010 	.word	0x20005010
 800a610:	2000500c 	.word	0x2000500c
 800a614:	2000501c 	.word	0x2000501c

0800a618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a620:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <prvInsertBlockIntoFreeList+0xac>)
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	e002      	b.n	800a62c <prvInsertBlockIntoFreeList+0x14>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	429a      	cmp	r2, r3
 800a634:	d8f7      	bhi.n	800a626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	4413      	add	r3, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d108      	bne.n	800a65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	441a      	add	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d118      	bne.n	800a6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d00d      	beq.n	800a696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	441a      	add	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e008      	b.n	800a6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a696:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e003      	b.n	800a6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d002      	beq.n	800a6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20005000 	.word	0x20005000
 800a6c8:	20005008 	.word	0x20005008

0800a6cc <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	; 0x28
 800a6d0:	af04      	add	r7, sp, #16
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	011b      	lsls	r3, r3, #4
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <_ICM20948_SelectUserBank+0x26>
 800a6ee:	2368      	movs	r3, #104	; 0x68
 800a6f0:	e000      	b.n	800a6f4 <_ICM20948_SelectUserBank+0x28>
 800a6f2:	2369      	movs	r3, #105	; 0x69
 800a6f4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800a6f6:	7dbb      	ldrb	r3, [r7, #22]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	b299      	uxth	r1, r3
 800a6fe:	230a      	movs	r3, #10
 800a700:	9302      	str	r3, [sp, #8]
 800a702:	2301      	movs	r3, #1
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	f107 0315 	add.w	r3, r7, #21
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2301      	movs	r3, #1
 800a70e:	227f      	movs	r2, #127	; 0x7f
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7f9 f8f1 	bl	80038f8 <HAL_I2C_Mem_Write>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af04      	add	r7, sp, #16
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	461a      	mov	r2, r3
 800a732:	4603      	mov	r3, r0
 800a734:	70fb      	strb	r3, [r7, #3]
 800a736:	460b      	mov	r3, r1
 800a738:	70bb      	strb	r3, [r7, #2]
 800a73a:	4613      	mov	r3, r2
 800a73c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <_ICM20948_WriteByte+0x28>
 800a748:	2368      	movs	r3, #104	; 0x68
 800a74a:	e000      	b.n	800a74e <_ICM20948_WriteByte+0x2a>
 800a74c:	2369      	movs	r3, #105	; 0x69
 800a74e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	b29b      	uxth	r3, r3
 800a754:	005b      	lsls	r3, r3, #1
 800a756:	b299      	uxth	r1, r3
 800a758:	78bb      	ldrb	r3, [r7, #2]
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	230a      	movs	r3, #10
 800a75e:	9302      	str	r3, [sp, #8]
 800a760:	2301      	movs	r3, #1
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	1c7b      	adds	r3, r7, #1
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	2301      	movs	r3, #1
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f9 f8c4 	bl	80038f8 <HAL_I2C_Mem_Write>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
 800a78a:	4613      	mov	r3, r2
 800a78c:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	2200      	movs	r2, #0
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff97 	bl	800a6cc <_ICM20948_SelectUserBank>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800a7a2:	78f9      	ldrb	r1, [r7, #3]
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	2206      	movs	r2, #6
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff ffbb 	bl	800a724 <_ICM20948_WriteByte>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800a7b2:	20c8      	movs	r0, #200	; 0xc8
 800a7b4:	f7f8 fbf4 	bl	8002fa0 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800a7b8:	78f9      	ldrb	r1, [r7, #3]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	2206      	movs	r2, #6
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff ffb0 	bl	800a724 <_ICM20948_WriteByte>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800a7c8:	78f9      	ldrb	r1, [r7, #3]
 800a7ca:	2338      	movs	r3, #56	; 0x38
 800a7cc:	2207      	movs	r2, #7
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7ff ffa8 	bl	800a724 <_ICM20948_WriteByte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff ff74 	bl	800a6cc <_ICM20948_SelectUserBank>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800a7e8:	78bb      	ldrb	r3, [r7, #2]
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	f043 0319 	orr.w	r3, r3, #25
 800a7f2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	78f9      	ldrb	r1, [r7, #3]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff ff92 	bl	800a724 <_ICM20948_WriteByte>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800a804:	78f9      	ldrb	r1, [r7, #3]
 800a806:	2304      	movs	r3, #4
 800a808:	2200      	movs	r2, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff ff8a 	bl	800a724 <_ICM20948_WriteByte>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	2200      	movs	r2, #0
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff ff56 	bl	800a6cc <_ICM20948_SelectUserBank>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800a824:	78f9      	ldrb	r1, [r7, #3]
 800a826:	2302      	movs	r3, #2
 800a828:	220f      	movs	r2, #15
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7ff ff7a 	bl	800a724 <_ICM20948_WriteByte>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800a834:	bf00      	nop
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800a842:	2300      	movs	r3, #0
 800a844:	71fb      	strb	r3, [r7, #7]
 800a846:	e026      	b.n	800a896 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	3b50      	subs	r3, #80	; 0x50
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2100      	movs	r1, #0
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f82b 	bl	800a8ac <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800a856:	2100      	movs	r1, #0
 800a858:	2000      	movs	r0, #0
 800a85a:	f000 f827 	bl	800a8ac <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800a85e:	2100      	movs	r1, #0
 800a860:	2010      	movs	r0, #16
 800a862:	f000 f823 	bl	800a8ac <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800a866:	2300      	movs	r3, #0
 800a868:	71bb      	strb	r3, [r7, #6]
 800a86a:	e00d      	b.n	800a888 <OLED_Refresh_Gram+0x4c>
 800a86c:	79ba      	ldrb	r2, [r7, #6]
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	490d      	ldr	r1, [pc, #52]	; (800a8a8 <OLED_Refresh_Gram+0x6c>)
 800a872:	00d2      	lsls	r2, r2, #3
 800a874:	440a      	add	r2, r1
 800a876:	4413      	add	r3, r2
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2101      	movs	r1, #1
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 f815 	bl	800a8ac <OLED_WR_Byte>
 800a882:	79bb      	ldrb	r3, [r7, #6]
 800a884:	3301      	adds	r3, #1
 800a886:	71bb      	strb	r3, [r7, #6]
 800a888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	daed      	bge.n	800a86c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	3301      	adds	r3, #1
 800a894:	71fb      	strb	r3, [r7, #7]
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	2b07      	cmp	r3, #7
 800a89a:	d9d5      	bls.n	800a848 <OLED_Refresh_Gram+0xc>
	}   
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20005020 	.word	0x20005020

0800a8ac <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	460a      	mov	r2, r1
 800a8b6:	71fb      	strb	r3, [r7, #7]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800a8bc:	79bb      	ldrb	r3, [r7, #6]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d006      	beq.n	800a8d0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8c8:	481c      	ldr	r0, [pc, #112]	; (800a93c <OLED_WR_Byte+0x90>)
 800a8ca:	f7f8 fe9d 	bl	8003608 <HAL_GPIO_WritePin>
 800a8ce:	e005      	b.n	800a8dc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8d6:	4819      	ldr	r0, [pc, #100]	; (800a93c <OLED_WR_Byte+0x90>)
 800a8d8:	f7f8 fe96 	bl	8003608 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
 800a8e0:	e01e      	b.n	800a920 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2120      	movs	r1, #32
 800a8e6:	4815      	ldr	r0, [pc, #84]	; (800a93c <OLED_WR_Byte+0x90>)
 800a8e8:	f7f8 fe8e 	bl	8003608 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800a8ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da05      	bge.n	800a900 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	2140      	movs	r1, #64	; 0x40
 800a8f8:	4810      	ldr	r0, [pc, #64]	; (800a93c <OLED_WR_Byte+0x90>)
 800a8fa:	f7f8 fe85 	bl	8003608 <HAL_GPIO_WritePin>
 800a8fe:	e004      	b.n	800a90a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800a900:	2200      	movs	r2, #0
 800a902:	2140      	movs	r1, #64	; 0x40
 800a904:	480d      	ldr	r0, [pc, #52]	; (800a93c <OLED_WR_Byte+0x90>)
 800a906:	f7f8 fe7f 	bl	8003608 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a90a:	2201      	movs	r2, #1
 800a90c:	2120      	movs	r1, #32
 800a90e:	480b      	ldr	r0, [pc, #44]	; (800a93c <OLED_WR_Byte+0x90>)
 800a910:	f7f8 fe7a 	bl	8003608 <HAL_GPIO_WritePin>
		dat<<=1;   
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	3301      	adds	r3, #1
 800a91e:	73fb      	strb	r3, [r7, #15]
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	2b07      	cmp	r3, #7
 800a924:	d9dd      	bls.n	800a8e2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800a926:	2201      	movs	r2, #1
 800a928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a92c:	4803      	ldr	r0, [pc, #12]	; (800a93c <OLED_WR_Byte+0x90>)
 800a92e:	f7f8 fe6b 	bl	8003608 <HAL_GPIO_WritePin>
} 
 800a932:	bf00      	nop
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	40021000 	.word	0x40021000

0800a940 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800a946:	2300      	movs	r3, #0
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	e014      	b.n	800a976 <OLED_Clear+0x36>
 800a94c:	2300      	movs	r3, #0
 800a94e:	71bb      	strb	r3, [r7, #6]
 800a950:	e00a      	b.n	800a968 <OLED_Clear+0x28>
 800a952:	79ba      	ldrb	r2, [r7, #6]
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	490c      	ldr	r1, [pc, #48]	; (800a988 <OLED_Clear+0x48>)
 800a958:	00d2      	lsls	r2, r2, #3
 800a95a:	440a      	add	r2, r1
 800a95c:	4413      	add	r3, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
 800a962:	79bb      	ldrb	r3, [r7, #6]
 800a964:	3301      	adds	r3, #1
 800a966:	71bb      	strb	r3, [r7, #6]
 800a968:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	daf0      	bge.n	800a952 <OLED_Clear+0x12>
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	3301      	adds	r3, #1
 800a974:	71fb      	strb	r3, [r7, #7]
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	2b07      	cmp	r3, #7
 800a97a:	d9e7      	bls.n	800a94c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800a97c:	f7ff ff5e 	bl	800a83c <OLED_Refresh_Gram>
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20005020 	.word	0x20005020

0800a98c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
 800a996:	460b      	mov	r3, r1
 800a998:	71bb      	strb	r3, [r7, #6]
 800a99a:	4613      	mov	r3, r2
 800a99c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800a9a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	db41      	blt.n	800aa2e <OLED_DrawPoint+0xa2>
 800a9aa:	79bb      	ldrb	r3, [r7, #6]
 800a9ac:	2b3f      	cmp	r3, #63	; 0x3f
 800a9ae:	d83e      	bhi.n	800aa2e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800a9b0:	79bb      	ldrb	r3, [r7, #6]
 800a9b2:	08db      	lsrs	r3, r3, #3
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f1c3 0307 	rsb	r3, r3, #7
 800a9ba:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800a9bc:	79bb      	ldrb	r3, [r7, #6]
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800a9c4:	7b7b      	ldrb	r3, [r7, #13]
 800a9c6:	f1c3 0307 	rsb	r3, r3, #7
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800a9d2:	797b      	ldrb	r3, [r7, #5]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d012      	beq.n	800a9fe <OLED_DrawPoint+0x72>
 800a9d8:	79fa      	ldrb	r2, [r7, #7]
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	4917      	ldr	r1, [pc, #92]	; (800aa3c <OLED_DrawPoint+0xb0>)
 800a9de:	00d2      	lsls	r2, r2, #3
 800a9e0:	440a      	add	r2, r1
 800a9e2:	4413      	add	r3, r2
 800a9e4:	7818      	ldrb	r0, [r3, #0]
 800a9e6:	79fa      	ldrb	r2, [r7, #7]
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	7bf9      	ldrb	r1, [r7, #15]
 800a9ec:	4301      	orrs	r1, r0
 800a9ee:	b2c8      	uxtb	r0, r1
 800a9f0:	4912      	ldr	r1, [pc, #72]	; (800aa3c <OLED_DrawPoint+0xb0>)
 800a9f2:	00d2      	lsls	r2, r2, #3
 800a9f4:	440a      	add	r2, r1
 800a9f6:	4413      	add	r3, r2
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e018      	b.n	800aa30 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800a9fe:	79fa      	ldrb	r2, [r7, #7]
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	490e      	ldr	r1, [pc, #56]	; (800aa3c <OLED_DrawPoint+0xb0>)
 800aa04:	00d2      	lsls	r2, r2, #3
 800aa06:	440a      	add	r2, r1
 800aa08:	4413      	add	r3, r2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	b25a      	sxtb	r2, r3
 800aa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa12:	43db      	mvns	r3, r3
 800aa14:	b25b      	sxtb	r3, r3
 800aa16:	4013      	ands	r3, r2
 800aa18:	b259      	sxtb	r1, r3
 800aa1a:	79fa      	ldrb	r2, [r7, #7]
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	b2c8      	uxtb	r0, r1
 800aa20:	4906      	ldr	r1, [pc, #24]	; (800aa3c <OLED_DrawPoint+0xb0>)
 800aa22:	00d2      	lsls	r2, r2, #3
 800aa24:	440a      	add	r2, r1
 800aa26:	4413      	add	r3, r2
 800aa28:	4602      	mov	r2, r0
 800aa2a:	701a      	strb	r2, [r3, #0]
 800aa2c:	e000      	b.n	800aa30 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800aa2e:	bf00      	nop
}
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20005020 	.word	0x20005020

0800aa40 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4623      	mov	r3, r4
 800aa50:	71fb      	strb	r3, [r7, #7]
 800aa52:	4603      	mov	r3, r0
 800aa54:	71bb      	strb	r3, [r7, #6]
 800aa56:	460b      	mov	r3, r1
 800aa58:	717b      	strb	r3, [r7, #5]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800aa5e:	79bb      	ldrb	r3, [r7, #6]
 800aa60:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800aa62:	797b      	ldrb	r3, [r7, #5]
 800aa64:	3b20      	subs	r3, #32
 800aa66:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73bb      	strb	r3, [r7, #14]
 800aa6c:	e04d      	b.n	800ab0a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800aa6e:	793b      	ldrb	r3, [r7, #4]
 800aa70:	2b0c      	cmp	r3, #12
 800aa72:	d10b      	bne.n	800aa8c <OLED_ShowChar+0x4c>
 800aa74:	797a      	ldrb	r2, [r7, #5]
 800aa76:	7bb9      	ldrb	r1, [r7, #14]
 800aa78:	4828      	ldr	r0, [pc, #160]	; (800ab1c <OLED_ShowChar+0xdc>)
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4403      	add	r3, r0
 800aa84:	440b      	add	r3, r1
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	73fb      	strb	r3, [r7, #15]
 800aa8a:	e007      	b.n	800aa9c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800aa8c:	797a      	ldrb	r2, [r7, #5]
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	4923      	ldr	r1, [pc, #140]	; (800ab20 <OLED_ShowChar+0xe0>)
 800aa92:	0112      	lsls	r2, r2, #4
 800aa94:	440a      	add	r2, r1
 800aa96:	4413      	add	r3, r2
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	737b      	strb	r3, [r7, #13]
 800aaa0:	e02d      	b.n	800aafe <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800aaa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da07      	bge.n	800aaba <OLED_ShowChar+0x7a>
 800aaaa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800aaae:	79b9      	ldrb	r1, [r7, #6]
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff ff6a 	bl	800a98c <OLED_DrawPoint>
 800aab8:	e00c      	b.n	800aad4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800aaba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bf0c      	ite	eq
 800aac2:	2301      	moveq	r3, #1
 800aac4:	2300      	movne	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	79b9      	ldrb	r1, [r7, #6]
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff ff5c 	bl	800a98c <OLED_DrawPoint>
			temp<<=1;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	73fb      	strb	r3, [r7, #15]
			y++;
 800aada:	79bb      	ldrb	r3, [r7, #6]
 800aadc:	3301      	adds	r3, #1
 800aade:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800aae0:	79ba      	ldrb	r2, [r7, #6]
 800aae2:	7b3b      	ldrb	r3, [r7, #12]
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	793b      	ldrb	r3, [r7, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d105      	bne.n	800aaf8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800aaec:	7b3b      	ldrb	r3, [r7, #12]
 800aaee:	71bb      	strb	r3, [r7, #6]
				x++;
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	71fb      	strb	r3, [r7, #7]
				break;
 800aaf6:	e005      	b.n	800ab04 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800aaf8:	7b7b      	ldrb	r3, [r7, #13]
 800aafa:	3301      	adds	r3, #1
 800aafc:	737b      	strb	r3, [r7, #13]
 800aafe:	7b7b      	ldrb	r3, [r7, #13]
 800ab00:	2b07      	cmp	r3, #7
 800ab02:	d9ce      	bls.n	800aaa2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	3301      	adds	r3, #1
 800ab08:	73bb      	strb	r3, [r7, #14]
 800ab0a:	7bba      	ldrb	r2, [r7, #14]
 800ab0c:	793b      	ldrb	r3, [r7, #4]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3ad      	bcc.n	800aa6e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd90      	pop	{r4, r7, pc}
 800ab1c:	0800ddc4 	.word	0x0800ddc4
 800ab20:	0800e238 	.word	0x0800e238

0800ab24 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af02      	add	r7, sp, #8
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	603a      	str	r2, [r7, #0]
 800ab2e:	71fb      	strb	r3, [r7, #7]
 800ab30:	460b      	mov	r3, r1
 800ab32:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800ab34:	e01f      	b.n	800ab76 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	2b7a      	cmp	r3, #122	; 0x7a
 800ab3a:	d904      	bls.n	800ab46 <OLED_ShowString+0x22>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	71fb      	strb	r3, [r7, #7]
 800ab40:	79bb      	ldrb	r3, [r7, #6]
 800ab42:	3310      	adds	r3, #16
 800ab44:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800ab46:	79bb      	ldrb	r3, [r7, #6]
 800ab48:	2b3a      	cmp	r3, #58	; 0x3a
 800ab4a:	d905      	bls.n	800ab58 <OLED_ShowString+0x34>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	71fb      	strb	r3, [r7, #7]
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	71bb      	strb	r3, [r7, #6]
 800ab54:	f7ff fef4 	bl	800a940 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781a      	ldrb	r2, [r3, #0]
 800ab5c:	79b9      	ldrb	r1, [r7, #6]
 800ab5e:	79f8      	ldrb	r0, [r7, #7]
 800ab60:	2301      	movs	r3, #1
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	230c      	movs	r3, #12
 800ab66:	f7ff ff6b 	bl	800aa40 <OLED_ShowChar>
        x+=8;
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	71fb      	strb	r3, [r7, #7]
        p++;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	3301      	adds	r3, #1
 800ab74:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1db      	bne.n	800ab36 <OLED_ShowString+0x12>
    }  
}	 
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <OLED_Init>:

void OLED_Init(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800ab8c:	f7f9 fd30 	bl	80045f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800ab90:	4b41      	ldr	r3, [pc, #260]	; (800ac98 <OLED_Init+0x110>)
 800ab92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab94:	4a40      	ldr	r2, [pc, #256]	; (800ac98 <OLED_Init+0x110>)
 800ab96:	f023 0301 	bic.w	r3, r3, #1
 800ab9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab9c:	4b3e      	ldr	r3, [pc, #248]	; (800ac98 <OLED_Init+0x110>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	4a3d      	ldr	r2, [pc, #244]	; (800ac98 <OLED_Init+0x110>)
 800aba2:	f023 0304 	bic.w	r3, r3, #4
 800aba6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800aba8:	f7f9 fd36 	bl	8004618 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800abac:	2200      	movs	r2, #0
 800abae:	2180      	movs	r1, #128	; 0x80
 800abb0:	483a      	ldr	r0, [pc, #232]	; (800ac9c <OLED_Init+0x114>)
 800abb2:	f7f8 fd29 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800abb6:	2064      	movs	r0, #100	; 0x64
 800abb8:	f7f8 f9f2 	bl	8002fa0 <HAL_Delay>
	OLED_RST_Set();
 800abbc:	2201      	movs	r2, #1
 800abbe:	2180      	movs	r1, #128	; 0x80
 800abc0:	4836      	ldr	r0, [pc, #216]	; (800ac9c <OLED_Init+0x114>)
 800abc2:	f7f8 fd21 	bl	8003608 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800abc6:	2100      	movs	r1, #0
 800abc8:	20ae      	movs	r0, #174	; 0xae
 800abca:	f7ff fe6f 	bl	800a8ac <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800abce:	2100      	movs	r1, #0
 800abd0:	20d5      	movs	r0, #213	; 0xd5
 800abd2:	f7ff fe6b 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800abd6:	2100      	movs	r1, #0
 800abd8:	2050      	movs	r0, #80	; 0x50
 800abda:	f7ff fe67 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800abde:	2100      	movs	r1, #0
 800abe0:	20a8      	movs	r0, #168	; 0xa8
 800abe2:	f7ff fe63 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800abe6:	2100      	movs	r1, #0
 800abe8:	203f      	movs	r0, #63	; 0x3f
 800abea:	f7ff fe5f 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800abee:	2100      	movs	r1, #0
 800abf0:	20d3      	movs	r0, #211	; 0xd3
 800abf2:	f7ff fe5b 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800abf6:	2100      	movs	r1, #0
 800abf8:	2000      	movs	r0, #0
 800abfa:	f7ff fe57 	bl	800a8ac <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800abfe:	2100      	movs	r1, #0
 800ac00:	2040      	movs	r0, #64	; 0x40
 800ac02:	f7ff fe53 	bl	800a8ac <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ac06:	2100      	movs	r1, #0
 800ac08:	208d      	movs	r0, #141	; 0x8d
 800ac0a:	f7ff fe4f 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ac0e:	2100      	movs	r1, #0
 800ac10:	2014      	movs	r0, #20
 800ac12:	f7ff fe4b 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ac16:	2100      	movs	r1, #0
 800ac18:	2020      	movs	r0, #32
 800ac1a:	f7ff fe47 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ac1e:	2100      	movs	r1, #0
 800ac20:	2002      	movs	r0, #2
 800ac22:	f7ff fe43 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ac26:	2100      	movs	r1, #0
 800ac28:	20a1      	movs	r0, #161	; 0xa1
 800ac2a:	f7ff fe3f 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ac2e:	2100      	movs	r1, #0
 800ac30:	20c0      	movs	r0, #192	; 0xc0
 800ac32:	f7ff fe3b 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ac36:	2100      	movs	r1, #0
 800ac38:	20da      	movs	r0, #218	; 0xda
 800ac3a:	f7ff fe37 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ac3e:	2100      	movs	r1, #0
 800ac40:	2012      	movs	r0, #18
 800ac42:	f7ff fe33 	bl	800a8ac <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ac46:	2100      	movs	r1, #0
 800ac48:	2081      	movs	r0, #129	; 0x81
 800ac4a:	f7ff fe2f 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ac4e:	2100      	movs	r1, #0
 800ac50:	20ef      	movs	r0, #239	; 0xef
 800ac52:	f7ff fe2b 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ac56:	2100      	movs	r1, #0
 800ac58:	20d9      	movs	r0, #217	; 0xd9
 800ac5a:	f7ff fe27 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ac5e:	2100      	movs	r1, #0
 800ac60:	20f1      	movs	r0, #241	; 0xf1
 800ac62:	f7ff fe23 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800ac66:	2100      	movs	r1, #0
 800ac68:	20db      	movs	r0, #219	; 0xdb
 800ac6a:	f7ff fe1f 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ac6e:	2100      	movs	r1, #0
 800ac70:	2030      	movs	r0, #48	; 0x30
 800ac72:	f7ff fe1b 	bl	800a8ac <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800ac76:	2100      	movs	r1, #0
 800ac78:	20a4      	movs	r0, #164	; 0xa4
 800ac7a:	f7ff fe17 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800ac7e:	2100      	movs	r1, #0
 800ac80:	20a6      	movs	r0, #166	; 0xa6
 800ac82:	f7ff fe13 	bl	800a8ac <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800ac86:	2100      	movs	r1, #0
 800ac88:	20af      	movs	r0, #175	; 0xaf
 800ac8a:	f7ff fe0f 	bl	800a8ac <OLED_WR_Byte>
	OLED_Clear(); 
 800ac8e:	f7ff fe57 	bl	800a940 <OLED_Clear>
 800ac92:	bf00      	nop
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	40023800 	.word	0x40023800
 800ac9c:	40021000 	.word	0x40021000

0800aca0 <atoi>:
 800aca0:	220a      	movs	r2, #10
 800aca2:	2100      	movs	r1, #0
 800aca4:	f000 bf98 	b.w	800bbd8 <strtol>

0800aca8 <__errno>:
 800aca8:	4b01      	ldr	r3, [pc, #4]	; (800acb0 <__errno+0x8>)
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	20000034 	.word	0x20000034

0800acb4 <std>:
 800acb4:	2300      	movs	r3, #0
 800acb6:	b510      	push	{r4, lr}
 800acb8:	4604      	mov	r4, r0
 800acba:	e9c0 3300 	strd	r3, r3, [r0]
 800acbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acc2:	6083      	str	r3, [r0, #8]
 800acc4:	8181      	strh	r1, [r0, #12]
 800acc6:	6643      	str	r3, [r0, #100]	; 0x64
 800acc8:	81c2      	strh	r2, [r0, #14]
 800acca:	6183      	str	r3, [r0, #24]
 800accc:	4619      	mov	r1, r3
 800acce:	2208      	movs	r2, #8
 800acd0:	305c      	adds	r0, #92	; 0x5c
 800acd2:	f000 f91a 	bl	800af0a <memset>
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <std+0x38>)
 800acd8:	6263      	str	r3, [r4, #36]	; 0x24
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <std+0x3c>)
 800acdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x40>)
 800ace0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <std+0x44>)
 800ace4:	6224      	str	r4, [r4, #32]
 800ace6:	6323      	str	r3, [r4, #48]	; 0x30
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	0800ba4d 	.word	0x0800ba4d
 800acf0:	0800ba6f 	.word	0x0800ba6f
 800acf4:	0800baa7 	.word	0x0800baa7
 800acf8:	0800bacb 	.word	0x0800bacb

0800acfc <_cleanup_r>:
 800acfc:	4901      	ldr	r1, [pc, #4]	; (800ad04 <_cleanup_r+0x8>)
 800acfe:	f000 b8af 	b.w	800ae60 <_fwalk_reent>
 800ad02:	bf00      	nop
 800ad04:	0800ca31 	.word	0x0800ca31

0800ad08 <__sfmoreglue>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	2268      	movs	r2, #104	; 0x68
 800ad0c:	1e4d      	subs	r5, r1, #1
 800ad0e:	4355      	muls	r5, r2
 800ad10:	460e      	mov	r6, r1
 800ad12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad16:	f000 f921 	bl	800af5c <_malloc_r>
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	b140      	cbz	r0, 800ad30 <__sfmoreglue+0x28>
 800ad1e:	2100      	movs	r1, #0
 800ad20:	e9c0 1600 	strd	r1, r6, [r0]
 800ad24:	300c      	adds	r0, #12
 800ad26:	60a0      	str	r0, [r4, #8]
 800ad28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad2c:	f000 f8ed 	bl	800af0a <memset>
 800ad30:	4620      	mov	r0, r4
 800ad32:	bd70      	pop	{r4, r5, r6, pc}

0800ad34 <__sfp_lock_acquire>:
 800ad34:	4801      	ldr	r0, [pc, #4]	; (800ad3c <__sfp_lock_acquire+0x8>)
 800ad36:	f000 b8d8 	b.w	800aeea <__retarget_lock_acquire_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	20005421 	.word	0x20005421

0800ad40 <__sfp_lock_release>:
 800ad40:	4801      	ldr	r0, [pc, #4]	; (800ad48 <__sfp_lock_release+0x8>)
 800ad42:	f000 b8d3 	b.w	800aeec <__retarget_lock_release_recursive>
 800ad46:	bf00      	nop
 800ad48:	20005421 	.word	0x20005421

0800ad4c <__sinit_lock_acquire>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	; (800ad54 <__sinit_lock_acquire+0x8>)
 800ad4e:	f000 b8cc 	b.w	800aeea <__retarget_lock_acquire_recursive>
 800ad52:	bf00      	nop
 800ad54:	20005422 	.word	0x20005422

0800ad58 <__sinit_lock_release>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__sinit_lock_release+0x8>)
 800ad5a:	f000 b8c7 	b.w	800aeec <__retarget_lock_release_recursive>
 800ad5e:	bf00      	nop
 800ad60:	20005422 	.word	0x20005422

0800ad64 <__sinit>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	f7ff fff0 	bl	800ad4c <__sinit_lock_acquire>
 800ad6c:	69a3      	ldr	r3, [r4, #24]
 800ad6e:	b11b      	cbz	r3, 800ad78 <__sinit+0x14>
 800ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad74:	f7ff bff0 	b.w	800ad58 <__sinit_lock_release>
 800ad78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <__sinit+0x68>)
 800ad80:	4a13      	ldr	r2, [pc, #76]	; (800add0 <__sinit+0x6c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	bf04      	itt	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	61a3      	streq	r3, [r4, #24]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f820 	bl	800add4 <__sfp>
 800ad94:	6060      	str	r0, [r4, #4]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 f81c 	bl	800add4 <__sfp>
 800ad9c:	60a0      	str	r0, [r4, #8]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f818 	bl	800add4 <__sfp>
 800ada4:	2200      	movs	r2, #0
 800ada6:	60e0      	str	r0, [r4, #12]
 800ada8:	2104      	movs	r1, #4
 800adaa:	6860      	ldr	r0, [r4, #4]
 800adac:	f7ff ff82 	bl	800acb4 <std>
 800adb0:	68a0      	ldr	r0, [r4, #8]
 800adb2:	2201      	movs	r2, #1
 800adb4:	2109      	movs	r1, #9
 800adb6:	f7ff ff7d 	bl	800acb4 <std>
 800adba:	68e0      	ldr	r0, [r4, #12]
 800adbc:	2202      	movs	r2, #2
 800adbe:	2112      	movs	r1, #18
 800adc0:	f7ff ff78 	bl	800acb4 <std>
 800adc4:	2301      	movs	r3, #1
 800adc6:	61a3      	str	r3, [r4, #24]
 800adc8:	e7d2      	b.n	800ad70 <__sinit+0xc>
 800adca:	bf00      	nop
 800adcc:	0800e888 	.word	0x0800e888
 800add0:	0800acfd 	.word	0x0800acfd

0800add4 <__sfp>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	4607      	mov	r7, r0
 800add8:	f7ff ffac 	bl	800ad34 <__sfp_lock_acquire>
 800addc:	4b1e      	ldr	r3, [pc, #120]	; (800ae58 <__sfp+0x84>)
 800adde:	681e      	ldr	r6, [r3, #0]
 800ade0:	69b3      	ldr	r3, [r6, #24]
 800ade2:	b913      	cbnz	r3, 800adea <__sfp+0x16>
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7ff ffbd 	bl	800ad64 <__sinit>
 800adea:	3648      	adds	r6, #72	; 0x48
 800adec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	d503      	bpl.n	800adfc <__sfp+0x28>
 800adf4:	6833      	ldr	r3, [r6, #0]
 800adf6:	b30b      	cbz	r3, 800ae3c <__sfp+0x68>
 800adf8:	6836      	ldr	r6, [r6, #0]
 800adfa:	e7f7      	b.n	800adec <__sfp+0x18>
 800adfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae00:	b9d5      	cbnz	r5, 800ae38 <__sfp+0x64>
 800ae02:	4b16      	ldr	r3, [pc, #88]	; (800ae5c <__sfp+0x88>)
 800ae04:	60e3      	str	r3, [r4, #12]
 800ae06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae0a:	6665      	str	r5, [r4, #100]	; 0x64
 800ae0c:	f000 f86c 	bl	800aee8 <__retarget_lock_init_recursive>
 800ae10:	f7ff ff96 	bl	800ad40 <__sfp_lock_release>
 800ae14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae1c:	6025      	str	r5, [r4, #0]
 800ae1e:	61a5      	str	r5, [r4, #24]
 800ae20:	2208      	movs	r2, #8
 800ae22:	4629      	mov	r1, r5
 800ae24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae28:	f000 f86f 	bl	800af0a <memset>
 800ae2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae34:	4620      	mov	r0, r4
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	3468      	adds	r4, #104	; 0x68
 800ae3a:	e7d9      	b.n	800adf0 <__sfp+0x1c>
 800ae3c:	2104      	movs	r1, #4
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f7ff ff62 	bl	800ad08 <__sfmoreglue>
 800ae44:	4604      	mov	r4, r0
 800ae46:	6030      	str	r0, [r6, #0]
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1d5      	bne.n	800adf8 <__sfp+0x24>
 800ae4c:	f7ff ff78 	bl	800ad40 <__sfp_lock_release>
 800ae50:	230c      	movs	r3, #12
 800ae52:	603b      	str	r3, [r7, #0]
 800ae54:	e7ee      	b.n	800ae34 <__sfp+0x60>
 800ae56:	bf00      	nop
 800ae58:	0800e888 	.word	0x0800e888
 800ae5c:	ffff0001 	.word	0xffff0001

0800ae60 <_fwalk_reent>:
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	4606      	mov	r6, r0
 800ae66:	4688      	mov	r8, r1
 800ae68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae6c:	2700      	movs	r7, #0
 800ae6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae72:	f1b9 0901 	subs.w	r9, r9, #1
 800ae76:	d505      	bpl.n	800ae84 <_fwalk_reent+0x24>
 800ae78:	6824      	ldr	r4, [r4, #0]
 800ae7a:	2c00      	cmp	r4, #0
 800ae7c:	d1f7      	bne.n	800ae6e <_fwalk_reent+0xe>
 800ae7e:	4638      	mov	r0, r7
 800ae80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae84:	89ab      	ldrh	r3, [r5, #12]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d907      	bls.n	800ae9a <_fwalk_reent+0x3a>
 800ae8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	d003      	beq.n	800ae9a <_fwalk_reent+0x3a>
 800ae92:	4629      	mov	r1, r5
 800ae94:	4630      	mov	r0, r6
 800ae96:	47c0      	blx	r8
 800ae98:	4307      	orrs	r7, r0
 800ae9a:	3568      	adds	r5, #104	; 0x68
 800ae9c:	e7e9      	b.n	800ae72 <_fwalk_reent+0x12>
	...

0800aea0 <__libc_init_array>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	4d0d      	ldr	r5, [pc, #52]	; (800aed8 <__libc_init_array+0x38>)
 800aea4:	4c0d      	ldr	r4, [pc, #52]	; (800aedc <__libc_init_array+0x3c>)
 800aea6:	1b64      	subs	r4, r4, r5
 800aea8:	10a4      	asrs	r4, r4, #2
 800aeaa:	2600      	movs	r6, #0
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	d109      	bne.n	800aec4 <__libc_init_array+0x24>
 800aeb0:	4d0b      	ldr	r5, [pc, #44]	; (800aee0 <__libc_init_array+0x40>)
 800aeb2:	4c0c      	ldr	r4, [pc, #48]	; (800aee4 <__libc_init_array+0x44>)
 800aeb4:	f002 ff02 	bl	800dcbc <_init>
 800aeb8:	1b64      	subs	r4, r4, r5
 800aeba:	10a4      	asrs	r4, r4, #2
 800aebc:	2600      	movs	r6, #0
 800aebe:	42a6      	cmp	r6, r4
 800aec0:	d105      	bne.n	800aece <__libc_init_array+0x2e>
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec8:	4798      	blx	r3
 800aeca:	3601      	adds	r6, #1
 800aecc:	e7ee      	b.n	800aeac <__libc_init_array+0xc>
 800aece:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed2:	4798      	blx	r3
 800aed4:	3601      	adds	r6, #1
 800aed6:	e7f2      	b.n	800aebe <__libc_init_array+0x1e>
 800aed8:	0800ec0c 	.word	0x0800ec0c
 800aedc:	0800ec0c 	.word	0x0800ec0c
 800aee0:	0800ec0c 	.word	0x0800ec0c
 800aee4:	0800ec10 	.word	0x0800ec10

0800aee8 <__retarget_lock_init_recursive>:
 800aee8:	4770      	bx	lr

0800aeea <__retarget_lock_acquire_recursive>:
 800aeea:	4770      	bx	lr

0800aeec <__retarget_lock_release_recursive>:
 800aeec:	4770      	bx	lr

0800aeee <memcpy>:
 800aeee:	440a      	add	r2, r1
 800aef0:	4291      	cmp	r1, r2
 800aef2:	f100 33ff 	add.w	r3, r0, #4294967295
 800aef6:	d100      	bne.n	800aefa <memcpy+0xc>
 800aef8:	4770      	bx	lr
 800aefa:	b510      	push	{r4, lr}
 800aefc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af04:	4291      	cmp	r1, r2
 800af06:	d1f9      	bne.n	800aefc <memcpy+0xe>
 800af08:	bd10      	pop	{r4, pc}

0800af0a <memset>:
 800af0a:	4402      	add	r2, r0
 800af0c:	4603      	mov	r3, r0
 800af0e:	4293      	cmp	r3, r2
 800af10:	d100      	bne.n	800af14 <memset+0xa>
 800af12:	4770      	bx	lr
 800af14:	f803 1b01 	strb.w	r1, [r3], #1
 800af18:	e7f9      	b.n	800af0e <memset+0x4>
	...

0800af1c <sbrk_aligned>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4e0e      	ldr	r6, [pc, #56]	; (800af58 <sbrk_aligned+0x3c>)
 800af20:	460c      	mov	r4, r1
 800af22:	6831      	ldr	r1, [r6, #0]
 800af24:	4605      	mov	r5, r0
 800af26:	b911      	cbnz	r1, 800af2e <sbrk_aligned+0x12>
 800af28:	f000 fd60 	bl	800b9ec <_sbrk_r>
 800af2c:	6030      	str	r0, [r6, #0]
 800af2e:	4621      	mov	r1, r4
 800af30:	4628      	mov	r0, r5
 800af32:	f000 fd5b 	bl	800b9ec <_sbrk_r>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d00a      	beq.n	800af50 <sbrk_aligned+0x34>
 800af3a:	1cc4      	adds	r4, r0, #3
 800af3c:	f024 0403 	bic.w	r4, r4, #3
 800af40:	42a0      	cmp	r0, r4
 800af42:	d007      	beq.n	800af54 <sbrk_aligned+0x38>
 800af44:	1a21      	subs	r1, r4, r0
 800af46:	4628      	mov	r0, r5
 800af48:	f000 fd50 	bl	800b9ec <_sbrk_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d101      	bne.n	800af54 <sbrk_aligned+0x38>
 800af50:	f04f 34ff 	mov.w	r4, #4294967295
 800af54:	4620      	mov	r0, r4
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	20005428 	.word	0x20005428

0800af5c <_malloc_r>:
 800af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af60:	1ccd      	adds	r5, r1, #3
 800af62:	f025 0503 	bic.w	r5, r5, #3
 800af66:	3508      	adds	r5, #8
 800af68:	2d0c      	cmp	r5, #12
 800af6a:	bf38      	it	cc
 800af6c:	250c      	movcc	r5, #12
 800af6e:	2d00      	cmp	r5, #0
 800af70:	4607      	mov	r7, r0
 800af72:	db01      	blt.n	800af78 <_malloc_r+0x1c>
 800af74:	42a9      	cmp	r1, r5
 800af76:	d905      	bls.n	800af84 <_malloc_r+0x28>
 800af78:	230c      	movs	r3, #12
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	2600      	movs	r6, #0
 800af7e:	4630      	mov	r0, r6
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	4e2e      	ldr	r6, [pc, #184]	; (800b040 <_malloc_r+0xe4>)
 800af86:	f001 fdad 	bl	800cae4 <__malloc_lock>
 800af8a:	6833      	ldr	r3, [r6, #0]
 800af8c:	461c      	mov	r4, r3
 800af8e:	bb34      	cbnz	r4, 800afde <_malloc_r+0x82>
 800af90:	4629      	mov	r1, r5
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ffc2 	bl	800af1c <sbrk_aligned>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	4604      	mov	r4, r0
 800af9c:	d14d      	bne.n	800b03a <_malloc_r+0xde>
 800af9e:	6834      	ldr	r4, [r6, #0]
 800afa0:	4626      	mov	r6, r4
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d140      	bne.n	800b028 <_malloc_r+0xcc>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	4631      	mov	r1, r6
 800afaa:	4638      	mov	r0, r7
 800afac:	eb04 0803 	add.w	r8, r4, r3
 800afb0:	f000 fd1c 	bl	800b9ec <_sbrk_r>
 800afb4:	4580      	cmp	r8, r0
 800afb6:	d13a      	bne.n	800b02e <_malloc_r+0xd2>
 800afb8:	6821      	ldr	r1, [r4, #0]
 800afba:	3503      	adds	r5, #3
 800afbc:	1a6d      	subs	r5, r5, r1
 800afbe:	f025 0503 	bic.w	r5, r5, #3
 800afc2:	3508      	adds	r5, #8
 800afc4:	2d0c      	cmp	r5, #12
 800afc6:	bf38      	it	cc
 800afc8:	250c      	movcc	r5, #12
 800afca:	4629      	mov	r1, r5
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff ffa5 	bl	800af1c <sbrk_aligned>
 800afd2:	3001      	adds	r0, #1
 800afd4:	d02b      	beq.n	800b02e <_malloc_r+0xd2>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	442b      	add	r3, r5
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	e00e      	b.n	800affc <_malloc_r+0xa0>
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	1b52      	subs	r2, r2, r5
 800afe2:	d41e      	bmi.n	800b022 <_malloc_r+0xc6>
 800afe4:	2a0b      	cmp	r2, #11
 800afe6:	d916      	bls.n	800b016 <_malloc_r+0xba>
 800afe8:	1961      	adds	r1, r4, r5
 800afea:	42a3      	cmp	r3, r4
 800afec:	6025      	str	r5, [r4, #0]
 800afee:	bf18      	it	ne
 800aff0:	6059      	strne	r1, [r3, #4]
 800aff2:	6863      	ldr	r3, [r4, #4]
 800aff4:	bf08      	it	eq
 800aff6:	6031      	streq	r1, [r6, #0]
 800aff8:	5162      	str	r2, [r4, r5]
 800affa:	604b      	str	r3, [r1, #4]
 800affc:	4638      	mov	r0, r7
 800affe:	f104 060b 	add.w	r6, r4, #11
 800b002:	f001 fd75 	bl	800caf0 <__malloc_unlock>
 800b006:	f026 0607 	bic.w	r6, r6, #7
 800b00a:	1d23      	adds	r3, r4, #4
 800b00c:	1af2      	subs	r2, r6, r3
 800b00e:	d0b6      	beq.n	800af7e <_malloc_r+0x22>
 800b010:	1b9b      	subs	r3, r3, r6
 800b012:	50a3      	str	r3, [r4, r2]
 800b014:	e7b3      	b.n	800af7e <_malloc_r+0x22>
 800b016:	6862      	ldr	r2, [r4, #4]
 800b018:	42a3      	cmp	r3, r4
 800b01a:	bf0c      	ite	eq
 800b01c:	6032      	streq	r2, [r6, #0]
 800b01e:	605a      	strne	r2, [r3, #4]
 800b020:	e7ec      	b.n	800affc <_malloc_r+0xa0>
 800b022:	4623      	mov	r3, r4
 800b024:	6864      	ldr	r4, [r4, #4]
 800b026:	e7b2      	b.n	800af8e <_malloc_r+0x32>
 800b028:	4634      	mov	r4, r6
 800b02a:	6876      	ldr	r6, [r6, #4]
 800b02c:	e7b9      	b.n	800afa2 <_malloc_r+0x46>
 800b02e:	230c      	movs	r3, #12
 800b030:	603b      	str	r3, [r7, #0]
 800b032:	4638      	mov	r0, r7
 800b034:	f001 fd5c 	bl	800caf0 <__malloc_unlock>
 800b038:	e7a1      	b.n	800af7e <_malloc_r+0x22>
 800b03a:	6025      	str	r5, [r4, #0]
 800b03c:	e7de      	b.n	800affc <_malloc_r+0xa0>
 800b03e:	bf00      	nop
 800b040:	20005424 	.word	0x20005424

0800b044 <__cvt>:
 800b044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	ec55 4b10 	vmov	r4, r5, d0
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	460e      	mov	r6, r1
 800b050:	4619      	mov	r1, r3
 800b052:	462b      	mov	r3, r5
 800b054:	bfbb      	ittet	lt
 800b056:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b05a:	461d      	movlt	r5, r3
 800b05c:	2300      	movge	r3, #0
 800b05e:	232d      	movlt	r3, #45	; 0x2d
 800b060:	700b      	strb	r3, [r1, #0]
 800b062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b064:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b068:	4691      	mov	r9, r2
 800b06a:	f023 0820 	bic.w	r8, r3, #32
 800b06e:	bfbc      	itt	lt
 800b070:	4622      	movlt	r2, r4
 800b072:	4614      	movlt	r4, r2
 800b074:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b078:	d005      	beq.n	800b086 <__cvt+0x42>
 800b07a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b07e:	d100      	bne.n	800b082 <__cvt+0x3e>
 800b080:	3601      	adds	r6, #1
 800b082:	2102      	movs	r1, #2
 800b084:	e000      	b.n	800b088 <__cvt+0x44>
 800b086:	2103      	movs	r1, #3
 800b088:	ab03      	add	r3, sp, #12
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	ab02      	add	r3, sp, #8
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	ec45 4b10 	vmov	d0, r4, r5
 800b094:	4653      	mov	r3, sl
 800b096:	4632      	mov	r2, r6
 800b098:	f000 fe56 	bl	800bd48 <_dtoa_r>
 800b09c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	d102      	bne.n	800b0aa <__cvt+0x66>
 800b0a4:	f019 0f01 	tst.w	r9, #1
 800b0a8:	d022      	beq.n	800b0f0 <__cvt+0xac>
 800b0aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ae:	eb07 0906 	add.w	r9, r7, r6
 800b0b2:	d110      	bne.n	800b0d6 <__cvt+0x92>
 800b0b4:	783b      	ldrb	r3, [r7, #0]
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	d10a      	bne.n	800b0d0 <__cvt+0x8c>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c6:	b918      	cbnz	r0, 800b0d0 <__cvt+0x8c>
 800b0c8:	f1c6 0601 	rsb	r6, r6, #1
 800b0cc:	f8ca 6000 	str.w	r6, [sl]
 800b0d0:	f8da 3000 	ldr.w	r3, [sl]
 800b0d4:	4499      	add	r9, r3
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4629      	mov	r1, r5
 800b0de:	f7f5 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e2:	b108      	cbz	r0, 800b0e8 <__cvt+0xa4>
 800b0e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0e8:	2230      	movs	r2, #48	; 0x30
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	454b      	cmp	r3, r9
 800b0ee:	d307      	bcc.n	800b100 <__cvt+0xbc>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f4:	1bdb      	subs	r3, r3, r7
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	b004      	add	sp, #16
 800b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b100:	1c59      	adds	r1, r3, #1
 800b102:	9103      	str	r1, [sp, #12]
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e7f0      	b.n	800b0ea <__cvt+0xa6>

0800b108 <__exponent>:
 800b108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10a:	4603      	mov	r3, r0
 800b10c:	2900      	cmp	r1, #0
 800b10e:	bfb8      	it	lt
 800b110:	4249      	neglt	r1, r1
 800b112:	f803 2b02 	strb.w	r2, [r3], #2
 800b116:	bfb4      	ite	lt
 800b118:	222d      	movlt	r2, #45	; 0x2d
 800b11a:	222b      	movge	r2, #43	; 0x2b
 800b11c:	2909      	cmp	r1, #9
 800b11e:	7042      	strb	r2, [r0, #1]
 800b120:	dd2a      	ble.n	800b178 <__exponent+0x70>
 800b122:	f10d 0407 	add.w	r4, sp, #7
 800b126:	46a4      	mov	ip, r4
 800b128:	270a      	movs	r7, #10
 800b12a:	46a6      	mov	lr, r4
 800b12c:	460a      	mov	r2, r1
 800b12e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b132:	fb07 1516 	mls	r5, r7, r6, r1
 800b136:	3530      	adds	r5, #48	; 0x30
 800b138:	2a63      	cmp	r2, #99	; 0x63
 800b13a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b13e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b142:	4631      	mov	r1, r6
 800b144:	dcf1      	bgt.n	800b12a <__exponent+0x22>
 800b146:	3130      	adds	r1, #48	; 0x30
 800b148:	f1ae 0502 	sub.w	r5, lr, #2
 800b14c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b150:	1c44      	adds	r4, r0, #1
 800b152:	4629      	mov	r1, r5
 800b154:	4561      	cmp	r1, ip
 800b156:	d30a      	bcc.n	800b16e <__exponent+0x66>
 800b158:	f10d 0209 	add.w	r2, sp, #9
 800b15c:	eba2 020e 	sub.w	r2, r2, lr
 800b160:	4565      	cmp	r5, ip
 800b162:	bf88      	it	hi
 800b164:	2200      	movhi	r2, #0
 800b166:	4413      	add	r3, r2
 800b168:	1a18      	subs	r0, r3, r0
 800b16a:	b003      	add	sp, #12
 800b16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b172:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b176:	e7ed      	b.n	800b154 <__exponent+0x4c>
 800b178:	2330      	movs	r3, #48	; 0x30
 800b17a:	3130      	adds	r1, #48	; 0x30
 800b17c:	7083      	strb	r3, [r0, #2]
 800b17e:	70c1      	strb	r1, [r0, #3]
 800b180:	1d03      	adds	r3, r0, #4
 800b182:	e7f1      	b.n	800b168 <__exponent+0x60>

0800b184 <_printf_float>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	ed2d 8b02 	vpush	{d8}
 800b18c:	b08d      	sub	sp, #52	; 0x34
 800b18e:	460c      	mov	r4, r1
 800b190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b194:	4616      	mov	r6, r2
 800b196:	461f      	mov	r7, r3
 800b198:	4605      	mov	r5, r0
 800b19a:	f001 fc85 	bl	800caa8 <_localeconv_r>
 800b19e:	f8d0 a000 	ldr.w	sl, [r0]
 800b1a2:	4650      	mov	r0, sl
 800b1a4:	f7f5 f814 	bl	80001d0 <strlen>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	9305      	str	r3, [sp, #20]
 800b1b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	f103 0208 	add.w	r2, r3, #8
 800b1c2:	f8c8 2000 	str.w	r2, [r8]
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1d6:	9307      	str	r3, [sp, #28]
 800b1d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1dc:	ee08 0a10 	vmov	s16, r0
 800b1e0:	4b9f      	ldr	r3, [pc, #636]	; (800b460 <_printf_float+0x2dc>)
 800b1e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	f7f5 fc9f 	bl	8000b2c <__aeabi_dcmpun>
 800b1ee:	bb88      	cbnz	r0, 800b254 <_printf_float+0xd0>
 800b1f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f4:	4b9a      	ldr	r3, [pc, #616]	; (800b460 <_printf_float+0x2dc>)
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	f7f5 fc79 	bl	8000af0 <__aeabi_dcmple>
 800b1fe:	bb48      	cbnz	r0, 800b254 <_printf_float+0xd0>
 800b200:	2200      	movs	r2, #0
 800b202:	2300      	movs	r3, #0
 800b204:	4640      	mov	r0, r8
 800b206:	4649      	mov	r1, r9
 800b208:	f7f5 fc68 	bl	8000adc <__aeabi_dcmplt>
 800b20c:	b110      	cbz	r0, 800b214 <_printf_float+0x90>
 800b20e:	232d      	movs	r3, #45	; 0x2d
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b214:	4b93      	ldr	r3, [pc, #588]	; (800b464 <_printf_float+0x2e0>)
 800b216:	4894      	ldr	r0, [pc, #592]	; (800b468 <_printf_float+0x2e4>)
 800b218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b21c:	bf94      	ite	ls
 800b21e:	4698      	movls	r8, r3
 800b220:	4680      	movhi	r8, r0
 800b222:	2303      	movs	r3, #3
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	f023 0204 	bic.w	r2, r3, #4
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	9700      	str	r7, [sp, #0]
 800b234:	4633      	mov	r3, r6
 800b236:	aa0b      	add	r2, sp, #44	; 0x2c
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f9d8 	bl	800b5f0 <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	f040 8090 	bne.w	800b366 <_printf_float+0x1e2>
 800b246:	f04f 30ff 	mov.w	r0, #4294967295
 800b24a:	b00d      	add	sp, #52	; 0x34
 800b24c:	ecbd 8b02 	vpop	{d8}
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f5 fc66 	bl	8000b2c <__aeabi_dcmpun>
 800b260:	b140      	cbz	r0, 800b274 <_printf_float+0xf0>
 800b262:	464b      	mov	r3, r9
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbc      	itt	lt
 800b268:	232d      	movlt	r3, #45	; 0x2d
 800b26a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b26e:	487f      	ldr	r0, [pc, #508]	; (800b46c <_printf_float+0x2e8>)
 800b270:	4b7f      	ldr	r3, [pc, #508]	; (800b470 <_printf_float+0x2ec>)
 800b272:	e7d1      	b.n	800b218 <_printf_float+0x94>
 800b274:	6863      	ldr	r3, [r4, #4]
 800b276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b27a:	9206      	str	r2, [sp, #24]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	d13f      	bne.n	800b300 <_printf_float+0x17c>
 800b280:	2306      	movs	r3, #6
 800b282:	6063      	str	r3, [r4, #4]
 800b284:	9b05      	ldr	r3, [sp, #20]
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b28c:	2300      	movs	r3, #0
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	ab0a      	add	r3, sp, #40	; 0x28
 800b292:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b296:	ab09      	add	r3, sp, #36	; 0x24
 800b298:	ec49 8b10 	vmov	d0, r8, r9
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f7ff fecd 	bl	800b044 <__cvt>
 800b2aa:	9b06      	ldr	r3, [sp, #24]
 800b2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ae:	2b47      	cmp	r3, #71	; 0x47
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	d108      	bne.n	800b2c6 <_printf_float+0x142>
 800b2b4:	1cc8      	adds	r0, r1, #3
 800b2b6:	db02      	blt.n	800b2be <_printf_float+0x13a>
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	dd41      	ble.n	800b342 <_printf_float+0x1be>
 800b2be:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2c2:	fa5f fb8b 	uxtb.w	fp, fp
 800b2c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2ca:	d820      	bhi.n	800b30e <_printf_float+0x18a>
 800b2cc:	3901      	subs	r1, #1
 800b2ce:	465a      	mov	r2, fp
 800b2d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2d6:	f7ff ff17 	bl	800b108 <__exponent>
 800b2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2dc:	1813      	adds	r3, r2, r0
 800b2de:	2a01      	cmp	r2, #1
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	dc02      	bgt.n	800b2ec <_printf_float+0x168>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	07d2      	lsls	r2, r2, #31
 800b2ea:	d501      	bpl.n	800b2f0 <_printf_float+0x16c>
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d09c      	beq.n	800b232 <_printf_float+0xae>
 800b2f8:	232d      	movs	r3, #45	; 0x2d
 800b2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fe:	e798      	b.n	800b232 <_printf_float+0xae>
 800b300:	9a06      	ldr	r2, [sp, #24]
 800b302:	2a47      	cmp	r2, #71	; 0x47
 800b304:	d1be      	bne.n	800b284 <_printf_float+0x100>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1bc      	bne.n	800b284 <_printf_float+0x100>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7b9      	b.n	800b282 <_printf_float+0xfe>
 800b30e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b312:	d118      	bne.n	800b346 <_printf_float+0x1c2>
 800b314:	2900      	cmp	r1, #0
 800b316:	6863      	ldr	r3, [r4, #4]
 800b318:	dd0b      	ble.n	800b332 <_printf_float+0x1ae>
 800b31a:	6121      	str	r1, [r4, #16]
 800b31c:	b913      	cbnz	r3, 800b324 <_printf_float+0x1a0>
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	07d0      	lsls	r0, r2, #31
 800b322:	d502      	bpl.n	800b32a <_printf_float+0x1a6>
 800b324:	3301      	adds	r3, #1
 800b326:	440b      	add	r3, r1
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b32c:	f04f 0900 	mov.w	r9, #0
 800b330:	e7de      	b.n	800b2f0 <_printf_float+0x16c>
 800b332:	b913      	cbnz	r3, 800b33a <_printf_float+0x1b6>
 800b334:	6822      	ldr	r2, [r4, #0]
 800b336:	07d2      	lsls	r2, r2, #31
 800b338:	d501      	bpl.n	800b33e <_printf_float+0x1ba>
 800b33a:	3302      	adds	r3, #2
 800b33c:	e7f4      	b.n	800b328 <_printf_float+0x1a4>
 800b33e:	2301      	movs	r3, #1
 800b340:	e7f2      	b.n	800b328 <_printf_float+0x1a4>
 800b342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b348:	4299      	cmp	r1, r3
 800b34a:	db05      	blt.n	800b358 <_printf_float+0x1d4>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	6121      	str	r1, [r4, #16]
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d5ea      	bpl.n	800b32a <_printf_float+0x1a6>
 800b354:	1c4b      	adds	r3, r1, #1
 800b356:	e7e7      	b.n	800b328 <_printf_float+0x1a4>
 800b358:	2900      	cmp	r1, #0
 800b35a:	bfd4      	ite	le
 800b35c:	f1c1 0202 	rsble	r2, r1, #2
 800b360:	2201      	movgt	r2, #1
 800b362:	4413      	add	r3, r2
 800b364:	e7e0      	b.n	800b328 <_printf_float+0x1a4>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	055a      	lsls	r2, r3, #21
 800b36a:	d407      	bmi.n	800b37c <_printf_float+0x1f8>
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	4642      	mov	r2, r8
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	d12c      	bne.n	800b3d4 <_printf_float+0x250>
 800b37a:	e764      	b.n	800b246 <_printf_float+0xc2>
 800b37c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b380:	f240 80e0 	bls.w	800b544 <_printf_float+0x3c0>
 800b384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b388:	2200      	movs	r2, #0
 800b38a:	2300      	movs	r3, #0
 800b38c:	f7f5 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b390:	2800      	cmp	r0, #0
 800b392:	d034      	beq.n	800b3fe <_printf_float+0x27a>
 800b394:	4a37      	ldr	r2, [pc, #220]	; (800b474 <_printf_float+0x2f0>)
 800b396:	2301      	movs	r3, #1
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af51 	beq.w	800b246 <_printf_float+0xc2>
 800b3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	db02      	blt.n	800b3b2 <_printf_float+0x22e>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	07d8      	lsls	r0, r3, #31
 800b3b0:	d510      	bpl.n	800b3d4 <_printf_float+0x250>
 800b3b2:	ee18 3a10 	vmov	r3, s16
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af41 	beq.w	800b246 <_printf_float+0xc2>
 800b3c4:	f04f 0800 	mov.w	r8, #0
 800b3c8:	f104 091a 	add.w	r9, r4, #26
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	4543      	cmp	r3, r8
 800b3d2:	dc09      	bgt.n	800b3e8 <_printf_float+0x264>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	079b      	lsls	r3, r3, #30
 800b3d8:	f100 8105 	bmi.w	800b5e6 <_printf_float+0x462>
 800b3dc:	68e0      	ldr	r0, [r4, #12]
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	bfb8      	it	lt
 800b3e4:	4618      	movlt	r0, r3
 800b3e6:	e730      	b.n	800b24a <_printf_float+0xc6>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af27 	beq.w	800b246 <_printf_float+0xc2>
 800b3f8:	f108 0801 	add.w	r8, r8, #1
 800b3fc:	e7e6      	b.n	800b3cc <_printf_float+0x248>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc39      	bgt.n	800b478 <_printf_float+0x2f4>
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <_printf_float+0x2f0>)
 800b406:	2301      	movs	r3, #1
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af19 	beq.w	800b246 <_printf_float+0xc2>
 800b414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b418:	4313      	orrs	r3, r2
 800b41a:	d102      	bne.n	800b422 <_printf_float+0x29e>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d5d8      	bpl.n	800b3d4 <_printf_float+0x250>
 800b422:	ee18 3a10 	vmov	r3, s16
 800b426:	4652      	mov	r2, sl
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af09 	beq.w	800b246 <_printf_float+0xc2>
 800b434:	f04f 0900 	mov.w	r9, #0
 800b438:	f104 0a1a 	add.w	sl, r4, #26
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	425b      	negs	r3, r3
 800b440:	454b      	cmp	r3, r9
 800b442:	dc01      	bgt.n	800b448 <_printf_float+0x2c4>
 800b444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b446:	e792      	b.n	800b36e <_printf_float+0x1ea>
 800b448:	2301      	movs	r3, #1
 800b44a:	4652      	mov	r2, sl
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f aef7 	beq.w	800b246 <_printf_float+0xc2>
 800b458:	f109 0901 	add.w	r9, r9, #1
 800b45c:	e7ee      	b.n	800b43c <_printf_float+0x2b8>
 800b45e:	bf00      	nop
 800b460:	7fefffff 	.word	0x7fefffff
 800b464:	0800e88c 	.word	0x0800e88c
 800b468:	0800e890 	.word	0x0800e890
 800b46c:	0800e898 	.word	0x0800e898
 800b470:	0800e894 	.word	0x0800e894
 800b474:	0800e89c 	.word	0x0800e89c
 800b478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfa8      	it	ge
 800b480:	461a      	movge	r2, r3
 800b482:	2a00      	cmp	r2, #0
 800b484:	4691      	mov	r9, r2
 800b486:	dc37      	bgt.n	800b4f8 <_printf_float+0x374>
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b490:	f104 021a 	add.w	r2, r4, #26
 800b494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	eba3 0309 	sub.w	r3, r3, r9
 800b49c:	455b      	cmp	r3, fp
 800b49e:	dc33      	bgt.n	800b508 <_printf_float+0x384>
 800b4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	db3b      	blt.n	800b520 <_printf_float+0x39c>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d438      	bmi.n	800b520 <_printf_float+0x39c>
 800b4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b0:	9a05      	ldr	r2, [sp, #20]
 800b4b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4b4:	1a9a      	subs	r2, r3, r2
 800b4b6:	eba3 0901 	sub.w	r9, r3, r1
 800b4ba:	4591      	cmp	r9, r2
 800b4bc:	bfa8      	it	ge
 800b4be:	4691      	movge	r9, r2
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	dc35      	bgt.n	800b532 <_printf_float+0x3ae>
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ce:	f104 0a1a 	add.w	sl, r4, #26
 800b4d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	eba3 0309 	sub.w	r3, r3, r9
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	f77f af79 	ble.w	800b3d4 <_printf_float+0x250>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f aeaa 	beq.w	800b246 <_printf_float+0xc2>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	e7ec      	b.n	800b4d2 <_printf_float+0x34e>
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	d1c0      	bne.n	800b488 <_printf_float+0x304>
 800b506:	e69e      	b.n	800b246 <_printf_float+0xc2>
 800b508:	2301      	movs	r3, #1
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	9205      	str	r2, [sp, #20]
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	f43f ae97 	beq.w	800b246 <_printf_float+0xc2>
 800b518:	9a05      	ldr	r2, [sp, #20]
 800b51a:	f10b 0b01 	add.w	fp, fp, #1
 800b51e:	e7b9      	b.n	800b494 <_printf_float+0x310>
 800b520:	ee18 3a10 	vmov	r3, s16
 800b524:	4652      	mov	r2, sl
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1be      	bne.n	800b4ae <_printf_float+0x32a>
 800b530:	e689      	b.n	800b246 <_printf_float+0xc2>
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	464b      	mov	r3, r9
 800b536:	4442      	add	r2, r8
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	d1c1      	bne.n	800b4c6 <_printf_float+0x342>
 800b542:	e680      	b.n	800b246 <_printf_float+0xc2>
 800b544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b546:	2a01      	cmp	r2, #1
 800b548:	dc01      	bgt.n	800b54e <_printf_float+0x3ca>
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d538      	bpl.n	800b5c0 <_printf_float+0x43c>
 800b54e:	2301      	movs	r3, #1
 800b550:	4642      	mov	r2, r8
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae74 	beq.w	800b246 <_printf_float+0xc2>
 800b55e:	ee18 3a10 	vmov	r3, s16
 800b562:	4652      	mov	r2, sl
 800b564:	4631      	mov	r1, r6
 800b566:	4628      	mov	r0, r5
 800b568:	47b8      	blx	r7
 800b56a:	3001      	adds	r0, #1
 800b56c:	f43f ae6b 	beq.w	800b246 <_printf_float+0xc2>
 800b570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	f7f5 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b57c:	b9d8      	cbnz	r0, 800b5b6 <_printf_float+0x432>
 800b57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b580:	f108 0201 	add.w	r2, r8, #1
 800b584:	3b01      	subs	r3, #1
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	d10e      	bne.n	800b5ae <_printf_float+0x42a>
 800b590:	e659      	b.n	800b246 <_printf_float+0xc2>
 800b592:	2301      	movs	r3, #1
 800b594:	4652      	mov	r2, sl
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f ae52 	beq.w	800b246 <_printf_float+0xc2>
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	4543      	cmp	r3, r8
 800b5ac:	dcf1      	bgt.n	800b592 <_printf_float+0x40e>
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5b4:	e6dc      	b.n	800b370 <_printf_float+0x1ec>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	f104 0a1a 	add.w	sl, r4, #26
 800b5be:	e7f2      	b.n	800b5a6 <_printf_float+0x422>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	e7df      	b.n	800b586 <_printf_float+0x402>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	464a      	mov	r2, r9
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae38 	beq.w	800b246 <_printf_float+0xc2>
 800b5d6:	f108 0801 	add.w	r8, r8, #1
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5de:	1a5b      	subs	r3, r3, r1
 800b5e0:	4543      	cmp	r3, r8
 800b5e2:	dcf0      	bgt.n	800b5c6 <_printf_float+0x442>
 800b5e4:	e6fa      	b.n	800b3dc <_printf_float+0x258>
 800b5e6:	f04f 0800 	mov.w	r8, #0
 800b5ea:	f104 0919 	add.w	r9, r4, #25
 800b5ee:	e7f4      	b.n	800b5da <_printf_float+0x456>

0800b5f0 <_printf_common>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	4699      	mov	r9, r3
 800b5f8:	688a      	ldr	r2, [r1, #8]
 800b5fa:	690b      	ldr	r3, [r1, #16]
 800b5fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b600:	4293      	cmp	r3, r2
 800b602:	bfb8      	it	lt
 800b604:	4613      	movlt	r3, r2
 800b606:	6033      	str	r3, [r6, #0]
 800b608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b60c:	4607      	mov	r7, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	b10a      	cbz	r2, 800b616 <_printf_common+0x26>
 800b612:	3301      	adds	r3, #1
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	0699      	lsls	r1, r3, #26
 800b61a:	bf42      	ittt	mi
 800b61c:	6833      	ldrmi	r3, [r6, #0]
 800b61e:	3302      	addmi	r3, #2
 800b620:	6033      	strmi	r3, [r6, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	f015 0506 	ands.w	r5, r5, #6
 800b628:	d106      	bne.n	800b638 <_printf_common+0x48>
 800b62a:	f104 0a19 	add.w	sl, r4, #25
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	6832      	ldr	r2, [r6, #0]
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc26      	bgt.n	800b686 <_printf_common+0x96>
 800b638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b63c:	1e13      	subs	r3, r2, #0
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	2301      	movne	r3, #1
 800b644:	0692      	lsls	r2, r2, #26
 800b646:	d42b      	bmi.n	800b6a0 <_printf_common+0xb0>
 800b648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b64c:	4649      	mov	r1, r9
 800b64e:	4638      	mov	r0, r7
 800b650:	47c0      	blx	r8
 800b652:	3001      	adds	r0, #1
 800b654:	d01e      	beq.n	800b694 <_printf_common+0xa4>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	68e5      	ldr	r5, [r4, #12]
 800b65a:	6832      	ldr	r2, [r6, #0]
 800b65c:	f003 0306 	and.w	r3, r3, #6
 800b660:	2b04      	cmp	r3, #4
 800b662:	bf08      	it	eq
 800b664:	1aad      	subeq	r5, r5, r2
 800b666:	68a3      	ldr	r3, [r4, #8]
 800b668:	6922      	ldr	r2, [r4, #16]
 800b66a:	bf0c      	ite	eq
 800b66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b670:	2500      	movne	r5, #0
 800b672:	4293      	cmp	r3, r2
 800b674:	bfc4      	itt	gt
 800b676:	1a9b      	subgt	r3, r3, r2
 800b678:	18ed      	addgt	r5, r5, r3
 800b67a:	2600      	movs	r6, #0
 800b67c:	341a      	adds	r4, #26
 800b67e:	42b5      	cmp	r5, r6
 800b680:	d11a      	bne.n	800b6b8 <_printf_common+0xc8>
 800b682:	2000      	movs	r0, #0
 800b684:	e008      	b.n	800b698 <_printf_common+0xa8>
 800b686:	2301      	movs	r3, #1
 800b688:	4652      	mov	r2, sl
 800b68a:	4649      	mov	r1, r9
 800b68c:	4638      	mov	r0, r7
 800b68e:	47c0      	blx	r8
 800b690:	3001      	adds	r0, #1
 800b692:	d103      	bne.n	800b69c <_printf_common+0xac>
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69c:	3501      	adds	r5, #1
 800b69e:	e7c6      	b.n	800b62e <_printf_common+0x3e>
 800b6a0:	18e1      	adds	r1, r4, r3
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	2030      	movs	r0, #48	; 0x30
 800b6a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6aa:	4422      	add	r2, r4
 800b6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b4:	3302      	adds	r3, #2
 800b6b6:	e7c7      	b.n	800b648 <_printf_common+0x58>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4638      	mov	r0, r7
 800b6c0:	47c0      	blx	r8
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d0e6      	beq.n	800b694 <_printf_common+0xa4>
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	e7d9      	b.n	800b67e <_printf_common+0x8e>
	...

0800b6cc <_printf_i>:
 800b6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	7e0f      	ldrb	r7, [r1, #24]
 800b6d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d4:	2f78      	cmp	r7, #120	; 0x78
 800b6d6:	4691      	mov	r9, r2
 800b6d8:	4680      	mov	r8, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	469a      	mov	sl, r3
 800b6de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6e2:	d807      	bhi.n	800b6f4 <_printf_i+0x28>
 800b6e4:	2f62      	cmp	r7, #98	; 0x62
 800b6e6:	d80a      	bhi.n	800b6fe <_printf_i+0x32>
 800b6e8:	2f00      	cmp	r7, #0
 800b6ea:	f000 80d8 	beq.w	800b89e <_printf_i+0x1d2>
 800b6ee:	2f58      	cmp	r7, #88	; 0x58
 800b6f0:	f000 80a3 	beq.w	800b83a <_printf_i+0x16e>
 800b6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6fc:	e03a      	b.n	800b774 <_printf_i+0xa8>
 800b6fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b702:	2b15      	cmp	r3, #21
 800b704:	d8f6      	bhi.n	800b6f4 <_printf_i+0x28>
 800b706:	a101      	add	r1, pc, #4	; (adr r1, 800b70c <_printf_i+0x40>)
 800b708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b779 	.word	0x0800b779
 800b714:	0800b6f5 	.word	0x0800b6f5
 800b718:	0800b6f5 	.word	0x0800b6f5
 800b71c:	0800b6f5 	.word	0x0800b6f5
 800b720:	0800b6f5 	.word	0x0800b6f5
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b6f5 	.word	0x0800b6f5
 800b72c:	0800b6f5 	.word	0x0800b6f5
 800b730:	0800b6f5 	.word	0x0800b6f5
 800b734:	0800b6f5 	.word	0x0800b6f5
 800b738:	0800b885 	.word	0x0800b885
 800b73c:	0800b7a9 	.word	0x0800b7a9
 800b740:	0800b867 	.word	0x0800b867
 800b744:	0800b6f5 	.word	0x0800b6f5
 800b748:	0800b6f5 	.word	0x0800b6f5
 800b74c:	0800b8a7 	.word	0x0800b8a7
 800b750:	0800b6f5 	.word	0x0800b6f5
 800b754:	0800b7a9 	.word	0x0800b7a9
 800b758:	0800b6f5 	.word	0x0800b6f5
 800b75c:	0800b6f5 	.word	0x0800b6f5
 800b760:	0800b86f 	.word	0x0800b86f
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b774:	2301      	movs	r3, #1
 800b776:	e0a3      	b.n	800b8c0 <_printf_i+0x1f4>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	6829      	ldr	r1, [r5, #0]
 800b77c:	0606      	lsls	r6, r0, #24
 800b77e:	f101 0304 	add.w	r3, r1, #4
 800b782:	d50a      	bpl.n	800b79a <_printf_i+0xce>
 800b784:	680e      	ldr	r6, [r1, #0]
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	2e00      	cmp	r6, #0
 800b78a:	da03      	bge.n	800b794 <_printf_i+0xc8>
 800b78c:	232d      	movs	r3, #45	; 0x2d
 800b78e:	4276      	negs	r6, r6
 800b790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b794:	485e      	ldr	r0, [pc, #376]	; (800b910 <_printf_i+0x244>)
 800b796:	230a      	movs	r3, #10
 800b798:	e019      	b.n	800b7ce <_printf_i+0x102>
 800b79a:	680e      	ldr	r6, [r1, #0]
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7a2:	bf18      	it	ne
 800b7a4:	b236      	sxthne	r6, r6
 800b7a6:	e7ef      	b.n	800b788 <_printf_i+0xbc>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	6820      	ldr	r0, [r4, #0]
 800b7ac:	1d19      	adds	r1, r3, #4
 800b7ae:	6029      	str	r1, [r5, #0]
 800b7b0:	0601      	lsls	r1, r0, #24
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0xec>
 800b7b4:	681e      	ldr	r6, [r3, #0]
 800b7b6:	e002      	b.n	800b7be <_printf_i+0xf2>
 800b7b8:	0646      	lsls	r6, r0, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0xe8>
 800b7bc:	881e      	ldrh	r6, [r3, #0]
 800b7be:	4854      	ldr	r0, [pc, #336]	; (800b910 <_printf_i+0x244>)
 800b7c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b7c2:	bf0c      	ite	eq
 800b7c4:	2308      	moveq	r3, #8
 800b7c6:	230a      	movne	r3, #10
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ce:	6865      	ldr	r5, [r4, #4]
 800b7d0:	60a5      	str	r5, [r4, #8]
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	bfa2      	ittt	ge
 800b7d6:	6821      	ldrge	r1, [r4, #0]
 800b7d8:	f021 0104 	bicge.w	r1, r1, #4
 800b7dc:	6021      	strge	r1, [r4, #0]
 800b7de:	b90e      	cbnz	r6, 800b7e4 <_printf_i+0x118>
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	d04d      	beq.n	800b880 <_printf_i+0x1b4>
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b7ee:	5dc7      	ldrb	r7, [r0, r7]
 800b7f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f4:	4637      	mov	r7, r6
 800b7f6:	42bb      	cmp	r3, r7
 800b7f8:	460e      	mov	r6, r1
 800b7fa:	d9f4      	bls.n	800b7e6 <_printf_i+0x11a>
 800b7fc:	2b08      	cmp	r3, #8
 800b7fe:	d10b      	bne.n	800b818 <_printf_i+0x14c>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	07de      	lsls	r6, r3, #31
 800b804:	d508      	bpl.n	800b818 <_printf_i+0x14c>
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	6861      	ldr	r1, [r4, #4]
 800b80a:	4299      	cmp	r1, r3
 800b80c:	bfde      	ittt	le
 800b80e:	2330      	movle	r3, #48	; 0x30
 800b810:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b814:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b818:	1b52      	subs	r2, r2, r5
 800b81a:	6122      	str	r2, [r4, #16]
 800b81c:	f8cd a000 	str.w	sl, [sp]
 800b820:	464b      	mov	r3, r9
 800b822:	aa03      	add	r2, sp, #12
 800b824:	4621      	mov	r1, r4
 800b826:	4640      	mov	r0, r8
 800b828:	f7ff fee2 	bl	800b5f0 <_printf_common>
 800b82c:	3001      	adds	r0, #1
 800b82e:	d14c      	bne.n	800b8ca <_printf_i+0x1fe>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	b004      	add	sp, #16
 800b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83a:	4835      	ldr	r0, [pc, #212]	; (800b910 <_printf_i+0x244>)
 800b83c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b840:	6829      	ldr	r1, [r5, #0]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	f851 6b04 	ldr.w	r6, [r1], #4
 800b848:	6029      	str	r1, [r5, #0]
 800b84a:	061d      	lsls	r5, r3, #24
 800b84c:	d514      	bpl.n	800b878 <_printf_i+0x1ac>
 800b84e:	07df      	lsls	r7, r3, #31
 800b850:	bf44      	itt	mi
 800b852:	f043 0320 	orrmi.w	r3, r3, #32
 800b856:	6023      	strmi	r3, [r4, #0]
 800b858:	b91e      	cbnz	r6, 800b862 <_printf_i+0x196>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	f023 0320 	bic.w	r3, r3, #32
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	2310      	movs	r3, #16
 800b864:	e7b0      	b.n	800b7c8 <_printf_i+0xfc>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	f043 0320 	orr.w	r3, r3, #32
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	2378      	movs	r3, #120	; 0x78
 800b870:	4828      	ldr	r0, [pc, #160]	; (800b914 <_printf_i+0x248>)
 800b872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b876:	e7e3      	b.n	800b840 <_printf_i+0x174>
 800b878:	0659      	lsls	r1, r3, #25
 800b87a:	bf48      	it	mi
 800b87c:	b2b6      	uxthmi	r6, r6
 800b87e:	e7e6      	b.n	800b84e <_printf_i+0x182>
 800b880:	4615      	mov	r5, r2
 800b882:	e7bb      	b.n	800b7fc <_printf_i+0x130>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	6826      	ldr	r6, [r4, #0]
 800b888:	6961      	ldr	r1, [r4, #20]
 800b88a:	1d18      	adds	r0, r3, #4
 800b88c:	6028      	str	r0, [r5, #0]
 800b88e:	0635      	lsls	r5, r6, #24
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	d501      	bpl.n	800b898 <_printf_i+0x1cc>
 800b894:	6019      	str	r1, [r3, #0]
 800b896:	e002      	b.n	800b89e <_printf_i+0x1d2>
 800b898:	0670      	lsls	r0, r6, #25
 800b89a:	d5fb      	bpl.n	800b894 <_printf_i+0x1c8>
 800b89c:	8019      	strh	r1, [r3, #0]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	4615      	mov	r5, r2
 800b8a4:	e7ba      	b.n	800b81c <_printf_i+0x150>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	1d1a      	adds	r2, r3, #4
 800b8aa:	602a      	str	r2, [r5, #0]
 800b8ac:	681d      	ldr	r5, [r3, #0]
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f7f4 fc94 	bl	80001e0 <memchr>
 800b8b8:	b108      	cbz	r0, 800b8be <_printf_i+0x1f2>
 800b8ba:	1b40      	subs	r0, r0, r5
 800b8bc:	6060      	str	r0, [r4, #4]
 800b8be:	6863      	ldr	r3, [r4, #4]
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c8:	e7a8      	b.n	800b81c <_printf_i+0x150>
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	47d0      	blx	sl
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d0ab      	beq.n	800b830 <_printf_i+0x164>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	079b      	lsls	r3, r3, #30
 800b8dc:	d413      	bmi.n	800b906 <_printf_i+0x23a>
 800b8de:	68e0      	ldr	r0, [r4, #12]
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	bfb8      	it	lt
 800b8e6:	4618      	movlt	r0, r3
 800b8e8:	e7a4      	b.n	800b834 <_printf_i+0x168>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	47d0      	blx	sl
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d09b      	beq.n	800b830 <_printf_i+0x164>
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	9903      	ldr	r1, [sp, #12]
 800b8fe:	1a5b      	subs	r3, r3, r1
 800b900:	42ab      	cmp	r3, r5
 800b902:	dcf2      	bgt.n	800b8ea <_printf_i+0x21e>
 800b904:	e7eb      	b.n	800b8de <_printf_i+0x212>
 800b906:	2500      	movs	r5, #0
 800b908:	f104 0619 	add.w	r6, r4, #25
 800b90c:	e7f5      	b.n	800b8fa <_printf_i+0x22e>
 800b90e:	bf00      	nop
 800b910:	0800e89e 	.word	0x0800e89e
 800b914:	0800e8af 	.word	0x0800e8af

0800b918 <cleanup_glue>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	460c      	mov	r4, r1
 800b91c:	6809      	ldr	r1, [r1, #0]
 800b91e:	4605      	mov	r5, r0
 800b920:	b109      	cbz	r1, 800b926 <cleanup_glue+0xe>
 800b922:	f7ff fff9 	bl	800b918 <cleanup_glue>
 800b926:	4621      	mov	r1, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92e:	f001 bc7f 	b.w	800d230 <_free_r>
	...

0800b934 <_reclaim_reent>:
 800b934:	4b2c      	ldr	r3, [pc, #176]	; (800b9e8 <_reclaim_reent+0xb4>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4283      	cmp	r3, r0
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	d051      	beq.n	800b9e4 <_reclaim_reent+0xb0>
 800b940:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b942:	b143      	cbz	r3, 800b956 <_reclaim_reent+0x22>
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d14a      	bne.n	800b9e0 <_reclaim_reent+0xac>
 800b94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b94c:	6819      	ldr	r1, [r3, #0]
 800b94e:	b111      	cbz	r1, 800b956 <_reclaim_reent+0x22>
 800b950:	4620      	mov	r0, r4
 800b952:	f001 fc6d 	bl	800d230 <_free_r>
 800b956:	6961      	ldr	r1, [r4, #20]
 800b958:	b111      	cbz	r1, 800b960 <_reclaim_reent+0x2c>
 800b95a:	4620      	mov	r0, r4
 800b95c:	f001 fc68 	bl	800d230 <_free_r>
 800b960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b962:	b111      	cbz	r1, 800b96a <_reclaim_reent+0x36>
 800b964:	4620      	mov	r0, r4
 800b966:	f001 fc63 	bl	800d230 <_free_r>
 800b96a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b96c:	b111      	cbz	r1, 800b974 <_reclaim_reent+0x40>
 800b96e:	4620      	mov	r0, r4
 800b970:	f001 fc5e 	bl	800d230 <_free_r>
 800b974:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b976:	b111      	cbz	r1, 800b97e <_reclaim_reent+0x4a>
 800b978:	4620      	mov	r0, r4
 800b97a:	f001 fc59 	bl	800d230 <_free_r>
 800b97e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b980:	b111      	cbz	r1, 800b988 <_reclaim_reent+0x54>
 800b982:	4620      	mov	r0, r4
 800b984:	f001 fc54 	bl	800d230 <_free_r>
 800b988:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b98a:	b111      	cbz	r1, 800b992 <_reclaim_reent+0x5e>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 fc4f 	bl	800d230 <_free_r>
 800b992:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b994:	b111      	cbz	r1, 800b99c <_reclaim_reent+0x68>
 800b996:	4620      	mov	r0, r4
 800b998:	f001 fc4a 	bl	800d230 <_free_r>
 800b99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b99e:	b111      	cbz	r1, 800b9a6 <_reclaim_reent+0x72>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f001 fc45 	bl	800d230 <_free_r>
 800b9a6:	69a3      	ldr	r3, [r4, #24]
 800b9a8:	b1e3      	cbz	r3, 800b9e4 <_reclaim_reent+0xb0>
 800b9aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4798      	blx	r3
 800b9b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b9b2:	b1b9      	cbz	r1, 800b9e4 <_reclaim_reent+0xb0>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9ba:	f7ff bfad 	b.w	800b918 <cleanup_glue>
 800b9be:	5949      	ldr	r1, [r1, r5]
 800b9c0:	b941      	cbnz	r1, 800b9d4 <_reclaim_reent+0xa0>
 800b9c2:	3504      	adds	r5, #4
 800b9c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9c6:	2d80      	cmp	r5, #128	; 0x80
 800b9c8:	68d9      	ldr	r1, [r3, #12]
 800b9ca:	d1f8      	bne.n	800b9be <_reclaim_reent+0x8a>
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f001 fc2f 	bl	800d230 <_free_r>
 800b9d2:	e7ba      	b.n	800b94a <_reclaim_reent+0x16>
 800b9d4:	680e      	ldr	r6, [r1, #0]
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f001 fc2a 	bl	800d230 <_free_r>
 800b9dc:	4631      	mov	r1, r6
 800b9de:	e7ef      	b.n	800b9c0 <_reclaim_reent+0x8c>
 800b9e0:	2500      	movs	r5, #0
 800b9e2:	e7ef      	b.n	800b9c4 <_reclaim_reent+0x90>
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000034 	.word	0x20000034

0800b9ec <_sbrk_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4d06      	ldr	r5, [pc, #24]	; (800ba08 <_sbrk_r+0x1c>)
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	f7f7 fa1e 	bl	8002e38 <_sbrk>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_sbrk_r+0x1a>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_sbrk_r+0x1a>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	2000542c 	.word	0x2000542c

0800ba0c <siprintf>:
 800ba0c:	b40e      	push	{r1, r2, r3}
 800ba0e:	b500      	push	{lr}
 800ba10:	b09c      	sub	sp, #112	; 0x70
 800ba12:	ab1d      	add	r3, sp, #116	; 0x74
 800ba14:	9002      	str	r0, [sp, #8]
 800ba16:	9006      	str	r0, [sp, #24]
 800ba18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba1c:	4809      	ldr	r0, [pc, #36]	; (800ba44 <siprintf+0x38>)
 800ba1e:	9107      	str	r1, [sp, #28]
 800ba20:	9104      	str	r1, [sp, #16]
 800ba22:	4909      	ldr	r1, [pc, #36]	; (800ba48 <siprintf+0x3c>)
 800ba24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba28:	9105      	str	r1, [sp, #20]
 800ba2a:	6800      	ldr	r0, [r0, #0]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	a902      	add	r1, sp, #8
 800ba30:	f001 fca6 	bl	800d380 <_svfiprintf_r>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	b01c      	add	sp, #112	; 0x70
 800ba3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba40:	b003      	add	sp, #12
 800ba42:	4770      	bx	lr
 800ba44:	20000034 	.word	0x20000034
 800ba48:	ffff0208 	.word	0xffff0208

0800ba4c <__sread>:
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba54:	f001 fd94 	bl	800d580 <_read_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	bfab      	itete	ge
 800ba5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba60:	181b      	addge	r3, r3, r0
 800ba62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba66:	bfac      	ite	ge
 800ba68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba6a:	81a3      	strhlt	r3, [r4, #12]
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <__swrite>:
 800ba6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	461f      	mov	r7, r3
 800ba74:	898b      	ldrh	r3, [r1, #12]
 800ba76:	05db      	lsls	r3, r3, #23
 800ba78:	4605      	mov	r5, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	d505      	bpl.n	800ba8c <__swrite+0x1e>
 800ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba84:	2302      	movs	r3, #2
 800ba86:	2200      	movs	r2, #0
 800ba88:	f001 f812 	bl	800cab0 <_lseek_r>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	4632      	mov	r2, r6
 800ba9a:	463b      	mov	r3, r7
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa2:	f000 b8a3 	b.w	800bbec <_write_r>

0800baa6 <__sseek>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baae:	f000 ffff 	bl	800cab0 <_lseek_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	bf15      	itete	ne
 800bab8:	6560      	strne	r0, [r4, #84]	; 0x54
 800baba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800babe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bac2:	81a3      	strheq	r3, [r4, #12]
 800bac4:	bf18      	it	ne
 800bac6:	81a3      	strhne	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__sclose>:
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 b89f 	b.w	800bc10 <_close_r>
	...

0800bad4 <_strtol_l.constprop.0>:
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bada:	d001      	beq.n	800bae0 <_strtol_l.constprop.0+0xc>
 800badc:	2b24      	cmp	r3, #36	; 0x24
 800bade:	d906      	bls.n	800baee <_strtol_l.constprop.0+0x1a>
 800bae0:	f7ff f8e2 	bl	800aca8 <__errno>
 800bae4:	2316      	movs	r3, #22
 800bae6:	6003      	str	r3, [r0, #0]
 800bae8:	2000      	movs	r0, #0
 800baea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bbd4 <_strtol_l.constprop.0+0x100>
 800baf2:	460d      	mov	r5, r1
 800baf4:	462e      	mov	r6, r5
 800baf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bafa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bafe:	f017 0708 	ands.w	r7, r7, #8
 800bb02:	d1f7      	bne.n	800baf4 <_strtol_l.constprop.0+0x20>
 800bb04:	2c2d      	cmp	r4, #45	; 0x2d
 800bb06:	d132      	bne.n	800bb6e <_strtol_l.constprop.0+0x9a>
 800bb08:	782c      	ldrb	r4, [r5, #0]
 800bb0a:	2701      	movs	r7, #1
 800bb0c:	1cb5      	adds	r5, r6, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d05b      	beq.n	800bbca <_strtol_l.constprop.0+0xf6>
 800bb12:	2b10      	cmp	r3, #16
 800bb14:	d109      	bne.n	800bb2a <_strtol_l.constprop.0+0x56>
 800bb16:	2c30      	cmp	r4, #48	; 0x30
 800bb18:	d107      	bne.n	800bb2a <_strtol_l.constprop.0+0x56>
 800bb1a:	782c      	ldrb	r4, [r5, #0]
 800bb1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb20:	2c58      	cmp	r4, #88	; 0x58
 800bb22:	d14d      	bne.n	800bbc0 <_strtol_l.constprop.0+0xec>
 800bb24:	786c      	ldrb	r4, [r5, #1]
 800bb26:	2310      	movs	r3, #16
 800bb28:	3502      	adds	r5, #2
 800bb2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb32:	f04f 0c00 	mov.w	ip, #0
 800bb36:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb3a:	4666      	mov	r6, ip
 800bb3c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb44:	f1be 0f09 	cmp.w	lr, #9
 800bb48:	d816      	bhi.n	800bb78 <_strtol_l.constprop.0+0xa4>
 800bb4a:	4674      	mov	r4, lr
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	dd24      	ble.n	800bb9a <_strtol_l.constprop.0+0xc6>
 800bb50:	f1bc 0f00 	cmp.w	ip, #0
 800bb54:	db1e      	blt.n	800bb94 <_strtol_l.constprop.0+0xc0>
 800bb56:	45b1      	cmp	r9, r6
 800bb58:	d31c      	bcc.n	800bb94 <_strtol_l.constprop.0+0xc0>
 800bb5a:	d101      	bne.n	800bb60 <_strtol_l.constprop.0+0x8c>
 800bb5c:	45a2      	cmp	sl, r4
 800bb5e:	db19      	blt.n	800bb94 <_strtol_l.constprop.0+0xc0>
 800bb60:	fb06 4603 	mla	r6, r6, r3, r4
 800bb64:	f04f 0c01 	mov.w	ip, #1
 800bb68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb6c:	e7e8      	b.n	800bb40 <_strtol_l.constprop.0+0x6c>
 800bb6e:	2c2b      	cmp	r4, #43	; 0x2b
 800bb70:	bf04      	itt	eq
 800bb72:	782c      	ldrbeq	r4, [r5, #0]
 800bb74:	1cb5      	addeq	r5, r6, #2
 800bb76:	e7ca      	b.n	800bb0e <_strtol_l.constprop.0+0x3a>
 800bb78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bb7c:	f1be 0f19 	cmp.w	lr, #25
 800bb80:	d801      	bhi.n	800bb86 <_strtol_l.constprop.0+0xb2>
 800bb82:	3c37      	subs	r4, #55	; 0x37
 800bb84:	e7e2      	b.n	800bb4c <_strtol_l.constprop.0+0x78>
 800bb86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb8a:	f1be 0f19 	cmp.w	lr, #25
 800bb8e:	d804      	bhi.n	800bb9a <_strtol_l.constprop.0+0xc6>
 800bb90:	3c57      	subs	r4, #87	; 0x57
 800bb92:	e7db      	b.n	800bb4c <_strtol_l.constprop.0+0x78>
 800bb94:	f04f 3cff 	mov.w	ip, #4294967295
 800bb98:	e7e6      	b.n	800bb68 <_strtol_l.constprop.0+0x94>
 800bb9a:	f1bc 0f00 	cmp.w	ip, #0
 800bb9e:	da05      	bge.n	800bbac <_strtol_l.constprop.0+0xd8>
 800bba0:	2322      	movs	r3, #34	; 0x22
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	4646      	mov	r6, r8
 800bba6:	b942      	cbnz	r2, 800bbba <_strtol_l.constprop.0+0xe6>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	e79e      	b.n	800baea <_strtol_l.constprop.0+0x16>
 800bbac:	b107      	cbz	r7, 800bbb0 <_strtol_l.constprop.0+0xdc>
 800bbae:	4276      	negs	r6, r6
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	d0f9      	beq.n	800bba8 <_strtol_l.constprop.0+0xd4>
 800bbb4:	f1bc 0f00 	cmp.w	ip, #0
 800bbb8:	d000      	beq.n	800bbbc <_strtol_l.constprop.0+0xe8>
 800bbba:	1e69      	subs	r1, r5, #1
 800bbbc:	6011      	str	r1, [r2, #0]
 800bbbe:	e7f3      	b.n	800bba8 <_strtol_l.constprop.0+0xd4>
 800bbc0:	2430      	movs	r4, #48	; 0x30
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1b1      	bne.n	800bb2a <_strtol_l.constprop.0+0x56>
 800bbc6:	2308      	movs	r3, #8
 800bbc8:	e7af      	b.n	800bb2a <_strtol_l.constprop.0+0x56>
 800bbca:	2c30      	cmp	r4, #48	; 0x30
 800bbcc:	d0a5      	beq.n	800bb1a <_strtol_l.constprop.0+0x46>
 800bbce:	230a      	movs	r3, #10
 800bbd0:	e7ab      	b.n	800bb2a <_strtol_l.constprop.0+0x56>
 800bbd2:	bf00      	nop
 800bbd4:	0800e8c1 	.word	0x0800e8c1

0800bbd8 <strtol>:
 800bbd8:	4613      	mov	r3, r2
 800bbda:	460a      	mov	r2, r1
 800bbdc:	4601      	mov	r1, r0
 800bbde:	4802      	ldr	r0, [pc, #8]	; (800bbe8 <strtol+0x10>)
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	f7ff bf77 	b.w	800bad4 <_strtol_l.constprop.0>
 800bbe6:	bf00      	nop
 800bbe8:	20000034 	.word	0x20000034

0800bbec <_write_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4d07      	ldr	r5, [pc, #28]	; (800bc0c <_write_r+0x20>)
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	4608      	mov	r0, r1
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	602a      	str	r2, [r5, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f7f7 f8cb 	bl	8002d96 <_write>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d102      	bne.n	800bc0a <_write_r+0x1e>
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	b103      	cbz	r3, 800bc0a <_write_r+0x1e>
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	bd38      	pop	{r3, r4, r5, pc}
 800bc0c:	2000542c 	.word	0x2000542c

0800bc10 <_close_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4d06      	ldr	r5, [pc, #24]	; (800bc2c <_close_r+0x1c>)
 800bc14:	2300      	movs	r3, #0
 800bc16:	4604      	mov	r4, r0
 800bc18:	4608      	mov	r0, r1
 800bc1a:	602b      	str	r3, [r5, #0]
 800bc1c:	f7f7 f8d7 	bl	8002dce <_close>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d102      	bne.n	800bc2a <_close_r+0x1a>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	b103      	cbz	r3, 800bc2a <_close_r+0x1a>
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	2000542c 	.word	0x2000542c

0800bc30 <quorem>:
 800bc30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	6903      	ldr	r3, [r0, #16]
 800bc36:	690c      	ldr	r4, [r1, #16]
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	f2c0 8081 	blt.w	800bd42 <quorem+0x112>
 800bc40:	3c01      	subs	r4, #1
 800bc42:	f101 0814 	add.w	r8, r1, #20
 800bc46:	f100 0514 	add.w	r5, r0, #20
 800bc4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc64:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc68:	d331      	bcc.n	800bcce <quorem+0x9e>
 800bc6a:	f04f 0e00 	mov.w	lr, #0
 800bc6e:	4640      	mov	r0, r8
 800bc70:	46ac      	mov	ip, r5
 800bc72:	46f2      	mov	sl, lr
 800bc74:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc78:	b293      	uxth	r3, r2
 800bc7a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	ebaa 0303 	sub.w	r3, sl, r3
 800bc88:	f8dc a000 	ldr.w	sl, [ip]
 800bc8c:	0c12      	lsrs	r2, r2, #16
 800bc8e:	fa13 f38a 	uxtah	r3, r3, sl
 800bc92:	fb06 e202 	mla	r2, r6, r2, lr
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	9b00      	ldr	r3, [sp, #0]
 800bc9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bca8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bcac:	4581      	cmp	r9, r0
 800bcae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcb2:	f84c 3b04 	str.w	r3, [ip], #4
 800bcb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcba:	d2db      	bcs.n	800bc74 <quorem+0x44>
 800bcbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bcc0:	b92b      	cbnz	r3, 800bcce <quorem+0x9e>
 800bcc2:	9b01      	ldr	r3, [sp, #4]
 800bcc4:	3b04      	subs	r3, #4
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	d32e      	bcc.n	800bd2a <quorem+0xfa>
 800bccc:	613c      	str	r4, [r7, #16]
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f001 f996 	bl	800d000 <__mcmp>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	db24      	blt.n	800bd22 <quorem+0xf2>
 800bcd8:	3601      	adds	r6, #1
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f04f 0c00 	mov.w	ip, #0
 800bce0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bce4:	f8d0 e000 	ldr.w	lr, [r0]
 800bce8:	b293      	uxth	r3, r2
 800bcea:	ebac 0303 	sub.w	r3, ip, r3
 800bcee:	0c12      	lsrs	r2, r2, #16
 800bcf0:	fa13 f38e 	uxtah	r3, r3, lr
 800bcf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd02:	45c1      	cmp	r9, r8
 800bd04:	f840 3b04 	str.w	r3, [r0], #4
 800bd08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd0c:	d2e8      	bcs.n	800bce0 <quorem+0xb0>
 800bd0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd16:	b922      	cbnz	r2, 800bd22 <quorem+0xf2>
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	429d      	cmp	r5, r3
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	d30a      	bcc.n	800bd36 <quorem+0x106>
 800bd20:	613c      	str	r4, [r7, #16]
 800bd22:	4630      	mov	r0, r6
 800bd24:	b003      	add	sp, #12
 800bd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2a:	6812      	ldr	r2, [r2, #0]
 800bd2c:	3b04      	subs	r3, #4
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	d1cc      	bne.n	800bccc <quorem+0x9c>
 800bd32:	3c01      	subs	r4, #1
 800bd34:	e7c7      	b.n	800bcc6 <quorem+0x96>
 800bd36:	6812      	ldr	r2, [r2, #0]
 800bd38:	3b04      	subs	r3, #4
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	d1f0      	bne.n	800bd20 <quorem+0xf0>
 800bd3e:	3c01      	subs	r4, #1
 800bd40:	e7eb      	b.n	800bd1a <quorem+0xea>
 800bd42:	2000      	movs	r0, #0
 800bd44:	e7ee      	b.n	800bd24 <quorem+0xf4>
	...

0800bd48 <_dtoa_r>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ed2d 8b04 	vpush	{d8-d9}
 800bd50:	ec57 6b10 	vmov	r6, r7, d0
 800bd54:	b093      	sub	sp, #76	; 0x4c
 800bd56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd5c:	9106      	str	r1, [sp, #24]
 800bd5e:	ee10 aa10 	vmov	sl, s0
 800bd62:	4604      	mov	r4, r0
 800bd64:	9209      	str	r2, [sp, #36]	; 0x24
 800bd66:	930c      	str	r3, [sp, #48]	; 0x30
 800bd68:	46bb      	mov	fp, r7
 800bd6a:	b975      	cbnz	r5, 800bd8a <_dtoa_r+0x42>
 800bd6c:	2010      	movs	r0, #16
 800bd6e:	f000 feb1 	bl	800cad4 <malloc>
 800bd72:	4602      	mov	r2, r0
 800bd74:	6260      	str	r0, [r4, #36]	; 0x24
 800bd76:	b920      	cbnz	r0, 800bd82 <_dtoa_r+0x3a>
 800bd78:	4ba7      	ldr	r3, [pc, #668]	; (800c018 <_dtoa_r+0x2d0>)
 800bd7a:	21ea      	movs	r1, #234	; 0xea
 800bd7c:	48a7      	ldr	r0, [pc, #668]	; (800c01c <_dtoa_r+0x2d4>)
 800bd7e:	f001 fc11 	bl	800d5a4 <__assert_func>
 800bd82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd86:	6005      	str	r5, [r0, #0]
 800bd88:	60c5      	str	r5, [r0, #12]
 800bd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8c:	6819      	ldr	r1, [r3, #0]
 800bd8e:	b151      	cbz	r1, 800bda6 <_dtoa_r+0x5e>
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	604a      	str	r2, [r1, #4]
 800bd94:	2301      	movs	r3, #1
 800bd96:	4093      	lsls	r3, r2
 800bd98:	608b      	str	r3, [r1, #8]
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 feee 	bl	800cb7c <_Bfree>
 800bda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	1e3b      	subs	r3, r7, #0
 800bda8:	bfaa      	itet	ge
 800bdaa:	2300      	movge	r3, #0
 800bdac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bdb0:	f8c8 3000 	strge.w	r3, [r8]
 800bdb4:	4b9a      	ldr	r3, [pc, #616]	; (800c020 <_dtoa_r+0x2d8>)
 800bdb6:	bfbc      	itt	lt
 800bdb8:	2201      	movlt	r2, #1
 800bdba:	f8c8 2000 	strlt.w	r2, [r8]
 800bdbe:	ea33 030b 	bics.w	r3, r3, fp
 800bdc2:	d11b      	bne.n	800bdfc <_dtoa_r+0xb4>
 800bdc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdd0:	4333      	orrs	r3, r6
 800bdd2:	f000 8592 	beq.w	800c8fa <_dtoa_r+0xbb2>
 800bdd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd8:	b963      	cbnz	r3, 800bdf4 <_dtoa_r+0xac>
 800bdda:	4b92      	ldr	r3, [pc, #584]	; (800c024 <_dtoa_r+0x2dc>)
 800bddc:	e022      	b.n	800be24 <_dtoa_r+0xdc>
 800bdde:	4b92      	ldr	r3, [pc, #584]	; (800c028 <_dtoa_r+0x2e0>)
 800bde0:	9301      	str	r3, [sp, #4]
 800bde2:	3308      	adds	r3, #8
 800bde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	9801      	ldr	r0, [sp, #4]
 800bdea:	b013      	add	sp, #76	; 0x4c
 800bdec:	ecbd 8b04 	vpop	{d8-d9}
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	4b8b      	ldr	r3, [pc, #556]	; (800c024 <_dtoa_r+0x2dc>)
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	3303      	adds	r3, #3
 800bdfa:	e7f3      	b.n	800bde4 <_dtoa_r+0x9c>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2300      	movs	r3, #0
 800be00:	4650      	mov	r0, sl
 800be02:	4659      	mov	r1, fp
 800be04:	f7f4 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800be08:	ec4b ab19 	vmov	d9, sl, fp
 800be0c:	4680      	mov	r8, r0
 800be0e:	b158      	cbz	r0, 800be28 <_dtoa_r+0xe0>
 800be10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be12:	2301      	movs	r3, #1
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 856b 	beq.w	800c8f4 <_dtoa_r+0xbac>
 800be1e:	4883      	ldr	r0, [pc, #524]	; (800c02c <_dtoa_r+0x2e4>)
 800be20:	6018      	str	r0, [r3, #0]
 800be22:	1e43      	subs	r3, r0, #1
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	e7df      	b.n	800bde8 <_dtoa_r+0xa0>
 800be28:	ec4b ab10 	vmov	d0, sl, fp
 800be2c:	aa10      	add	r2, sp, #64	; 0x40
 800be2e:	a911      	add	r1, sp, #68	; 0x44
 800be30:	4620      	mov	r0, r4
 800be32:	f001 f98b 	bl	800d14c <__d2b>
 800be36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be3a:	ee08 0a10 	vmov	s16, r0
 800be3e:	2d00      	cmp	r5, #0
 800be40:	f000 8084 	beq.w	800bf4c <_dtoa_r+0x204>
 800be44:	ee19 3a90 	vmov	r3, s19
 800be48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be50:	4656      	mov	r6, sl
 800be52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be5e:	4b74      	ldr	r3, [pc, #464]	; (800c030 <_dtoa_r+0x2e8>)
 800be60:	2200      	movs	r2, #0
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 fa0f 	bl	8000288 <__aeabi_dsub>
 800be6a:	a365      	add	r3, pc, #404	; (adr r3, 800c000 <_dtoa_r+0x2b8>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fbc2 	bl	80005f8 <__aeabi_dmul>
 800be74:	a364      	add	r3, pc, #400	; (adr r3, 800c008 <_dtoa_r+0x2c0>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f7f4 fa07 	bl	800028c <__adddf3>
 800be7e:	4606      	mov	r6, r0
 800be80:	4628      	mov	r0, r5
 800be82:	460f      	mov	r7, r1
 800be84:	f7f4 fb4e 	bl	8000524 <__aeabi_i2d>
 800be88:	a361      	add	r3, pc, #388	; (adr r3, 800c010 <_dtoa_r+0x2c8>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f9f7 	bl	800028c <__adddf3>
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	f7f4 fe59 	bl	8000b58 <__aeabi_d2iz>
 800bea6:	2200      	movs	r2, #0
 800bea8:	9000      	str	r0, [sp, #0]
 800beaa:	2300      	movs	r3, #0
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	f7f4 fe14 	bl	8000adc <__aeabi_dcmplt>
 800beb4:	b150      	cbz	r0, 800becc <_dtoa_r+0x184>
 800beb6:	9800      	ldr	r0, [sp, #0]
 800beb8:	f7f4 fb34 	bl	8000524 <__aeabi_i2d>
 800bebc:	4632      	mov	r2, r6
 800bebe:	463b      	mov	r3, r7
 800bec0:	f7f4 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec4:	b910      	cbnz	r0, 800becc <_dtoa_r+0x184>
 800bec6:	9b00      	ldr	r3, [sp, #0]
 800bec8:	3b01      	subs	r3, #1
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	9b00      	ldr	r3, [sp, #0]
 800bece:	2b16      	cmp	r3, #22
 800bed0:	d85a      	bhi.n	800bf88 <_dtoa_r+0x240>
 800bed2:	9a00      	ldr	r2, [sp, #0]
 800bed4:	4b57      	ldr	r3, [pc, #348]	; (800c034 <_dtoa_r+0x2ec>)
 800bed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	ec51 0b19 	vmov	r0, r1, d9
 800bee2:	f7f4 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d050      	beq.n	800bf8c <_dtoa_r+0x244>
 800beea:	9b00      	ldr	r3, [sp, #0]
 800beec:	3b01      	subs	r3, #1
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	2300      	movs	r3, #0
 800bef2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bef6:	1b5d      	subs	r5, r3, r5
 800bef8:	1e6b      	subs	r3, r5, #1
 800befa:	9305      	str	r3, [sp, #20]
 800befc:	bf45      	ittet	mi
 800befe:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf02:	9304      	strmi	r3, [sp, #16]
 800bf04:	2300      	movpl	r3, #0
 800bf06:	2300      	movmi	r3, #0
 800bf08:	bf4c      	ite	mi
 800bf0a:	9305      	strmi	r3, [sp, #20]
 800bf0c:	9304      	strpl	r3, [sp, #16]
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	db3d      	blt.n	800bf90 <_dtoa_r+0x248>
 800bf14:	9b05      	ldr	r3, [sp, #20]
 800bf16:	9a00      	ldr	r2, [sp, #0]
 800bf18:	920a      	str	r2, [sp, #40]	; 0x28
 800bf1a:	4413      	add	r3, r2
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	f200 8089 	bhi.w	800c03c <_dtoa_r+0x2f4>
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	bfc4      	itt	gt
 800bf2e:	3b04      	subgt	r3, #4
 800bf30:	9306      	strgt	r3, [sp, #24]
 800bf32:	9b06      	ldr	r3, [sp, #24]
 800bf34:	f1a3 0302 	sub.w	r3, r3, #2
 800bf38:	bfcc      	ite	gt
 800bf3a:	2500      	movgt	r5, #0
 800bf3c:	2501      	movle	r5, #1
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	f200 8087 	bhi.w	800c052 <_dtoa_r+0x30a>
 800bf44:	e8df f003 	tbb	[pc, r3]
 800bf48:	59383a2d 	.word	0x59383a2d
 800bf4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf50:	441d      	add	r5, r3
 800bf52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf56:	2b20      	cmp	r3, #32
 800bf58:	bfc1      	itttt	gt
 800bf5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf62:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf6a:	bfda      	itte	le
 800bf6c:	f1c3 0320 	rsble	r3, r3, #32
 800bf70:	fa06 f003 	lslle.w	r0, r6, r3
 800bf74:	4318      	orrgt	r0, r3
 800bf76:	f7f4 fac5 	bl	8000504 <__aeabi_ui2d>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf82:	3d01      	subs	r5, #1
 800bf84:	930e      	str	r3, [sp, #56]	; 0x38
 800bf86:	e76a      	b.n	800be5e <_dtoa_r+0x116>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e7b2      	b.n	800bef2 <_dtoa_r+0x1aa>
 800bf8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf8e:	e7b1      	b.n	800bef4 <_dtoa_r+0x1ac>
 800bf90:	9b04      	ldr	r3, [sp, #16]
 800bf92:	9a00      	ldr	r2, [sp, #0]
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	4253      	negs	r3, r2
 800bf9a:	9307      	str	r3, [sp, #28]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa0:	e7bf      	b.n	800bf22 <_dtoa_r+0x1da>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9308      	str	r3, [sp, #32]
 800bfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dc55      	bgt.n	800c058 <_dtoa_r+0x310>
 800bfac:	2301      	movs	r3, #1
 800bfae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfb6:	e00c      	b.n	800bfd2 <_dtoa_r+0x28a>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e7f3      	b.n	800bfa4 <_dtoa_r+0x25c>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc0:	9308      	str	r3, [sp, #32]
 800bfc2:	9b00      	ldr	r3, [sp, #0]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	9302      	str	r3, [sp, #8]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	9303      	str	r3, [sp, #12]
 800bfce:	bfb8      	it	lt
 800bfd0:	2301      	movlt	r3, #1
 800bfd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	6042      	str	r2, [r0, #4]
 800bfd8:	2204      	movs	r2, #4
 800bfda:	f102 0614 	add.w	r6, r2, #20
 800bfde:	429e      	cmp	r6, r3
 800bfe0:	6841      	ldr	r1, [r0, #4]
 800bfe2:	d93d      	bls.n	800c060 <_dtoa_r+0x318>
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 fd89 	bl	800cafc <_Balloc>
 800bfea:	9001      	str	r0, [sp, #4]
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d13b      	bne.n	800c068 <_dtoa_r+0x320>
 800bff0:	4b11      	ldr	r3, [pc, #68]	; (800c038 <_dtoa_r+0x2f0>)
 800bff2:	4602      	mov	r2, r0
 800bff4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bff8:	e6c0      	b.n	800bd7c <_dtoa_r+0x34>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e7df      	b.n	800bfbe <_dtoa_r+0x276>
 800bffe:	bf00      	nop
 800c000:	636f4361 	.word	0x636f4361
 800c004:	3fd287a7 	.word	0x3fd287a7
 800c008:	8b60c8b3 	.word	0x8b60c8b3
 800c00c:	3fc68a28 	.word	0x3fc68a28
 800c010:	509f79fb 	.word	0x509f79fb
 800c014:	3fd34413 	.word	0x3fd34413
 800c018:	0800e9ce 	.word	0x0800e9ce
 800c01c:	0800e9e5 	.word	0x0800e9e5
 800c020:	7ff00000 	.word	0x7ff00000
 800c024:	0800e9ca 	.word	0x0800e9ca
 800c028:	0800e9c1 	.word	0x0800e9c1
 800c02c:	0800e89d 	.word	0x0800e89d
 800c030:	3ff80000 	.word	0x3ff80000
 800c034:	0800ead8 	.word	0x0800ead8
 800c038:	0800ea40 	.word	0x0800ea40
 800c03c:	2501      	movs	r5, #1
 800c03e:	2300      	movs	r3, #0
 800c040:	9306      	str	r3, [sp, #24]
 800c042:	9508      	str	r5, [sp, #32]
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c04c:	2200      	movs	r2, #0
 800c04e:	2312      	movs	r3, #18
 800c050:	e7b0      	b.n	800bfb4 <_dtoa_r+0x26c>
 800c052:	2301      	movs	r3, #1
 800c054:	9308      	str	r3, [sp, #32]
 800c056:	e7f5      	b.n	800c044 <_dtoa_r+0x2fc>
 800c058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c05a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c05e:	e7b8      	b.n	800bfd2 <_dtoa_r+0x28a>
 800c060:	3101      	adds	r1, #1
 800c062:	6041      	str	r1, [r0, #4]
 800c064:	0052      	lsls	r2, r2, #1
 800c066:	e7b8      	b.n	800bfda <_dtoa_r+0x292>
 800c068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c06a:	9a01      	ldr	r2, [sp, #4]
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	9b03      	ldr	r3, [sp, #12]
 800c070:	2b0e      	cmp	r3, #14
 800c072:	f200 809d 	bhi.w	800c1b0 <_dtoa_r+0x468>
 800c076:	2d00      	cmp	r5, #0
 800c078:	f000 809a 	beq.w	800c1b0 <_dtoa_r+0x468>
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dd32      	ble.n	800c0e8 <_dtoa_r+0x3a0>
 800c082:	4ab7      	ldr	r2, [pc, #732]	; (800c360 <_dtoa_r+0x618>)
 800c084:	f003 030f 	and.w	r3, r3, #15
 800c088:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c08c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c090:	9b00      	ldr	r3, [sp, #0]
 800c092:	05d8      	lsls	r0, r3, #23
 800c094:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c098:	d516      	bpl.n	800c0c8 <_dtoa_r+0x380>
 800c09a:	4bb2      	ldr	r3, [pc, #712]	; (800c364 <_dtoa_r+0x61c>)
 800c09c:	ec51 0b19 	vmov	r0, r1, d9
 800c0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0a4:	f7f4 fbd2 	bl	800084c <__aeabi_ddiv>
 800c0a8:	f007 070f 	and.w	r7, r7, #15
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	468b      	mov	fp, r1
 800c0b0:	2503      	movs	r5, #3
 800c0b2:	4eac      	ldr	r6, [pc, #688]	; (800c364 <_dtoa_r+0x61c>)
 800c0b4:	b957      	cbnz	r7, 800c0cc <_dtoa_r+0x384>
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	464b      	mov	r3, r9
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	4659      	mov	r1, fp
 800c0be:	f7f4 fbc5 	bl	800084c <__aeabi_ddiv>
 800c0c2:	4682      	mov	sl, r0
 800c0c4:	468b      	mov	fp, r1
 800c0c6:	e028      	b.n	800c11a <_dtoa_r+0x3d2>
 800c0c8:	2502      	movs	r5, #2
 800c0ca:	e7f2      	b.n	800c0b2 <_dtoa_r+0x36a>
 800c0cc:	07f9      	lsls	r1, r7, #31
 800c0ce:	d508      	bpl.n	800c0e2 <_dtoa_r+0x39a>
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0d8:	f7f4 fa8e 	bl	80005f8 <__aeabi_dmul>
 800c0dc:	3501      	adds	r5, #1
 800c0de:	4680      	mov	r8, r0
 800c0e0:	4689      	mov	r9, r1
 800c0e2:	107f      	asrs	r7, r7, #1
 800c0e4:	3608      	adds	r6, #8
 800c0e6:	e7e5      	b.n	800c0b4 <_dtoa_r+0x36c>
 800c0e8:	f000 809b 	beq.w	800c222 <_dtoa_r+0x4da>
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	4f9d      	ldr	r7, [pc, #628]	; (800c364 <_dtoa_r+0x61c>)
 800c0f0:	425e      	negs	r6, r3
 800c0f2:	4b9b      	ldr	r3, [pc, #620]	; (800c360 <_dtoa_r+0x618>)
 800c0f4:	f006 020f 	and.w	r2, r6, #15
 800c0f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	ec51 0b19 	vmov	r0, r1, d9
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	1136      	asrs	r6, r6, #4
 800c10a:	4682      	mov	sl, r0
 800c10c:	468b      	mov	fp, r1
 800c10e:	2300      	movs	r3, #0
 800c110:	2502      	movs	r5, #2
 800c112:	2e00      	cmp	r6, #0
 800c114:	d17a      	bne.n	800c20c <_dtoa_r+0x4c4>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1d3      	bne.n	800c0c2 <_dtoa_r+0x37a>
 800c11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8082 	beq.w	800c226 <_dtoa_r+0x4de>
 800c122:	4b91      	ldr	r3, [pc, #580]	; (800c368 <_dtoa_r+0x620>)
 800c124:	2200      	movs	r2, #0
 800c126:	4650      	mov	r0, sl
 800c128:	4659      	mov	r1, fp
 800c12a:	f7f4 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d079      	beq.n	800c226 <_dtoa_r+0x4de>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d076      	beq.n	800c226 <_dtoa_r+0x4de>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dd36      	ble.n	800c1ac <_dtoa_r+0x464>
 800c13e:	9b00      	ldr	r3, [sp, #0]
 800c140:	4650      	mov	r0, sl
 800c142:	4659      	mov	r1, fp
 800c144:	1e5f      	subs	r7, r3, #1
 800c146:	2200      	movs	r2, #0
 800c148:	4b88      	ldr	r3, [pc, #544]	; (800c36c <_dtoa_r+0x624>)
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	9e02      	ldr	r6, [sp, #8]
 800c150:	4682      	mov	sl, r0
 800c152:	468b      	mov	fp, r1
 800c154:	3501      	adds	r5, #1
 800c156:	4628      	mov	r0, r5
 800c158:	f7f4 f9e4 	bl	8000524 <__aeabi_i2d>
 800c15c:	4652      	mov	r2, sl
 800c15e:	465b      	mov	r3, fp
 800c160:	f7f4 fa4a 	bl	80005f8 <__aeabi_dmul>
 800c164:	4b82      	ldr	r3, [pc, #520]	; (800c370 <_dtoa_r+0x628>)
 800c166:	2200      	movs	r2, #0
 800c168:	f7f4 f890 	bl	800028c <__adddf3>
 800c16c:	46d0      	mov	r8, sl
 800c16e:	46d9      	mov	r9, fp
 800c170:	4682      	mov	sl, r0
 800c172:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c176:	2e00      	cmp	r6, #0
 800c178:	d158      	bne.n	800c22c <_dtoa_r+0x4e4>
 800c17a:	4b7e      	ldr	r3, [pc, #504]	; (800c374 <_dtoa_r+0x62c>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 f881 	bl	8000288 <__aeabi_dsub>
 800c186:	4652      	mov	r2, sl
 800c188:	465b      	mov	r3, fp
 800c18a:	4680      	mov	r8, r0
 800c18c:	4689      	mov	r9, r1
 800c18e:	f7f4 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 800c192:	2800      	cmp	r0, #0
 800c194:	f040 8295 	bne.w	800c6c2 <_dtoa_r+0x97a>
 800c198:	4652      	mov	r2, sl
 800c19a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f040 8289 	bne.w	800c6be <_dtoa_r+0x976>
 800c1ac:	ec5b ab19 	vmov	sl, fp, d9
 800c1b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f2c0 8148 	blt.w	800c448 <_dtoa_r+0x700>
 800c1b8:	9a00      	ldr	r2, [sp, #0]
 800c1ba:	2a0e      	cmp	r2, #14
 800c1bc:	f300 8144 	bgt.w	800c448 <_dtoa_r+0x700>
 800c1c0:	4b67      	ldr	r3, [pc, #412]	; (800c360 <_dtoa_r+0x618>)
 800c1c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f280 80d5 	bge.w	800c37c <_dtoa_r+0x634>
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f300 80d1 	bgt.w	800c37c <_dtoa_r+0x634>
 800c1da:	f040 826f 	bne.w	800c6bc <_dtoa_r+0x974>
 800c1de:	4b65      	ldr	r3, [pc, #404]	; (800c374 <_dtoa_r+0x62c>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	f7f4 fa07 	bl	80005f8 <__aeabi_dmul>
 800c1ea:	4652      	mov	r2, sl
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	f7f4 fc89 	bl	8000b04 <__aeabi_dcmpge>
 800c1f2:	9e03      	ldr	r6, [sp, #12]
 800c1f4:	4637      	mov	r7, r6
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f040 8245 	bne.w	800c686 <_dtoa_r+0x93e>
 800c1fc:	9d01      	ldr	r5, [sp, #4]
 800c1fe:	2331      	movs	r3, #49	; 0x31
 800c200:	f805 3b01 	strb.w	r3, [r5], #1
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	e240      	b.n	800c68e <_dtoa_r+0x946>
 800c20c:	07f2      	lsls	r2, r6, #31
 800c20e:	d505      	bpl.n	800c21c <_dtoa_r+0x4d4>
 800c210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c214:	f7f4 f9f0 	bl	80005f8 <__aeabi_dmul>
 800c218:	3501      	adds	r5, #1
 800c21a:	2301      	movs	r3, #1
 800c21c:	1076      	asrs	r6, r6, #1
 800c21e:	3708      	adds	r7, #8
 800c220:	e777      	b.n	800c112 <_dtoa_r+0x3ca>
 800c222:	2502      	movs	r5, #2
 800c224:	e779      	b.n	800c11a <_dtoa_r+0x3d2>
 800c226:	9f00      	ldr	r7, [sp, #0]
 800c228:	9e03      	ldr	r6, [sp, #12]
 800c22a:	e794      	b.n	800c156 <_dtoa_r+0x40e>
 800c22c:	9901      	ldr	r1, [sp, #4]
 800c22e:	4b4c      	ldr	r3, [pc, #304]	; (800c360 <_dtoa_r+0x618>)
 800c230:	4431      	add	r1, r6
 800c232:	910d      	str	r1, [sp, #52]	; 0x34
 800c234:	9908      	ldr	r1, [sp, #32]
 800c236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c23a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c23e:	2900      	cmp	r1, #0
 800c240:	d043      	beq.n	800c2ca <_dtoa_r+0x582>
 800c242:	494d      	ldr	r1, [pc, #308]	; (800c378 <_dtoa_r+0x630>)
 800c244:	2000      	movs	r0, #0
 800c246:	f7f4 fb01 	bl	800084c <__aeabi_ddiv>
 800c24a:	4652      	mov	r2, sl
 800c24c:	465b      	mov	r3, fp
 800c24e:	f7f4 f81b 	bl	8000288 <__aeabi_dsub>
 800c252:	9d01      	ldr	r5, [sp, #4]
 800c254:	4682      	mov	sl, r0
 800c256:	468b      	mov	fp, r1
 800c258:	4649      	mov	r1, r9
 800c25a:	4640      	mov	r0, r8
 800c25c:	f7f4 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800c260:	4606      	mov	r6, r0
 800c262:	f7f4 f95f 	bl	8000524 <__aeabi_i2d>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f80b 	bl	8000288 <__aeabi_dsub>
 800c272:	3630      	adds	r6, #48	; 0x30
 800c274:	f805 6b01 	strb.w	r6, [r5], #1
 800c278:	4652      	mov	r2, sl
 800c27a:	465b      	mov	r3, fp
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	f7f4 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800c284:	2800      	cmp	r0, #0
 800c286:	d163      	bne.n	800c350 <_dtoa_r+0x608>
 800c288:	4642      	mov	r2, r8
 800c28a:	464b      	mov	r3, r9
 800c28c:	4936      	ldr	r1, [pc, #216]	; (800c368 <_dtoa_r+0x620>)
 800c28e:	2000      	movs	r0, #0
 800c290:	f7f3 fffa 	bl	8000288 <__aeabi_dsub>
 800c294:	4652      	mov	r2, sl
 800c296:	465b      	mov	r3, fp
 800c298:	f7f4 fc20 	bl	8000adc <__aeabi_dcmplt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	f040 80b5 	bne.w	800c40c <_dtoa_r+0x6c4>
 800c2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a4:	429d      	cmp	r5, r3
 800c2a6:	d081      	beq.n	800c1ac <_dtoa_r+0x464>
 800c2a8:	4b30      	ldr	r3, [pc, #192]	; (800c36c <_dtoa_r+0x624>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	4659      	mov	r1, fp
 800c2b0:	f7f4 f9a2 	bl	80005f8 <__aeabi_dmul>
 800c2b4:	4b2d      	ldr	r3, [pc, #180]	; (800c36c <_dtoa_r+0x624>)
 800c2b6:	4682      	mov	sl, r0
 800c2b8:	468b      	mov	fp, r1
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	4649      	mov	r1, r9
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	4689      	mov	r9, r1
 800c2c8:	e7c6      	b.n	800c258 <_dtoa_r+0x510>
 800c2ca:	4650      	mov	r0, sl
 800c2cc:	4659      	mov	r1, fp
 800c2ce:	f7f4 f993 	bl	80005f8 <__aeabi_dmul>
 800c2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d4:	9d01      	ldr	r5, [sp, #4]
 800c2d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d8:	4682      	mov	sl, r0
 800c2da:	468b      	mov	fp, r1
 800c2dc:	4649      	mov	r1, r9
 800c2de:	4640      	mov	r0, r8
 800c2e0:	f7f4 fc3a 	bl	8000b58 <__aeabi_d2iz>
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	f7f4 f91d 	bl	8000524 <__aeabi_i2d>
 800c2ea:	3630      	adds	r6, #48	; 0x30
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f3 ffc8 	bl	8000288 <__aeabi_dsub>
 800c2f8:	f805 6b01 	strb.w	r6, [r5], #1
 800c2fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2fe:	429d      	cmp	r5, r3
 800c300:	4680      	mov	r8, r0
 800c302:	4689      	mov	r9, r1
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	d124      	bne.n	800c354 <_dtoa_r+0x60c>
 800c30a:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <_dtoa_r+0x630>)
 800c30c:	4650      	mov	r0, sl
 800c30e:	4659      	mov	r1, fp
 800c310:	f7f3 ffbc 	bl	800028c <__adddf3>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f4 fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 800c320:	2800      	cmp	r0, #0
 800c322:	d173      	bne.n	800c40c <_dtoa_r+0x6c4>
 800c324:	4652      	mov	r2, sl
 800c326:	465b      	mov	r3, fp
 800c328:	4913      	ldr	r1, [pc, #76]	; (800c378 <_dtoa_r+0x630>)
 800c32a:	2000      	movs	r0, #0
 800c32c:	f7f3 ffac 	bl	8000288 <__aeabi_dsub>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4640      	mov	r0, r8
 800c336:	4649      	mov	r1, r9
 800c338:	f7f4 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f43f af35 	beq.w	800c1ac <_dtoa_r+0x464>
 800c342:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c344:	1e6b      	subs	r3, r5, #1
 800c346:	930f      	str	r3, [sp, #60]	; 0x3c
 800c348:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c34c:	2b30      	cmp	r3, #48	; 0x30
 800c34e:	d0f8      	beq.n	800c342 <_dtoa_r+0x5fa>
 800c350:	9700      	str	r7, [sp, #0]
 800c352:	e049      	b.n	800c3e8 <_dtoa_r+0x6a0>
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <_dtoa_r+0x624>)
 800c356:	f7f4 f94f 	bl	80005f8 <__aeabi_dmul>
 800c35a:	4680      	mov	r8, r0
 800c35c:	4689      	mov	r9, r1
 800c35e:	e7bd      	b.n	800c2dc <_dtoa_r+0x594>
 800c360:	0800ead8 	.word	0x0800ead8
 800c364:	0800eab0 	.word	0x0800eab0
 800c368:	3ff00000 	.word	0x3ff00000
 800c36c:	40240000 	.word	0x40240000
 800c370:	401c0000 	.word	0x401c0000
 800c374:	40140000 	.word	0x40140000
 800c378:	3fe00000 	.word	0x3fe00000
 800c37c:	9d01      	ldr	r5, [sp, #4]
 800c37e:	4656      	mov	r6, sl
 800c380:	465f      	mov	r7, fp
 800c382:	4642      	mov	r2, r8
 800c384:	464b      	mov	r3, r9
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	f7f4 fa5f 	bl	800084c <__aeabi_ddiv>
 800c38e:	f7f4 fbe3 	bl	8000b58 <__aeabi_d2iz>
 800c392:	4682      	mov	sl, r0
 800c394:	f7f4 f8c6 	bl	8000524 <__aeabi_i2d>
 800c398:	4642      	mov	r2, r8
 800c39a:	464b      	mov	r3, r9
 800c39c:	f7f4 f92c 	bl	80005f8 <__aeabi_dmul>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c3ac:	f7f3 ff6c 	bl	8000288 <__aeabi_dsub>
 800c3b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c3b4:	9e01      	ldr	r6, [sp, #4]
 800c3b6:	9f03      	ldr	r7, [sp, #12]
 800c3b8:	1bae      	subs	r6, r5, r6
 800c3ba:	42b7      	cmp	r7, r6
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	d135      	bne.n	800c42e <_dtoa_r+0x6e6>
 800c3c2:	f7f3 ff63 	bl	800028c <__adddf3>
 800c3c6:	4642      	mov	r2, r8
 800c3c8:	464b      	mov	r3, r9
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	f7f4 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 800c3d2:	b9d0      	cbnz	r0, 800c40a <_dtoa_r+0x6c2>
 800c3d4:	4642      	mov	r2, r8
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e0:	b110      	cbz	r0, 800c3e8 <_dtoa_r+0x6a0>
 800c3e2:	f01a 0f01 	tst.w	sl, #1
 800c3e6:	d110      	bne.n	800c40a <_dtoa_r+0x6c2>
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	ee18 1a10 	vmov	r1, s16
 800c3ee:	f000 fbc5 	bl	800cb7c <_Bfree>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9800      	ldr	r0, [sp, #0]
 800c3f6:	702b      	strb	r3, [r5, #0]
 800c3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	6018      	str	r0, [r3, #0]
 800c3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c400:	2b00      	cmp	r3, #0
 800c402:	f43f acf1 	beq.w	800bde8 <_dtoa_r+0xa0>
 800c406:	601d      	str	r5, [r3, #0]
 800c408:	e4ee      	b.n	800bde8 <_dtoa_r+0xa0>
 800c40a:	9f00      	ldr	r7, [sp, #0]
 800c40c:	462b      	mov	r3, r5
 800c40e:	461d      	mov	r5, r3
 800c410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c414:	2a39      	cmp	r2, #57	; 0x39
 800c416:	d106      	bne.n	800c426 <_dtoa_r+0x6de>
 800c418:	9a01      	ldr	r2, [sp, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d1f7      	bne.n	800c40e <_dtoa_r+0x6c6>
 800c41e:	9901      	ldr	r1, [sp, #4]
 800c420:	2230      	movs	r2, #48	; 0x30
 800c422:	3701      	adds	r7, #1
 800c424:	700a      	strb	r2, [r1, #0]
 800c426:	781a      	ldrb	r2, [r3, #0]
 800c428:	3201      	adds	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	e790      	b.n	800c350 <_dtoa_r+0x608>
 800c42e:	4ba6      	ldr	r3, [pc, #664]	; (800c6c8 <_dtoa_r+0x980>)
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f8e1 	bl	80005f8 <__aeabi_dmul>
 800c436:	2200      	movs	r2, #0
 800c438:	2300      	movs	r3, #0
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	f7f4 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c442:	2800      	cmp	r0, #0
 800c444:	d09d      	beq.n	800c382 <_dtoa_r+0x63a>
 800c446:	e7cf      	b.n	800c3e8 <_dtoa_r+0x6a0>
 800c448:	9a08      	ldr	r2, [sp, #32]
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	f000 80d7 	beq.w	800c5fe <_dtoa_r+0x8b6>
 800c450:	9a06      	ldr	r2, [sp, #24]
 800c452:	2a01      	cmp	r2, #1
 800c454:	f300 80ba 	bgt.w	800c5cc <_dtoa_r+0x884>
 800c458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	f000 80b2 	beq.w	800c5c4 <_dtoa_r+0x87c>
 800c460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c464:	9e07      	ldr	r6, [sp, #28]
 800c466:	9d04      	ldr	r5, [sp, #16]
 800c468:	9a04      	ldr	r2, [sp, #16]
 800c46a:	441a      	add	r2, r3
 800c46c:	9204      	str	r2, [sp, #16]
 800c46e:	9a05      	ldr	r2, [sp, #20]
 800c470:	2101      	movs	r1, #1
 800c472:	441a      	add	r2, r3
 800c474:	4620      	mov	r0, r4
 800c476:	9205      	str	r2, [sp, #20]
 800c478:	f000 fc38 	bl	800ccec <__i2b>
 800c47c:	4607      	mov	r7, r0
 800c47e:	2d00      	cmp	r5, #0
 800c480:	dd0c      	ble.n	800c49c <_dtoa_r+0x754>
 800c482:	9b05      	ldr	r3, [sp, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	dd09      	ble.n	800c49c <_dtoa_r+0x754>
 800c488:	42ab      	cmp	r3, r5
 800c48a:	9a04      	ldr	r2, [sp, #16]
 800c48c:	bfa8      	it	ge
 800c48e:	462b      	movge	r3, r5
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	9204      	str	r2, [sp, #16]
 800c494:	9a05      	ldr	r2, [sp, #20]
 800c496:	1aed      	subs	r5, r5, r3
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	9b07      	ldr	r3, [sp, #28]
 800c49e:	b31b      	cbz	r3, 800c4e8 <_dtoa_r+0x7a0>
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80af 	beq.w	800c606 <_dtoa_r+0x8be>
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	dd13      	ble.n	800c4d4 <_dtoa_r+0x78c>
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fcdb 	bl	800ce6c <__pow5mult>
 800c4b6:	ee18 2a10 	vmov	r2, s16
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	4607      	mov	r7, r0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 fc2a 	bl	800cd18 <__multiply>
 800c4c4:	ee18 1a10 	vmov	r1, s16
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fb56 	bl	800cb7c <_Bfree>
 800c4d0:	ee08 8a10 	vmov	s16, r8
 800c4d4:	9b07      	ldr	r3, [sp, #28]
 800c4d6:	1b9a      	subs	r2, r3, r6
 800c4d8:	d006      	beq.n	800c4e8 <_dtoa_r+0x7a0>
 800c4da:	ee18 1a10 	vmov	r1, s16
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fcc4 	bl	800ce6c <__pow5mult>
 800c4e4:	ee08 0a10 	vmov	s16, r0
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fbfe 	bl	800ccec <__i2b>
 800c4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	f340 8088 	ble.w	800c60a <_dtoa_r+0x8c2>
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	4601      	mov	r1, r0
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 fcb4 	bl	800ce6c <__pow5mult>
 800c504:	9b06      	ldr	r3, [sp, #24]
 800c506:	2b01      	cmp	r3, #1
 800c508:	4606      	mov	r6, r0
 800c50a:	f340 8081 	ble.w	800c610 <_dtoa_r+0x8c8>
 800c50e:	f04f 0800 	mov.w	r8, #0
 800c512:	6933      	ldr	r3, [r6, #16]
 800c514:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c518:	6918      	ldr	r0, [r3, #16]
 800c51a:	f000 fb97 	bl	800cc4c <__hi0bits>
 800c51e:	f1c0 0020 	rsb	r0, r0, #32
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	4418      	add	r0, r3
 800c526:	f010 001f 	ands.w	r0, r0, #31
 800c52a:	f000 8092 	beq.w	800c652 <_dtoa_r+0x90a>
 800c52e:	f1c0 0320 	rsb	r3, r0, #32
 800c532:	2b04      	cmp	r3, #4
 800c534:	f340 808a 	ble.w	800c64c <_dtoa_r+0x904>
 800c538:	f1c0 001c 	rsb	r0, r0, #28
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	4403      	add	r3, r0
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	4403      	add	r3, r0
 800c546:	4405      	add	r5, r0
 800c548:	9305      	str	r3, [sp, #20]
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dd07      	ble.n	800c560 <_dtoa_r+0x818>
 800c550:	ee18 1a10 	vmov	r1, s16
 800c554:	461a      	mov	r2, r3
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fce2 	bl	800cf20 <__lshift>
 800c55c:	ee08 0a10 	vmov	s16, r0
 800c560:	9b05      	ldr	r3, [sp, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	dd05      	ble.n	800c572 <_dtoa_r+0x82a>
 800c566:	4631      	mov	r1, r6
 800c568:	461a      	mov	r2, r3
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fcd8 	bl	800cf20 <__lshift>
 800c570:	4606      	mov	r6, r0
 800c572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c574:	2b00      	cmp	r3, #0
 800c576:	d06e      	beq.n	800c656 <_dtoa_r+0x90e>
 800c578:	ee18 0a10 	vmov	r0, s16
 800c57c:	4631      	mov	r1, r6
 800c57e:	f000 fd3f 	bl	800d000 <__mcmp>
 800c582:	2800      	cmp	r0, #0
 800c584:	da67      	bge.n	800c656 <_dtoa_r+0x90e>
 800c586:	9b00      	ldr	r3, [sp, #0]
 800c588:	3b01      	subs	r3, #1
 800c58a:	ee18 1a10 	vmov	r1, s16
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	220a      	movs	r2, #10
 800c592:	2300      	movs	r3, #0
 800c594:	4620      	mov	r0, r4
 800c596:	f000 fb13 	bl	800cbc0 <__multadd>
 800c59a:	9b08      	ldr	r3, [sp, #32]
 800c59c:	ee08 0a10 	vmov	s16, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 81b1 	beq.w	800c908 <_dtoa_r+0xbc0>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	220a      	movs	r2, #10
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 fb07 	bl	800cbc0 <__multadd>
 800c5b2:	9b02      	ldr	r3, [sp, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	f300 808e 	bgt.w	800c6d8 <_dtoa_r+0x990>
 800c5bc:	9b06      	ldr	r3, [sp, #24]
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	dc51      	bgt.n	800c666 <_dtoa_r+0x91e>
 800c5c2:	e089      	b.n	800c6d8 <_dtoa_r+0x990>
 800c5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5ca:	e74b      	b.n	800c464 <_dtoa_r+0x71c>
 800c5cc:	9b03      	ldr	r3, [sp, #12]
 800c5ce:	1e5e      	subs	r6, r3, #1
 800c5d0:	9b07      	ldr	r3, [sp, #28]
 800c5d2:	42b3      	cmp	r3, r6
 800c5d4:	bfbf      	itttt	lt
 800c5d6:	9b07      	ldrlt	r3, [sp, #28]
 800c5d8:	9607      	strlt	r6, [sp, #28]
 800c5da:	1af2      	sublt	r2, r6, r3
 800c5dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5de:	bfb6      	itet	lt
 800c5e0:	189b      	addlt	r3, r3, r2
 800c5e2:	1b9e      	subge	r6, r3, r6
 800c5e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	bfb8      	it	lt
 800c5ea:	2600      	movlt	r6, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfb7      	itett	lt
 800c5f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5f8:	1a9d      	sublt	r5, r3, r2
 800c5fa:	2300      	movlt	r3, #0
 800c5fc:	e734      	b.n	800c468 <_dtoa_r+0x720>
 800c5fe:	9e07      	ldr	r6, [sp, #28]
 800c600:	9d04      	ldr	r5, [sp, #16]
 800c602:	9f08      	ldr	r7, [sp, #32]
 800c604:	e73b      	b.n	800c47e <_dtoa_r+0x736>
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	e767      	b.n	800c4da <_dtoa_r+0x792>
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	dc18      	bgt.n	800c642 <_dtoa_r+0x8fa>
 800c610:	f1ba 0f00 	cmp.w	sl, #0
 800c614:	d115      	bne.n	800c642 <_dtoa_r+0x8fa>
 800c616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c61a:	b993      	cbnz	r3, 800c642 <_dtoa_r+0x8fa>
 800c61c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c620:	0d1b      	lsrs	r3, r3, #20
 800c622:	051b      	lsls	r3, r3, #20
 800c624:	b183      	cbz	r3, 800c648 <_dtoa_r+0x900>
 800c626:	9b04      	ldr	r3, [sp, #16]
 800c628:	3301      	adds	r3, #1
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	9b05      	ldr	r3, [sp, #20]
 800c62e:	3301      	adds	r3, #1
 800c630:	9305      	str	r3, [sp, #20]
 800c632:	f04f 0801 	mov.w	r8, #1
 800c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f47f af6a 	bne.w	800c512 <_dtoa_r+0x7ca>
 800c63e:	2001      	movs	r0, #1
 800c640:	e76f      	b.n	800c522 <_dtoa_r+0x7da>
 800c642:	f04f 0800 	mov.w	r8, #0
 800c646:	e7f6      	b.n	800c636 <_dtoa_r+0x8ee>
 800c648:	4698      	mov	r8, r3
 800c64a:	e7f4      	b.n	800c636 <_dtoa_r+0x8ee>
 800c64c:	f43f af7d 	beq.w	800c54a <_dtoa_r+0x802>
 800c650:	4618      	mov	r0, r3
 800c652:	301c      	adds	r0, #28
 800c654:	e772      	b.n	800c53c <_dtoa_r+0x7f4>
 800c656:	9b03      	ldr	r3, [sp, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dc37      	bgt.n	800c6cc <_dtoa_r+0x984>
 800c65c:	9b06      	ldr	r3, [sp, #24]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	dd34      	ble.n	800c6cc <_dtoa_r+0x984>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	9b02      	ldr	r3, [sp, #8]
 800c668:	b96b      	cbnz	r3, 800c686 <_dtoa_r+0x93e>
 800c66a:	4631      	mov	r1, r6
 800c66c:	2205      	movs	r2, #5
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 faa6 	bl	800cbc0 <__multadd>
 800c674:	4601      	mov	r1, r0
 800c676:	4606      	mov	r6, r0
 800c678:	ee18 0a10 	vmov	r0, s16
 800c67c:	f000 fcc0 	bl	800d000 <__mcmp>
 800c680:	2800      	cmp	r0, #0
 800c682:	f73f adbb 	bgt.w	800c1fc <_dtoa_r+0x4b4>
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	9d01      	ldr	r5, [sp, #4]
 800c68a:	43db      	mvns	r3, r3
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	f04f 0800 	mov.w	r8, #0
 800c692:	4631      	mov	r1, r6
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fa71 	bl	800cb7c <_Bfree>
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	f43f aea4 	beq.w	800c3e8 <_dtoa_r+0x6a0>
 800c6a0:	f1b8 0f00 	cmp.w	r8, #0
 800c6a4:	d005      	beq.n	800c6b2 <_dtoa_r+0x96a>
 800c6a6:	45b8      	cmp	r8, r7
 800c6a8:	d003      	beq.n	800c6b2 <_dtoa_r+0x96a>
 800c6aa:	4641      	mov	r1, r8
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f000 fa65 	bl	800cb7c <_Bfree>
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 fa61 	bl	800cb7c <_Bfree>
 800c6ba:	e695      	b.n	800c3e8 <_dtoa_r+0x6a0>
 800c6bc:	2600      	movs	r6, #0
 800c6be:	4637      	mov	r7, r6
 800c6c0:	e7e1      	b.n	800c686 <_dtoa_r+0x93e>
 800c6c2:	9700      	str	r7, [sp, #0]
 800c6c4:	4637      	mov	r7, r6
 800c6c6:	e599      	b.n	800c1fc <_dtoa_r+0x4b4>
 800c6c8:	40240000 	.word	0x40240000
 800c6cc:	9b08      	ldr	r3, [sp, #32]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 80ca 	beq.w	800c868 <_dtoa_r+0xb20>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	9302      	str	r3, [sp, #8]
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	dd05      	ble.n	800c6e8 <_dtoa_r+0x9a0>
 800c6dc:	4639      	mov	r1, r7
 800c6de:	462a      	mov	r2, r5
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fc1d 	bl	800cf20 <__lshift>
 800c6e6:	4607      	mov	r7, r0
 800c6e8:	f1b8 0f00 	cmp.w	r8, #0
 800c6ec:	d05b      	beq.n	800c7a6 <_dtoa_r+0xa5e>
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 fa03 	bl	800cafc <_Balloc>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	b928      	cbnz	r0, 800c706 <_dtoa_r+0x9be>
 800c6fa:	4b87      	ldr	r3, [pc, #540]	; (800c918 <_dtoa_r+0xbd0>)
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c702:	f7ff bb3b 	b.w	800bd7c <_dtoa_r+0x34>
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	3202      	adds	r2, #2
 800c70a:	0092      	lsls	r2, r2, #2
 800c70c:	f107 010c 	add.w	r1, r7, #12
 800c710:	300c      	adds	r0, #12
 800c712:	f7fe fbec 	bl	800aeee <memcpy>
 800c716:	2201      	movs	r2, #1
 800c718:	4629      	mov	r1, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 fc00 	bl	800cf20 <__lshift>
 800c720:	9b01      	ldr	r3, [sp, #4]
 800c722:	f103 0901 	add.w	r9, r3, #1
 800c726:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c72a:	4413      	add	r3, r2
 800c72c:	9305      	str	r3, [sp, #20]
 800c72e:	f00a 0301 	and.w	r3, sl, #1
 800c732:	46b8      	mov	r8, r7
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	4607      	mov	r7, r0
 800c738:	4631      	mov	r1, r6
 800c73a:	ee18 0a10 	vmov	r0, s16
 800c73e:	f7ff fa77 	bl	800bc30 <quorem>
 800c742:	4641      	mov	r1, r8
 800c744:	9002      	str	r0, [sp, #8]
 800c746:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c74a:	ee18 0a10 	vmov	r0, s16
 800c74e:	f000 fc57 	bl	800d000 <__mcmp>
 800c752:	463a      	mov	r2, r7
 800c754:	9003      	str	r0, [sp, #12]
 800c756:	4631      	mov	r1, r6
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fc6d 	bl	800d038 <__mdiff>
 800c75e:	68c2      	ldr	r2, [r0, #12]
 800c760:	f109 3bff 	add.w	fp, r9, #4294967295
 800c764:	4605      	mov	r5, r0
 800c766:	bb02      	cbnz	r2, 800c7aa <_dtoa_r+0xa62>
 800c768:	4601      	mov	r1, r0
 800c76a:	ee18 0a10 	vmov	r0, s16
 800c76e:	f000 fc47 	bl	800d000 <__mcmp>
 800c772:	4602      	mov	r2, r0
 800c774:	4629      	mov	r1, r5
 800c776:	4620      	mov	r0, r4
 800c778:	9207      	str	r2, [sp, #28]
 800c77a:	f000 f9ff 	bl	800cb7c <_Bfree>
 800c77e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c782:	ea43 0102 	orr.w	r1, r3, r2
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	430b      	orrs	r3, r1
 800c78a:	464d      	mov	r5, r9
 800c78c:	d10f      	bne.n	800c7ae <_dtoa_r+0xa66>
 800c78e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c792:	d02a      	beq.n	800c7ea <_dtoa_r+0xaa2>
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	dd02      	ble.n	800c7a0 <_dtoa_r+0xa58>
 800c79a:	9b02      	ldr	r3, [sp, #8]
 800c79c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c7a0:	f88b a000 	strb.w	sl, [fp]
 800c7a4:	e775      	b.n	800c692 <_dtoa_r+0x94a>
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	e7ba      	b.n	800c720 <_dtoa_r+0x9d8>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	e7e2      	b.n	800c774 <_dtoa_r+0xa2c>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	db04      	blt.n	800c7be <_dtoa_r+0xa76>
 800c7b4:	9906      	ldr	r1, [sp, #24]
 800c7b6:	430b      	orrs	r3, r1
 800c7b8:	9904      	ldr	r1, [sp, #16]
 800c7ba:	430b      	orrs	r3, r1
 800c7bc:	d122      	bne.n	800c804 <_dtoa_r+0xabc>
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	ddee      	ble.n	800c7a0 <_dtoa_r+0xa58>
 800c7c2:	ee18 1a10 	vmov	r1, s16
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f000 fba9 	bl	800cf20 <__lshift>
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	ee08 0a10 	vmov	s16, r0
 800c7d4:	f000 fc14 	bl	800d000 <__mcmp>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	dc03      	bgt.n	800c7e4 <_dtoa_r+0xa9c>
 800c7dc:	d1e0      	bne.n	800c7a0 <_dtoa_r+0xa58>
 800c7de:	f01a 0f01 	tst.w	sl, #1
 800c7e2:	d0dd      	beq.n	800c7a0 <_dtoa_r+0xa58>
 800c7e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7e8:	d1d7      	bne.n	800c79a <_dtoa_r+0xa52>
 800c7ea:	2339      	movs	r3, #57	; 0x39
 800c7ec:	f88b 3000 	strb.w	r3, [fp]
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	461d      	mov	r5, r3
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7fa:	2a39      	cmp	r2, #57	; 0x39
 800c7fc:	d071      	beq.n	800c8e2 <_dtoa_r+0xb9a>
 800c7fe:	3201      	adds	r2, #1
 800c800:	701a      	strb	r2, [r3, #0]
 800c802:	e746      	b.n	800c692 <_dtoa_r+0x94a>
 800c804:	2a00      	cmp	r2, #0
 800c806:	dd07      	ble.n	800c818 <_dtoa_r+0xad0>
 800c808:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c80c:	d0ed      	beq.n	800c7ea <_dtoa_r+0xaa2>
 800c80e:	f10a 0301 	add.w	r3, sl, #1
 800c812:	f88b 3000 	strb.w	r3, [fp]
 800c816:	e73c      	b.n	800c692 <_dtoa_r+0x94a>
 800c818:	9b05      	ldr	r3, [sp, #20]
 800c81a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c81e:	4599      	cmp	r9, r3
 800c820:	d047      	beq.n	800c8b2 <_dtoa_r+0xb6a>
 800c822:	ee18 1a10 	vmov	r1, s16
 800c826:	2300      	movs	r3, #0
 800c828:	220a      	movs	r2, #10
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 f9c8 	bl	800cbc0 <__multadd>
 800c830:	45b8      	cmp	r8, r7
 800c832:	ee08 0a10 	vmov	s16, r0
 800c836:	f04f 0300 	mov.w	r3, #0
 800c83a:	f04f 020a 	mov.w	r2, #10
 800c83e:	4641      	mov	r1, r8
 800c840:	4620      	mov	r0, r4
 800c842:	d106      	bne.n	800c852 <_dtoa_r+0xb0a>
 800c844:	f000 f9bc 	bl	800cbc0 <__multadd>
 800c848:	4680      	mov	r8, r0
 800c84a:	4607      	mov	r7, r0
 800c84c:	f109 0901 	add.w	r9, r9, #1
 800c850:	e772      	b.n	800c738 <_dtoa_r+0x9f0>
 800c852:	f000 f9b5 	bl	800cbc0 <__multadd>
 800c856:	4639      	mov	r1, r7
 800c858:	4680      	mov	r8, r0
 800c85a:	2300      	movs	r3, #0
 800c85c:	220a      	movs	r2, #10
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 f9ae 	bl	800cbc0 <__multadd>
 800c864:	4607      	mov	r7, r0
 800c866:	e7f1      	b.n	800c84c <_dtoa_r+0xb04>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	9302      	str	r3, [sp, #8]
 800c86c:	9d01      	ldr	r5, [sp, #4]
 800c86e:	ee18 0a10 	vmov	r0, s16
 800c872:	4631      	mov	r1, r6
 800c874:	f7ff f9dc 	bl	800bc30 <quorem>
 800c878:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	f805 ab01 	strb.w	sl, [r5], #1
 800c882:	1aea      	subs	r2, r5, r3
 800c884:	9b02      	ldr	r3, [sp, #8]
 800c886:	4293      	cmp	r3, r2
 800c888:	dd09      	ble.n	800c89e <_dtoa_r+0xb56>
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	2300      	movs	r3, #0
 800c890:	220a      	movs	r2, #10
 800c892:	4620      	mov	r0, r4
 800c894:	f000 f994 	bl	800cbc0 <__multadd>
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	e7e7      	b.n	800c86e <_dtoa_r+0xb26>
 800c89e:	9b02      	ldr	r3, [sp, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	bfc8      	it	gt
 800c8a4:	461d      	movgt	r5, r3
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	bfd8      	it	le
 800c8aa:	2501      	movle	r5, #1
 800c8ac:	441d      	add	r5, r3
 800c8ae:	f04f 0800 	mov.w	r8, #0
 800c8b2:	ee18 1a10 	vmov	r1, s16
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 fb31 	bl	800cf20 <__lshift>
 800c8be:	4631      	mov	r1, r6
 800c8c0:	ee08 0a10 	vmov	s16, r0
 800c8c4:	f000 fb9c 	bl	800d000 <__mcmp>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	dc91      	bgt.n	800c7f0 <_dtoa_r+0xaa8>
 800c8cc:	d102      	bne.n	800c8d4 <_dtoa_r+0xb8c>
 800c8ce:	f01a 0f01 	tst.w	sl, #1
 800c8d2:	d18d      	bne.n	800c7f0 <_dtoa_r+0xaa8>
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	461d      	mov	r5, r3
 800c8d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8dc:	2a30      	cmp	r2, #48	; 0x30
 800c8de:	d0fa      	beq.n	800c8d6 <_dtoa_r+0xb8e>
 800c8e0:	e6d7      	b.n	800c692 <_dtoa_r+0x94a>
 800c8e2:	9a01      	ldr	r2, [sp, #4]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d184      	bne.n	800c7f2 <_dtoa_r+0xaaa>
 800c8e8:	9b00      	ldr	r3, [sp, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	2331      	movs	r3, #49	; 0x31
 800c8f0:	7013      	strb	r3, [r2, #0]
 800c8f2:	e6ce      	b.n	800c692 <_dtoa_r+0x94a>
 800c8f4:	4b09      	ldr	r3, [pc, #36]	; (800c91c <_dtoa_r+0xbd4>)
 800c8f6:	f7ff ba95 	b.w	800be24 <_dtoa_r+0xdc>
 800c8fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f47f aa6e 	bne.w	800bdde <_dtoa_r+0x96>
 800c902:	4b07      	ldr	r3, [pc, #28]	; (800c920 <_dtoa_r+0xbd8>)
 800c904:	f7ff ba8e 	b.w	800be24 <_dtoa_r+0xdc>
 800c908:	9b02      	ldr	r3, [sp, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dcae      	bgt.n	800c86c <_dtoa_r+0xb24>
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	2b02      	cmp	r3, #2
 800c912:	f73f aea8 	bgt.w	800c666 <_dtoa_r+0x91e>
 800c916:	e7a9      	b.n	800c86c <_dtoa_r+0xb24>
 800c918:	0800ea40 	.word	0x0800ea40
 800c91c:	0800e89c 	.word	0x0800e89c
 800c920:	0800e9c1 	.word	0x0800e9c1

0800c924 <__sflush_r>:
 800c924:	898a      	ldrh	r2, [r1, #12]
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	4605      	mov	r5, r0
 800c92c:	0710      	lsls	r0, r2, #28
 800c92e:	460c      	mov	r4, r1
 800c930:	d458      	bmi.n	800c9e4 <__sflush_r+0xc0>
 800c932:	684b      	ldr	r3, [r1, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	dc05      	bgt.n	800c944 <__sflush_r+0x20>
 800c938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dc02      	bgt.n	800c944 <__sflush_r+0x20>
 800c93e:	2000      	movs	r0, #0
 800c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c946:	2e00      	cmp	r6, #0
 800c948:	d0f9      	beq.n	800c93e <__sflush_r+0x1a>
 800c94a:	2300      	movs	r3, #0
 800c94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c950:	682f      	ldr	r7, [r5, #0]
 800c952:	602b      	str	r3, [r5, #0]
 800c954:	d032      	beq.n	800c9bc <__sflush_r+0x98>
 800c956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	075a      	lsls	r2, r3, #29
 800c95c:	d505      	bpl.n	800c96a <__sflush_r+0x46>
 800c95e:	6863      	ldr	r3, [r4, #4]
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c964:	b10b      	cbz	r3, 800c96a <__sflush_r+0x46>
 800c966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c968:	1ac0      	subs	r0, r0, r3
 800c96a:	2300      	movs	r3, #0
 800c96c:	4602      	mov	r2, r0
 800c96e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c970:	6a21      	ldr	r1, [r4, #32]
 800c972:	4628      	mov	r0, r5
 800c974:	47b0      	blx	r6
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	d106      	bne.n	800c98a <__sflush_r+0x66>
 800c97c:	6829      	ldr	r1, [r5, #0]
 800c97e:	291d      	cmp	r1, #29
 800c980:	d82c      	bhi.n	800c9dc <__sflush_r+0xb8>
 800c982:	4a2a      	ldr	r2, [pc, #168]	; (800ca2c <__sflush_r+0x108>)
 800c984:	40ca      	lsrs	r2, r1
 800c986:	07d6      	lsls	r6, r2, #31
 800c988:	d528      	bpl.n	800c9dc <__sflush_r+0xb8>
 800c98a:	2200      	movs	r2, #0
 800c98c:	6062      	str	r2, [r4, #4]
 800c98e:	04d9      	lsls	r1, r3, #19
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	d504      	bpl.n	800c9a0 <__sflush_r+0x7c>
 800c996:	1c42      	adds	r2, r0, #1
 800c998:	d101      	bne.n	800c99e <__sflush_r+0x7a>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b903      	cbnz	r3, 800c9a0 <__sflush_r+0x7c>
 800c99e:	6560      	str	r0, [r4, #84]	; 0x54
 800c9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9a2:	602f      	str	r7, [r5, #0]
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	d0ca      	beq.n	800c93e <__sflush_r+0x1a>
 800c9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	d002      	beq.n	800c9b6 <__sflush_r+0x92>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 fc3d 	bl	800d230 <_free_r>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ba:	e7c1      	b.n	800c940 <__sflush_r+0x1c>
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b0      	blx	r6
 800c9c4:	1c41      	adds	r1, r0, #1
 800c9c6:	d1c7      	bne.n	800c958 <__sflush_r+0x34>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c4      	beq.n	800c958 <__sflush_r+0x34>
 800c9ce:	2b1d      	cmp	r3, #29
 800c9d0:	d001      	beq.n	800c9d6 <__sflush_r+0xb2>
 800c9d2:	2b16      	cmp	r3, #22
 800c9d4:	d101      	bne.n	800c9da <__sflush_r+0xb6>
 800c9d6:	602f      	str	r7, [r5, #0]
 800c9d8:	e7b1      	b.n	800c93e <__sflush_r+0x1a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	e7ad      	b.n	800c940 <__sflush_r+0x1c>
 800c9e4:	690f      	ldr	r7, [r1, #16]
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	d0a9      	beq.n	800c93e <__sflush_r+0x1a>
 800c9ea:	0793      	lsls	r3, r2, #30
 800c9ec:	680e      	ldr	r6, [r1, #0]
 800c9ee:	bf08      	it	eq
 800c9f0:	694b      	ldreq	r3, [r1, #20]
 800c9f2:	600f      	str	r7, [r1, #0]
 800c9f4:	bf18      	it	ne
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	eba6 0807 	sub.w	r8, r6, r7
 800c9fc:	608b      	str	r3, [r1, #8]
 800c9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ca02:	dd9c      	ble.n	800c93e <__sflush_r+0x1a>
 800ca04:	6a21      	ldr	r1, [r4, #32]
 800ca06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca08:	4643      	mov	r3, r8
 800ca0a:	463a      	mov	r2, r7
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b0      	blx	r6
 800ca10:	2800      	cmp	r0, #0
 800ca12:	dc06      	bgt.n	800ca22 <__sflush_r+0xfe>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e78e      	b.n	800c940 <__sflush_r+0x1c>
 800ca22:	4407      	add	r7, r0
 800ca24:	eba8 0800 	sub.w	r8, r8, r0
 800ca28:	e7e9      	b.n	800c9fe <__sflush_r+0xda>
 800ca2a:	bf00      	nop
 800ca2c:	20400001 	.word	0x20400001

0800ca30 <_fflush_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	690b      	ldr	r3, [r1, #16]
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	b913      	cbnz	r3, 800ca40 <_fflush_r+0x10>
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	b118      	cbz	r0, 800ca4a <_fflush_r+0x1a>
 800ca42:	6983      	ldr	r3, [r0, #24]
 800ca44:	b90b      	cbnz	r3, 800ca4a <_fflush_r+0x1a>
 800ca46:	f7fe f98d 	bl	800ad64 <__sinit>
 800ca4a:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <_fflush_r+0x6c>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d11b      	bne.n	800ca88 <_fflush_r+0x58>
 800ca50:	686c      	ldr	r4, [r5, #4]
 800ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0ef      	beq.n	800ca3a <_fflush_r+0xa>
 800ca5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca5c:	07d0      	lsls	r0, r2, #31
 800ca5e:	d404      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca60:	0599      	lsls	r1, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca66:	f7fe fa40 	bl	800aeea <__retarget_lock_acquire_recursive>
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7ff ff59 	bl	800c924 <__sflush_r>
 800ca72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca74:	07da      	lsls	r2, r3, #31
 800ca76:	4605      	mov	r5, r0
 800ca78:	d4e0      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	059b      	lsls	r3, r3, #22
 800ca7e:	d4dd      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f7fe fa33 	bl	800aeec <__retarget_lock_release_recursive>
 800ca86:	e7d9      	b.n	800ca3c <_fflush_r+0xc>
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <_fflush_r+0x70>)
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d101      	bne.n	800ca92 <_fflush_r+0x62>
 800ca8e:	68ac      	ldr	r4, [r5, #8]
 800ca90:	e7df      	b.n	800ca52 <_fflush_r+0x22>
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <_fflush_r+0x74>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	bf08      	it	eq
 800ca98:	68ec      	ldreq	r4, [r5, #12]
 800ca9a:	e7da      	b.n	800ca52 <_fflush_r+0x22>
 800ca9c:	0800e848 	.word	0x0800e848
 800caa0:	0800e868 	.word	0x0800e868
 800caa4:	0800e828 	.word	0x0800e828

0800caa8 <_localeconv_r>:
 800caa8:	4800      	ldr	r0, [pc, #0]	; (800caac <_localeconv_r+0x4>)
 800caaa:	4770      	bx	lr
 800caac:	20000188 	.word	0x20000188

0800cab0 <_lseek_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d07      	ldr	r5, [pc, #28]	; (800cad0 <_lseek_r+0x20>)
 800cab4:	4604      	mov	r4, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	4611      	mov	r1, r2
 800caba:	2200      	movs	r2, #0
 800cabc:	602a      	str	r2, [r5, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	f7f6 f9ac 	bl	8002e1c <_lseek>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_lseek_r+0x1e>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_lseek_r+0x1e>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	2000542c 	.word	0x2000542c

0800cad4 <malloc>:
 800cad4:	4b02      	ldr	r3, [pc, #8]	; (800cae0 <malloc+0xc>)
 800cad6:	4601      	mov	r1, r0
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	f7fe ba3f 	b.w	800af5c <_malloc_r>
 800cade:	bf00      	nop
 800cae0:	20000034 	.word	0x20000034

0800cae4 <__malloc_lock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__malloc_lock+0x8>)
 800cae6:	f7fe ba00 	b.w	800aeea <__retarget_lock_acquire_recursive>
 800caea:	bf00      	nop
 800caec:	20005420 	.word	0x20005420

0800caf0 <__malloc_unlock>:
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <__malloc_unlock+0x8>)
 800caf2:	f7fe b9fb 	b.w	800aeec <__retarget_lock_release_recursive>
 800caf6:	bf00      	nop
 800caf8:	20005420 	.word	0x20005420

0800cafc <_Balloc>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	b976      	cbnz	r6, 800cb24 <_Balloc+0x28>
 800cb06:	2010      	movs	r0, #16
 800cb08:	f7ff ffe4 	bl	800cad4 <malloc>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	6260      	str	r0, [r4, #36]	; 0x24
 800cb10:	b920      	cbnz	r0, 800cb1c <_Balloc+0x20>
 800cb12:	4b18      	ldr	r3, [pc, #96]	; (800cb74 <_Balloc+0x78>)
 800cb14:	4818      	ldr	r0, [pc, #96]	; (800cb78 <_Balloc+0x7c>)
 800cb16:	2166      	movs	r1, #102	; 0x66
 800cb18:	f000 fd44 	bl	800d5a4 <__assert_func>
 800cb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb20:	6006      	str	r6, [r0, #0]
 800cb22:	60c6      	str	r6, [r0, #12]
 800cb24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb26:	68f3      	ldr	r3, [r6, #12]
 800cb28:	b183      	cbz	r3, 800cb4c <_Balloc+0x50>
 800cb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb32:	b9b8      	cbnz	r0, 800cb64 <_Balloc+0x68>
 800cb34:	2101      	movs	r1, #1
 800cb36:	fa01 f605 	lsl.w	r6, r1, r5
 800cb3a:	1d72      	adds	r2, r6, #5
 800cb3c:	0092      	lsls	r2, r2, #2
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f000 fb60 	bl	800d204 <_calloc_r>
 800cb44:	b160      	cbz	r0, 800cb60 <_Balloc+0x64>
 800cb46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb4a:	e00e      	b.n	800cb6a <_Balloc+0x6e>
 800cb4c:	2221      	movs	r2, #33	; 0x21
 800cb4e:	2104      	movs	r1, #4
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fb57 	bl	800d204 <_calloc_r>
 800cb56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb58:	60f0      	str	r0, [r6, #12]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1e4      	bne.n	800cb2a <_Balloc+0x2e>
 800cb60:	2000      	movs	r0, #0
 800cb62:	bd70      	pop	{r4, r5, r6, pc}
 800cb64:	6802      	ldr	r2, [r0, #0]
 800cb66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb70:	e7f7      	b.n	800cb62 <_Balloc+0x66>
 800cb72:	bf00      	nop
 800cb74:	0800e9ce 	.word	0x0800e9ce
 800cb78:	0800ea51 	.word	0x0800ea51

0800cb7c <_Bfree>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b976      	cbnz	r6, 800cba4 <_Bfree+0x28>
 800cb86:	2010      	movs	r0, #16
 800cb88:	f7ff ffa4 	bl	800cad4 <malloc>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	6268      	str	r0, [r5, #36]	; 0x24
 800cb90:	b920      	cbnz	r0, 800cb9c <_Bfree+0x20>
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <_Bfree+0x3c>)
 800cb94:	4809      	ldr	r0, [pc, #36]	; (800cbbc <_Bfree+0x40>)
 800cb96:	218a      	movs	r1, #138	; 0x8a
 800cb98:	f000 fd04 	bl	800d5a4 <__assert_func>
 800cb9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cba0:	6006      	str	r6, [r0, #0]
 800cba2:	60c6      	str	r6, [r0, #12]
 800cba4:	b13c      	cbz	r4, 800cbb6 <_Bfree+0x3a>
 800cba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cba8:	6862      	ldr	r2, [r4, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbb0:	6021      	str	r1, [r4, #0]
 800cbb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	0800e9ce 	.word	0x0800e9ce
 800cbbc:	0800ea51 	.word	0x0800ea51

0800cbc0 <__multadd>:
 800cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc4:	690d      	ldr	r5, [r1, #16]
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	461e      	mov	r6, r3
 800cbcc:	f101 0c14 	add.w	ip, r1, #20
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f8dc 3000 	ldr.w	r3, [ip]
 800cbd6:	b299      	uxth	r1, r3
 800cbd8:	fb02 6101 	mla	r1, r2, r1, r6
 800cbdc:	0c1e      	lsrs	r6, r3, #16
 800cbde:	0c0b      	lsrs	r3, r1, #16
 800cbe0:	fb02 3306 	mla	r3, r2, r6, r3
 800cbe4:	b289      	uxth	r1, r1
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbec:	4285      	cmp	r5, r0
 800cbee:	f84c 1b04 	str.w	r1, [ip], #4
 800cbf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbf6:	dcec      	bgt.n	800cbd2 <__multadd+0x12>
 800cbf8:	b30e      	cbz	r6, 800cc3e <__multadd+0x7e>
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	dc19      	bgt.n	800cc34 <__multadd+0x74>
 800cc00:	6861      	ldr	r1, [r4, #4]
 800cc02:	4638      	mov	r0, r7
 800cc04:	3101      	adds	r1, #1
 800cc06:	f7ff ff79 	bl	800cafc <_Balloc>
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	b928      	cbnz	r0, 800cc1a <__multadd+0x5a>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	4b0c      	ldr	r3, [pc, #48]	; (800cc44 <__multadd+0x84>)
 800cc12:	480d      	ldr	r0, [pc, #52]	; (800cc48 <__multadd+0x88>)
 800cc14:	21b5      	movs	r1, #181	; 0xb5
 800cc16:	f000 fcc5 	bl	800d5a4 <__assert_func>
 800cc1a:	6922      	ldr	r2, [r4, #16]
 800cc1c:	3202      	adds	r2, #2
 800cc1e:	f104 010c 	add.w	r1, r4, #12
 800cc22:	0092      	lsls	r2, r2, #2
 800cc24:	300c      	adds	r0, #12
 800cc26:	f7fe f962 	bl	800aeee <memcpy>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ffa5 	bl	800cb7c <_Bfree>
 800cc32:	4644      	mov	r4, r8
 800cc34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc38:	3501      	adds	r5, #1
 800cc3a:	615e      	str	r6, [r3, #20]
 800cc3c:	6125      	str	r5, [r4, #16]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	0800ea40 	.word	0x0800ea40
 800cc48:	0800ea51 	.word	0x0800ea51

0800cc4c <__hi0bits>:
 800cc4c:	0c03      	lsrs	r3, r0, #16
 800cc4e:	041b      	lsls	r3, r3, #16
 800cc50:	b9d3      	cbnz	r3, 800cc88 <__hi0bits+0x3c>
 800cc52:	0400      	lsls	r0, r0, #16
 800cc54:	2310      	movs	r3, #16
 800cc56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc5a:	bf04      	itt	eq
 800cc5c:	0200      	lsleq	r0, r0, #8
 800cc5e:	3308      	addeq	r3, #8
 800cc60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc64:	bf04      	itt	eq
 800cc66:	0100      	lsleq	r0, r0, #4
 800cc68:	3304      	addeq	r3, #4
 800cc6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc6e:	bf04      	itt	eq
 800cc70:	0080      	lsleq	r0, r0, #2
 800cc72:	3302      	addeq	r3, #2
 800cc74:	2800      	cmp	r0, #0
 800cc76:	db05      	blt.n	800cc84 <__hi0bits+0x38>
 800cc78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc7c:	f103 0301 	add.w	r3, r3, #1
 800cc80:	bf08      	it	eq
 800cc82:	2320      	moveq	r3, #32
 800cc84:	4618      	mov	r0, r3
 800cc86:	4770      	bx	lr
 800cc88:	2300      	movs	r3, #0
 800cc8a:	e7e4      	b.n	800cc56 <__hi0bits+0xa>

0800cc8c <__lo0bits>:
 800cc8c:	6803      	ldr	r3, [r0, #0]
 800cc8e:	f013 0207 	ands.w	r2, r3, #7
 800cc92:	4601      	mov	r1, r0
 800cc94:	d00b      	beq.n	800ccae <__lo0bits+0x22>
 800cc96:	07da      	lsls	r2, r3, #31
 800cc98:	d423      	bmi.n	800cce2 <__lo0bits+0x56>
 800cc9a:	0798      	lsls	r0, r3, #30
 800cc9c:	bf49      	itett	mi
 800cc9e:	085b      	lsrmi	r3, r3, #1
 800cca0:	089b      	lsrpl	r3, r3, #2
 800cca2:	2001      	movmi	r0, #1
 800cca4:	600b      	strmi	r3, [r1, #0]
 800cca6:	bf5c      	itt	pl
 800cca8:	600b      	strpl	r3, [r1, #0]
 800ccaa:	2002      	movpl	r0, #2
 800ccac:	4770      	bx	lr
 800ccae:	b298      	uxth	r0, r3
 800ccb0:	b9a8      	cbnz	r0, 800ccde <__lo0bits+0x52>
 800ccb2:	0c1b      	lsrs	r3, r3, #16
 800ccb4:	2010      	movs	r0, #16
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	b90a      	cbnz	r2, 800ccbe <__lo0bits+0x32>
 800ccba:	3008      	adds	r0, #8
 800ccbc:	0a1b      	lsrs	r3, r3, #8
 800ccbe:	071a      	lsls	r2, r3, #28
 800ccc0:	bf04      	itt	eq
 800ccc2:	091b      	lsreq	r3, r3, #4
 800ccc4:	3004      	addeq	r0, #4
 800ccc6:	079a      	lsls	r2, r3, #30
 800ccc8:	bf04      	itt	eq
 800ccca:	089b      	lsreq	r3, r3, #2
 800cccc:	3002      	addeq	r0, #2
 800ccce:	07da      	lsls	r2, r3, #31
 800ccd0:	d403      	bmi.n	800ccda <__lo0bits+0x4e>
 800ccd2:	085b      	lsrs	r3, r3, #1
 800ccd4:	f100 0001 	add.w	r0, r0, #1
 800ccd8:	d005      	beq.n	800cce6 <__lo0bits+0x5a>
 800ccda:	600b      	str	r3, [r1, #0]
 800ccdc:	4770      	bx	lr
 800ccde:	4610      	mov	r0, r2
 800cce0:	e7e9      	b.n	800ccb6 <__lo0bits+0x2a>
 800cce2:	2000      	movs	r0, #0
 800cce4:	4770      	bx	lr
 800cce6:	2020      	movs	r0, #32
 800cce8:	4770      	bx	lr
	...

0800ccec <__i2b>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	460c      	mov	r4, r1
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	f7ff ff03 	bl	800cafc <_Balloc>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	b928      	cbnz	r0, 800cd06 <__i2b+0x1a>
 800ccfa:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <__i2b+0x24>)
 800ccfc:	4805      	ldr	r0, [pc, #20]	; (800cd14 <__i2b+0x28>)
 800ccfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd02:	f000 fc4f 	bl	800d5a4 <__assert_func>
 800cd06:	2301      	movs	r3, #1
 800cd08:	6144      	str	r4, [r0, #20]
 800cd0a:	6103      	str	r3, [r0, #16]
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800ea40 	.word	0x0800ea40
 800cd14:	0800ea51 	.word	0x0800ea51

0800cd18 <__multiply>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	4691      	mov	r9, r2
 800cd1e:	690a      	ldr	r2, [r1, #16]
 800cd20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	bfb8      	it	lt
 800cd28:	460b      	movlt	r3, r1
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	bfbc      	itt	lt
 800cd2e:	464c      	movlt	r4, r9
 800cd30:	4699      	movlt	r9, r3
 800cd32:	6927      	ldr	r7, [r4, #16]
 800cd34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd38:	68a3      	ldr	r3, [r4, #8]
 800cd3a:	6861      	ldr	r1, [r4, #4]
 800cd3c:	eb07 060a 	add.w	r6, r7, sl
 800cd40:	42b3      	cmp	r3, r6
 800cd42:	b085      	sub	sp, #20
 800cd44:	bfb8      	it	lt
 800cd46:	3101      	addlt	r1, #1
 800cd48:	f7ff fed8 	bl	800cafc <_Balloc>
 800cd4c:	b930      	cbnz	r0, 800cd5c <__multiply+0x44>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	4b44      	ldr	r3, [pc, #272]	; (800ce64 <__multiply+0x14c>)
 800cd52:	4845      	ldr	r0, [pc, #276]	; (800ce68 <__multiply+0x150>)
 800cd54:	f240 115d 	movw	r1, #349	; 0x15d
 800cd58:	f000 fc24 	bl	800d5a4 <__assert_func>
 800cd5c:	f100 0514 	add.w	r5, r0, #20
 800cd60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd64:	462b      	mov	r3, r5
 800cd66:	2200      	movs	r2, #0
 800cd68:	4543      	cmp	r3, r8
 800cd6a:	d321      	bcc.n	800cdb0 <__multiply+0x98>
 800cd6c:	f104 0314 	add.w	r3, r4, #20
 800cd70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd74:	f109 0314 	add.w	r3, r9, #20
 800cd78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd7c:	9202      	str	r2, [sp, #8]
 800cd7e:	1b3a      	subs	r2, r7, r4
 800cd80:	3a15      	subs	r2, #21
 800cd82:	f022 0203 	bic.w	r2, r2, #3
 800cd86:	3204      	adds	r2, #4
 800cd88:	f104 0115 	add.w	r1, r4, #21
 800cd8c:	428f      	cmp	r7, r1
 800cd8e:	bf38      	it	cc
 800cd90:	2204      	movcc	r2, #4
 800cd92:	9201      	str	r2, [sp, #4]
 800cd94:	9a02      	ldr	r2, [sp, #8]
 800cd96:	9303      	str	r3, [sp, #12]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d80c      	bhi.n	800cdb6 <__multiply+0x9e>
 800cd9c:	2e00      	cmp	r6, #0
 800cd9e:	dd03      	ble.n	800cda8 <__multiply+0x90>
 800cda0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d05a      	beq.n	800ce5e <__multiply+0x146>
 800cda8:	6106      	str	r6, [r0, #16]
 800cdaa:	b005      	add	sp, #20
 800cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb0:	f843 2b04 	str.w	r2, [r3], #4
 800cdb4:	e7d8      	b.n	800cd68 <__multiply+0x50>
 800cdb6:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdba:	f1ba 0f00 	cmp.w	sl, #0
 800cdbe:	d024      	beq.n	800ce0a <__multiply+0xf2>
 800cdc0:	f104 0e14 	add.w	lr, r4, #20
 800cdc4:	46a9      	mov	r9, r5
 800cdc6:	f04f 0c00 	mov.w	ip, #0
 800cdca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdce:	f8d9 1000 	ldr.w	r1, [r9]
 800cdd2:	fa1f fb82 	uxth.w	fp, r2
 800cdd6:	b289      	uxth	r1, r1
 800cdd8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cddc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cde0:	f8d9 2000 	ldr.w	r2, [r9]
 800cde4:	4461      	add	r1, ip
 800cde6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdea:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdf2:	b289      	uxth	r1, r1
 800cdf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdf8:	4577      	cmp	r7, lr
 800cdfa:	f849 1b04 	str.w	r1, [r9], #4
 800cdfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce02:	d8e2      	bhi.n	800cdca <__multiply+0xb2>
 800ce04:	9a01      	ldr	r2, [sp, #4]
 800ce06:	f845 c002 	str.w	ip, [r5, r2]
 800ce0a:	9a03      	ldr	r2, [sp, #12]
 800ce0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce10:	3304      	adds	r3, #4
 800ce12:	f1b9 0f00 	cmp.w	r9, #0
 800ce16:	d020      	beq.n	800ce5a <__multiply+0x142>
 800ce18:	6829      	ldr	r1, [r5, #0]
 800ce1a:	f104 0c14 	add.w	ip, r4, #20
 800ce1e:	46ae      	mov	lr, r5
 800ce20:	f04f 0a00 	mov.w	sl, #0
 800ce24:	f8bc b000 	ldrh.w	fp, [ip]
 800ce28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce2c:	fb09 220b 	mla	r2, r9, fp, r2
 800ce30:	4492      	add	sl, r2
 800ce32:	b289      	uxth	r1, r1
 800ce34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce38:	f84e 1b04 	str.w	r1, [lr], #4
 800ce3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce40:	f8be 1000 	ldrh.w	r1, [lr]
 800ce44:	0c12      	lsrs	r2, r2, #16
 800ce46:	fb09 1102 	mla	r1, r9, r2, r1
 800ce4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce4e:	4567      	cmp	r7, ip
 800ce50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce54:	d8e6      	bhi.n	800ce24 <__multiply+0x10c>
 800ce56:	9a01      	ldr	r2, [sp, #4]
 800ce58:	50a9      	str	r1, [r5, r2]
 800ce5a:	3504      	adds	r5, #4
 800ce5c:	e79a      	b.n	800cd94 <__multiply+0x7c>
 800ce5e:	3e01      	subs	r6, #1
 800ce60:	e79c      	b.n	800cd9c <__multiply+0x84>
 800ce62:	bf00      	nop
 800ce64:	0800ea40 	.word	0x0800ea40
 800ce68:	0800ea51 	.word	0x0800ea51

0800ce6c <__pow5mult>:
 800ce6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce70:	4615      	mov	r5, r2
 800ce72:	f012 0203 	ands.w	r2, r2, #3
 800ce76:	4606      	mov	r6, r0
 800ce78:	460f      	mov	r7, r1
 800ce7a:	d007      	beq.n	800ce8c <__pow5mult+0x20>
 800ce7c:	4c25      	ldr	r4, [pc, #148]	; (800cf14 <__pow5mult+0xa8>)
 800ce7e:	3a01      	subs	r2, #1
 800ce80:	2300      	movs	r3, #0
 800ce82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce86:	f7ff fe9b 	bl	800cbc0 <__multadd>
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	10ad      	asrs	r5, r5, #2
 800ce8e:	d03d      	beq.n	800cf0c <__pow5mult+0xa0>
 800ce90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce92:	b97c      	cbnz	r4, 800ceb4 <__pow5mult+0x48>
 800ce94:	2010      	movs	r0, #16
 800ce96:	f7ff fe1d 	bl	800cad4 <malloc>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	6270      	str	r0, [r6, #36]	; 0x24
 800ce9e:	b928      	cbnz	r0, 800ceac <__pow5mult+0x40>
 800cea0:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <__pow5mult+0xac>)
 800cea2:	481e      	ldr	r0, [pc, #120]	; (800cf1c <__pow5mult+0xb0>)
 800cea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cea8:	f000 fb7c 	bl	800d5a4 <__assert_func>
 800ceac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb0:	6004      	str	r4, [r0, #0]
 800ceb2:	60c4      	str	r4, [r0, #12]
 800ceb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ceb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cebc:	b94c      	cbnz	r4, 800ced2 <__pow5mult+0x66>
 800cebe:	f240 2171 	movw	r1, #625	; 0x271
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7ff ff12 	bl	800ccec <__i2b>
 800cec8:	2300      	movs	r3, #0
 800ceca:	f8c8 0008 	str.w	r0, [r8, #8]
 800cece:	4604      	mov	r4, r0
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	f04f 0900 	mov.w	r9, #0
 800ced6:	07eb      	lsls	r3, r5, #31
 800ced8:	d50a      	bpl.n	800cef0 <__pow5mult+0x84>
 800ceda:	4639      	mov	r1, r7
 800cedc:	4622      	mov	r2, r4
 800cede:	4630      	mov	r0, r6
 800cee0:	f7ff ff1a 	bl	800cd18 <__multiply>
 800cee4:	4639      	mov	r1, r7
 800cee6:	4680      	mov	r8, r0
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7ff fe47 	bl	800cb7c <_Bfree>
 800ceee:	4647      	mov	r7, r8
 800cef0:	106d      	asrs	r5, r5, #1
 800cef2:	d00b      	beq.n	800cf0c <__pow5mult+0xa0>
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	b938      	cbnz	r0, 800cf08 <__pow5mult+0x9c>
 800cef8:	4622      	mov	r2, r4
 800cefa:	4621      	mov	r1, r4
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7ff ff0b 	bl	800cd18 <__multiply>
 800cf02:	6020      	str	r0, [r4, #0]
 800cf04:	f8c0 9000 	str.w	r9, [r0]
 800cf08:	4604      	mov	r4, r0
 800cf0a:	e7e4      	b.n	800ced6 <__pow5mult+0x6a>
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf12:	bf00      	nop
 800cf14:	0800eba0 	.word	0x0800eba0
 800cf18:	0800e9ce 	.word	0x0800e9ce
 800cf1c:	0800ea51 	.word	0x0800ea51

0800cf20 <__lshift>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	460c      	mov	r4, r1
 800cf26:	6849      	ldr	r1, [r1, #4]
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	4607      	mov	r7, r0
 800cf32:	4691      	mov	r9, r2
 800cf34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf38:	f108 0601 	add.w	r6, r8, #1
 800cf3c:	42b3      	cmp	r3, r6
 800cf3e:	db0b      	blt.n	800cf58 <__lshift+0x38>
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff fddb 	bl	800cafc <_Balloc>
 800cf46:	4605      	mov	r5, r0
 800cf48:	b948      	cbnz	r0, 800cf5e <__lshift+0x3e>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4b2a      	ldr	r3, [pc, #168]	; (800cff8 <__lshift+0xd8>)
 800cf4e:	482b      	ldr	r0, [pc, #172]	; (800cffc <__lshift+0xdc>)
 800cf50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf54:	f000 fb26 	bl	800d5a4 <__assert_func>
 800cf58:	3101      	adds	r1, #1
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	e7ee      	b.n	800cf3c <__lshift+0x1c>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f100 0114 	add.w	r1, r0, #20
 800cf64:	f100 0210 	add.w	r2, r0, #16
 800cf68:	4618      	mov	r0, r3
 800cf6a:	4553      	cmp	r3, sl
 800cf6c:	db37      	blt.n	800cfde <__lshift+0xbe>
 800cf6e:	6920      	ldr	r0, [r4, #16]
 800cf70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf74:	f104 0314 	add.w	r3, r4, #20
 800cf78:	f019 091f 	ands.w	r9, r9, #31
 800cf7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf84:	d02f      	beq.n	800cfe6 <__lshift+0xc6>
 800cf86:	f1c9 0e20 	rsb	lr, r9, #32
 800cf8a:	468a      	mov	sl, r1
 800cf8c:	f04f 0c00 	mov.w	ip, #0
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	fa02 f209 	lsl.w	r2, r2, r9
 800cf96:	ea42 020c 	orr.w	r2, r2, ip
 800cf9a:	f84a 2b04 	str.w	r2, [sl], #4
 800cf9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa2:	4298      	cmp	r0, r3
 800cfa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cfa8:	d8f2      	bhi.n	800cf90 <__lshift+0x70>
 800cfaa:	1b03      	subs	r3, r0, r4
 800cfac:	3b15      	subs	r3, #21
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	f104 0215 	add.w	r2, r4, #21
 800cfb8:	4290      	cmp	r0, r2
 800cfba:	bf38      	it	cc
 800cfbc:	2304      	movcc	r3, #4
 800cfbe:	f841 c003 	str.w	ip, [r1, r3]
 800cfc2:	f1bc 0f00 	cmp.w	ip, #0
 800cfc6:	d001      	beq.n	800cfcc <__lshift+0xac>
 800cfc8:	f108 0602 	add.w	r6, r8, #2
 800cfcc:	3e01      	subs	r6, #1
 800cfce:	4638      	mov	r0, r7
 800cfd0:	612e      	str	r6, [r5, #16]
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	f7ff fdd2 	bl	800cb7c <_Bfree>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfde:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	e7c1      	b.n	800cf6a <__lshift+0x4a>
 800cfe6:	3904      	subs	r1, #4
 800cfe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfec:	f841 2f04 	str.w	r2, [r1, #4]!
 800cff0:	4298      	cmp	r0, r3
 800cff2:	d8f9      	bhi.n	800cfe8 <__lshift+0xc8>
 800cff4:	e7ea      	b.n	800cfcc <__lshift+0xac>
 800cff6:	bf00      	nop
 800cff8:	0800ea40 	.word	0x0800ea40
 800cffc:	0800ea51 	.word	0x0800ea51

0800d000 <__mcmp>:
 800d000:	b530      	push	{r4, r5, lr}
 800d002:	6902      	ldr	r2, [r0, #16]
 800d004:	690c      	ldr	r4, [r1, #16]
 800d006:	1b12      	subs	r2, r2, r4
 800d008:	d10e      	bne.n	800d028 <__mcmp+0x28>
 800d00a:	f100 0314 	add.w	r3, r0, #20
 800d00e:	3114      	adds	r1, #20
 800d010:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d014:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d018:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d01c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d020:	42a5      	cmp	r5, r4
 800d022:	d003      	beq.n	800d02c <__mcmp+0x2c>
 800d024:	d305      	bcc.n	800d032 <__mcmp+0x32>
 800d026:	2201      	movs	r2, #1
 800d028:	4610      	mov	r0, r2
 800d02a:	bd30      	pop	{r4, r5, pc}
 800d02c:	4283      	cmp	r3, r0
 800d02e:	d3f3      	bcc.n	800d018 <__mcmp+0x18>
 800d030:	e7fa      	b.n	800d028 <__mcmp+0x28>
 800d032:	f04f 32ff 	mov.w	r2, #4294967295
 800d036:	e7f7      	b.n	800d028 <__mcmp+0x28>

0800d038 <__mdiff>:
 800d038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	460c      	mov	r4, r1
 800d03e:	4606      	mov	r6, r0
 800d040:	4611      	mov	r1, r2
 800d042:	4620      	mov	r0, r4
 800d044:	4690      	mov	r8, r2
 800d046:	f7ff ffdb 	bl	800d000 <__mcmp>
 800d04a:	1e05      	subs	r5, r0, #0
 800d04c:	d110      	bne.n	800d070 <__mdiff+0x38>
 800d04e:	4629      	mov	r1, r5
 800d050:	4630      	mov	r0, r6
 800d052:	f7ff fd53 	bl	800cafc <_Balloc>
 800d056:	b930      	cbnz	r0, 800d066 <__mdiff+0x2e>
 800d058:	4b3a      	ldr	r3, [pc, #232]	; (800d144 <__mdiff+0x10c>)
 800d05a:	4602      	mov	r2, r0
 800d05c:	f240 2132 	movw	r1, #562	; 0x232
 800d060:	4839      	ldr	r0, [pc, #228]	; (800d148 <__mdiff+0x110>)
 800d062:	f000 fa9f 	bl	800d5a4 <__assert_func>
 800d066:	2301      	movs	r3, #1
 800d068:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d06c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	bfa4      	itt	ge
 800d072:	4643      	movge	r3, r8
 800d074:	46a0      	movge	r8, r4
 800d076:	4630      	mov	r0, r6
 800d078:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d07c:	bfa6      	itte	ge
 800d07e:	461c      	movge	r4, r3
 800d080:	2500      	movge	r5, #0
 800d082:	2501      	movlt	r5, #1
 800d084:	f7ff fd3a 	bl	800cafc <_Balloc>
 800d088:	b920      	cbnz	r0, 800d094 <__mdiff+0x5c>
 800d08a:	4b2e      	ldr	r3, [pc, #184]	; (800d144 <__mdiff+0x10c>)
 800d08c:	4602      	mov	r2, r0
 800d08e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d092:	e7e5      	b.n	800d060 <__mdiff+0x28>
 800d094:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d098:	6926      	ldr	r6, [r4, #16]
 800d09a:	60c5      	str	r5, [r0, #12]
 800d09c:	f104 0914 	add.w	r9, r4, #20
 800d0a0:	f108 0514 	add.w	r5, r8, #20
 800d0a4:	f100 0e14 	add.w	lr, r0, #20
 800d0a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0b0:	f108 0210 	add.w	r2, r8, #16
 800d0b4:	46f2      	mov	sl, lr
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0c0:	fa1f f883 	uxth.w	r8, r3
 800d0c4:	fa11 f18b 	uxtah	r1, r1, fp
 800d0c8:	0c1b      	lsrs	r3, r3, #16
 800d0ca:	eba1 0808 	sub.w	r8, r1, r8
 800d0ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0d6:	fa1f f888 	uxth.w	r8, r8
 800d0da:	1419      	asrs	r1, r3, #16
 800d0dc:	454e      	cmp	r6, r9
 800d0de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0e2:	f84a 3b04 	str.w	r3, [sl], #4
 800d0e6:	d8e7      	bhi.n	800d0b8 <__mdiff+0x80>
 800d0e8:	1b33      	subs	r3, r6, r4
 800d0ea:	3b15      	subs	r3, #21
 800d0ec:	f023 0303 	bic.w	r3, r3, #3
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	3415      	adds	r4, #21
 800d0f4:	42a6      	cmp	r6, r4
 800d0f6:	bf38      	it	cc
 800d0f8:	2304      	movcc	r3, #4
 800d0fa:	441d      	add	r5, r3
 800d0fc:	4473      	add	r3, lr
 800d0fe:	469e      	mov	lr, r3
 800d100:	462e      	mov	r6, r5
 800d102:	4566      	cmp	r6, ip
 800d104:	d30e      	bcc.n	800d124 <__mdiff+0xec>
 800d106:	f10c 0203 	add.w	r2, ip, #3
 800d10a:	1b52      	subs	r2, r2, r5
 800d10c:	f022 0203 	bic.w	r2, r2, #3
 800d110:	3d03      	subs	r5, #3
 800d112:	45ac      	cmp	ip, r5
 800d114:	bf38      	it	cc
 800d116:	2200      	movcc	r2, #0
 800d118:	441a      	add	r2, r3
 800d11a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d11e:	b17b      	cbz	r3, 800d140 <__mdiff+0x108>
 800d120:	6107      	str	r7, [r0, #16]
 800d122:	e7a3      	b.n	800d06c <__mdiff+0x34>
 800d124:	f856 8b04 	ldr.w	r8, [r6], #4
 800d128:	fa11 f288 	uxtah	r2, r1, r8
 800d12c:	1414      	asrs	r4, r2, #16
 800d12e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d132:	b292      	uxth	r2, r2
 800d134:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d138:	f84e 2b04 	str.w	r2, [lr], #4
 800d13c:	1421      	asrs	r1, r4, #16
 800d13e:	e7e0      	b.n	800d102 <__mdiff+0xca>
 800d140:	3f01      	subs	r7, #1
 800d142:	e7ea      	b.n	800d11a <__mdiff+0xe2>
 800d144:	0800ea40 	.word	0x0800ea40
 800d148:	0800ea51 	.word	0x0800ea51

0800d14c <__d2b>:
 800d14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d150:	4689      	mov	r9, r1
 800d152:	2101      	movs	r1, #1
 800d154:	ec57 6b10 	vmov	r6, r7, d0
 800d158:	4690      	mov	r8, r2
 800d15a:	f7ff fccf 	bl	800cafc <_Balloc>
 800d15e:	4604      	mov	r4, r0
 800d160:	b930      	cbnz	r0, 800d170 <__d2b+0x24>
 800d162:	4602      	mov	r2, r0
 800d164:	4b25      	ldr	r3, [pc, #148]	; (800d1fc <__d2b+0xb0>)
 800d166:	4826      	ldr	r0, [pc, #152]	; (800d200 <__d2b+0xb4>)
 800d168:	f240 310a 	movw	r1, #778	; 0x30a
 800d16c:	f000 fa1a 	bl	800d5a4 <__assert_func>
 800d170:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d174:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d178:	bb35      	cbnz	r5, 800d1c8 <__d2b+0x7c>
 800d17a:	2e00      	cmp	r6, #0
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	d028      	beq.n	800d1d2 <__d2b+0x86>
 800d180:	4668      	mov	r0, sp
 800d182:	9600      	str	r6, [sp, #0]
 800d184:	f7ff fd82 	bl	800cc8c <__lo0bits>
 800d188:	9900      	ldr	r1, [sp, #0]
 800d18a:	b300      	cbz	r0, 800d1ce <__d2b+0x82>
 800d18c:	9a01      	ldr	r2, [sp, #4]
 800d18e:	f1c0 0320 	rsb	r3, r0, #32
 800d192:	fa02 f303 	lsl.w	r3, r2, r3
 800d196:	430b      	orrs	r3, r1
 800d198:	40c2      	lsrs	r2, r0
 800d19a:	6163      	str	r3, [r4, #20]
 800d19c:	9201      	str	r2, [sp, #4]
 800d19e:	9b01      	ldr	r3, [sp, #4]
 800d1a0:	61a3      	str	r3, [r4, #24]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bf14      	ite	ne
 800d1a6:	2202      	movne	r2, #2
 800d1a8:	2201      	moveq	r2, #1
 800d1aa:	6122      	str	r2, [r4, #16]
 800d1ac:	b1d5      	cbz	r5, 800d1e4 <__d2b+0x98>
 800d1ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1b2:	4405      	add	r5, r0
 800d1b4:	f8c9 5000 	str.w	r5, [r9]
 800d1b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1bc:	f8c8 0000 	str.w	r0, [r8]
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	b003      	add	sp, #12
 800d1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1cc:	e7d5      	b.n	800d17a <__d2b+0x2e>
 800d1ce:	6161      	str	r1, [r4, #20]
 800d1d0:	e7e5      	b.n	800d19e <__d2b+0x52>
 800d1d2:	a801      	add	r0, sp, #4
 800d1d4:	f7ff fd5a 	bl	800cc8c <__lo0bits>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	6163      	str	r3, [r4, #20]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	6122      	str	r2, [r4, #16]
 800d1e0:	3020      	adds	r0, #32
 800d1e2:	e7e3      	b.n	800d1ac <__d2b+0x60>
 800d1e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1ec:	f8c9 0000 	str.w	r0, [r9]
 800d1f0:	6918      	ldr	r0, [r3, #16]
 800d1f2:	f7ff fd2b 	bl	800cc4c <__hi0bits>
 800d1f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1fa:	e7df      	b.n	800d1bc <__d2b+0x70>
 800d1fc:	0800ea40 	.word	0x0800ea40
 800d200:	0800ea51 	.word	0x0800ea51

0800d204 <_calloc_r>:
 800d204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d206:	fba1 2402 	umull	r2, r4, r1, r2
 800d20a:	b94c      	cbnz	r4, 800d220 <_calloc_r+0x1c>
 800d20c:	4611      	mov	r1, r2
 800d20e:	9201      	str	r2, [sp, #4]
 800d210:	f7fd fea4 	bl	800af5c <_malloc_r>
 800d214:	9a01      	ldr	r2, [sp, #4]
 800d216:	4605      	mov	r5, r0
 800d218:	b930      	cbnz	r0, 800d228 <_calloc_r+0x24>
 800d21a:	4628      	mov	r0, r5
 800d21c:	b003      	add	sp, #12
 800d21e:	bd30      	pop	{r4, r5, pc}
 800d220:	220c      	movs	r2, #12
 800d222:	6002      	str	r2, [r0, #0]
 800d224:	2500      	movs	r5, #0
 800d226:	e7f8      	b.n	800d21a <_calloc_r+0x16>
 800d228:	4621      	mov	r1, r4
 800d22a:	f7fd fe6e 	bl	800af0a <memset>
 800d22e:	e7f4      	b.n	800d21a <_calloc_r+0x16>

0800d230 <_free_r>:
 800d230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d232:	2900      	cmp	r1, #0
 800d234:	d044      	beq.n	800d2c0 <_free_r+0x90>
 800d236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23a:	9001      	str	r0, [sp, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f1a1 0404 	sub.w	r4, r1, #4
 800d242:	bfb8      	it	lt
 800d244:	18e4      	addlt	r4, r4, r3
 800d246:	f7ff fc4d 	bl	800cae4 <__malloc_lock>
 800d24a:	4a1e      	ldr	r2, [pc, #120]	; (800d2c4 <_free_r+0x94>)
 800d24c:	9801      	ldr	r0, [sp, #4]
 800d24e:	6813      	ldr	r3, [r2, #0]
 800d250:	b933      	cbnz	r3, 800d260 <_free_r+0x30>
 800d252:	6063      	str	r3, [r4, #4]
 800d254:	6014      	str	r4, [r2, #0]
 800d256:	b003      	add	sp, #12
 800d258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d25c:	f7ff bc48 	b.w	800caf0 <__malloc_unlock>
 800d260:	42a3      	cmp	r3, r4
 800d262:	d908      	bls.n	800d276 <_free_r+0x46>
 800d264:	6825      	ldr	r5, [r4, #0]
 800d266:	1961      	adds	r1, r4, r5
 800d268:	428b      	cmp	r3, r1
 800d26a:	bf01      	itttt	eq
 800d26c:	6819      	ldreq	r1, [r3, #0]
 800d26e:	685b      	ldreq	r3, [r3, #4]
 800d270:	1949      	addeq	r1, r1, r5
 800d272:	6021      	streq	r1, [r4, #0]
 800d274:	e7ed      	b.n	800d252 <_free_r+0x22>
 800d276:	461a      	mov	r2, r3
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	b10b      	cbz	r3, 800d280 <_free_r+0x50>
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d9fa      	bls.n	800d276 <_free_r+0x46>
 800d280:	6811      	ldr	r1, [r2, #0]
 800d282:	1855      	adds	r5, r2, r1
 800d284:	42a5      	cmp	r5, r4
 800d286:	d10b      	bne.n	800d2a0 <_free_r+0x70>
 800d288:	6824      	ldr	r4, [r4, #0]
 800d28a:	4421      	add	r1, r4
 800d28c:	1854      	adds	r4, r2, r1
 800d28e:	42a3      	cmp	r3, r4
 800d290:	6011      	str	r1, [r2, #0]
 800d292:	d1e0      	bne.n	800d256 <_free_r+0x26>
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	6053      	str	r3, [r2, #4]
 800d29a:	4421      	add	r1, r4
 800d29c:	6011      	str	r1, [r2, #0]
 800d29e:	e7da      	b.n	800d256 <_free_r+0x26>
 800d2a0:	d902      	bls.n	800d2a8 <_free_r+0x78>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	e7d6      	b.n	800d256 <_free_r+0x26>
 800d2a8:	6825      	ldr	r5, [r4, #0]
 800d2aa:	1961      	adds	r1, r4, r5
 800d2ac:	428b      	cmp	r3, r1
 800d2ae:	bf04      	itt	eq
 800d2b0:	6819      	ldreq	r1, [r3, #0]
 800d2b2:	685b      	ldreq	r3, [r3, #4]
 800d2b4:	6063      	str	r3, [r4, #4]
 800d2b6:	bf04      	itt	eq
 800d2b8:	1949      	addeq	r1, r1, r5
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	6054      	str	r4, [r2, #4]
 800d2be:	e7ca      	b.n	800d256 <_free_r+0x26>
 800d2c0:	b003      	add	sp, #12
 800d2c2:	bd30      	pop	{r4, r5, pc}
 800d2c4:	20005424 	.word	0x20005424

0800d2c8 <__ssputs_r>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	688e      	ldr	r6, [r1, #8]
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	4690      	mov	r8, r2
 800d2d6:	461f      	mov	r7, r3
 800d2d8:	d838      	bhi.n	800d34c <__ssputs_r+0x84>
 800d2da:	898a      	ldrh	r2, [r1, #12]
 800d2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2e0:	d032      	beq.n	800d348 <__ssputs_r+0x80>
 800d2e2:	6825      	ldr	r5, [r4, #0]
 800d2e4:	6909      	ldr	r1, [r1, #16]
 800d2e6:	eba5 0901 	sub.w	r9, r5, r1
 800d2ea:	6965      	ldr	r5, [r4, #20]
 800d2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	444b      	add	r3, r9
 800d2f8:	106d      	asrs	r5, r5, #1
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	bf38      	it	cc
 800d2fe:	461d      	movcc	r5, r3
 800d300:	0553      	lsls	r3, r2, #21
 800d302:	d531      	bpl.n	800d368 <__ssputs_r+0xa0>
 800d304:	4629      	mov	r1, r5
 800d306:	f7fd fe29 	bl	800af5c <_malloc_r>
 800d30a:	4606      	mov	r6, r0
 800d30c:	b950      	cbnz	r0, 800d324 <__ssputs_r+0x5c>
 800d30e:	230c      	movs	r3, #12
 800d310:	f8ca 3000 	str.w	r3, [sl]
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	6921      	ldr	r1, [r4, #16]
 800d326:	464a      	mov	r2, r9
 800d328:	f7fd fde1 	bl	800aeee <memcpy>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	6126      	str	r6, [r4, #16]
 800d33a:	6165      	str	r5, [r4, #20]
 800d33c:	444e      	add	r6, r9
 800d33e:	eba5 0509 	sub.w	r5, r5, r9
 800d342:	6026      	str	r6, [r4, #0]
 800d344:	60a5      	str	r5, [r4, #8]
 800d346:	463e      	mov	r6, r7
 800d348:	42be      	cmp	r6, r7
 800d34a:	d900      	bls.n	800d34e <__ssputs_r+0x86>
 800d34c:	463e      	mov	r6, r7
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	4632      	mov	r2, r6
 800d352:	4641      	mov	r1, r8
 800d354:	f000 f968 	bl	800d628 <memmove>
 800d358:	68a3      	ldr	r3, [r4, #8]
 800d35a:	1b9b      	subs	r3, r3, r6
 800d35c:	60a3      	str	r3, [r4, #8]
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	4433      	add	r3, r6
 800d362:	6023      	str	r3, [r4, #0]
 800d364:	2000      	movs	r0, #0
 800d366:	e7db      	b.n	800d320 <__ssputs_r+0x58>
 800d368:	462a      	mov	r2, r5
 800d36a:	f000 f977 	bl	800d65c <_realloc_r>
 800d36e:	4606      	mov	r6, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d1e1      	bne.n	800d338 <__ssputs_r+0x70>
 800d374:	6921      	ldr	r1, [r4, #16]
 800d376:	4650      	mov	r0, sl
 800d378:	f7ff ff5a 	bl	800d230 <_free_r>
 800d37c:	e7c7      	b.n	800d30e <__ssputs_r+0x46>
	...

0800d380 <_svfiprintf_r>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	4698      	mov	r8, r3
 800d386:	898b      	ldrh	r3, [r1, #12]
 800d388:	061b      	lsls	r3, r3, #24
 800d38a:	b09d      	sub	sp, #116	; 0x74
 800d38c:	4607      	mov	r7, r0
 800d38e:	460d      	mov	r5, r1
 800d390:	4614      	mov	r4, r2
 800d392:	d50e      	bpl.n	800d3b2 <_svfiprintf_r+0x32>
 800d394:	690b      	ldr	r3, [r1, #16]
 800d396:	b963      	cbnz	r3, 800d3b2 <_svfiprintf_r+0x32>
 800d398:	2140      	movs	r1, #64	; 0x40
 800d39a:	f7fd fddf 	bl	800af5c <_malloc_r>
 800d39e:	6028      	str	r0, [r5, #0]
 800d3a0:	6128      	str	r0, [r5, #16]
 800d3a2:	b920      	cbnz	r0, 800d3ae <_svfiprintf_r+0x2e>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	e0d1      	b.n	800d552 <_svfiprintf_r+0x1d2>
 800d3ae:	2340      	movs	r3, #64	; 0x40
 800d3b0:	616b      	str	r3, [r5, #20]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b6:	2320      	movs	r3, #32
 800d3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c0:	2330      	movs	r3, #48	; 0x30
 800d3c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d56c <_svfiprintf_r+0x1ec>
 800d3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3ca:	f04f 0901 	mov.w	r9, #1
 800d3ce:	4623      	mov	r3, r4
 800d3d0:	469a      	mov	sl, r3
 800d3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d6:	b10a      	cbz	r2, 800d3dc <_svfiprintf_r+0x5c>
 800d3d8:	2a25      	cmp	r2, #37	; 0x25
 800d3da:	d1f9      	bne.n	800d3d0 <_svfiprintf_r+0x50>
 800d3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e0:	d00b      	beq.n	800d3fa <_svfiprintf_r+0x7a>
 800d3e2:	465b      	mov	r3, fp
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f7ff ff6d 	bl	800d2c8 <__ssputs_r>
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f000 80aa 	beq.w	800d548 <_svfiprintf_r+0x1c8>
 800d3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f6:	445a      	add	r2, fp
 800d3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80a2 	beq.w	800d548 <_svfiprintf_r+0x1c8>
 800d404:	2300      	movs	r3, #0
 800d406:	f04f 32ff 	mov.w	r2, #4294967295
 800d40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d40e:	f10a 0a01 	add.w	sl, sl, #1
 800d412:	9304      	str	r3, [sp, #16]
 800d414:	9307      	str	r3, [sp, #28]
 800d416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d41a:	931a      	str	r3, [sp, #104]	; 0x68
 800d41c:	4654      	mov	r4, sl
 800d41e:	2205      	movs	r2, #5
 800d420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d424:	4851      	ldr	r0, [pc, #324]	; (800d56c <_svfiprintf_r+0x1ec>)
 800d426:	f7f2 fedb 	bl	80001e0 <memchr>
 800d42a:	9a04      	ldr	r2, [sp, #16]
 800d42c:	b9d8      	cbnz	r0, 800d466 <_svfiprintf_r+0xe6>
 800d42e:	06d0      	lsls	r0, r2, #27
 800d430:	bf44      	itt	mi
 800d432:	2320      	movmi	r3, #32
 800d434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d438:	0711      	lsls	r1, r2, #28
 800d43a:	bf44      	itt	mi
 800d43c:	232b      	movmi	r3, #43	; 0x2b
 800d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b2a      	cmp	r3, #42	; 0x2a
 800d448:	d015      	beq.n	800d476 <_svfiprintf_r+0xf6>
 800d44a:	9a07      	ldr	r2, [sp, #28]
 800d44c:	4654      	mov	r4, sl
 800d44e:	2000      	movs	r0, #0
 800d450:	f04f 0c0a 	mov.w	ip, #10
 800d454:	4621      	mov	r1, r4
 800d456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d45a:	3b30      	subs	r3, #48	; 0x30
 800d45c:	2b09      	cmp	r3, #9
 800d45e:	d94e      	bls.n	800d4fe <_svfiprintf_r+0x17e>
 800d460:	b1b0      	cbz	r0, 800d490 <_svfiprintf_r+0x110>
 800d462:	9207      	str	r2, [sp, #28]
 800d464:	e014      	b.n	800d490 <_svfiprintf_r+0x110>
 800d466:	eba0 0308 	sub.w	r3, r0, r8
 800d46a:	fa09 f303 	lsl.w	r3, r9, r3
 800d46e:	4313      	orrs	r3, r2
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	46a2      	mov	sl, r4
 800d474:	e7d2      	b.n	800d41c <_svfiprintf_r+0x9c>
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	1d19      	adds	r1, r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	9103      	str	r1, [sp, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bfbb      	ittet	lt
 800d482:	425b      	neglt	r3, r3
 800d484:	f042 0202 	orrlt.w	r2, r2, #2
 800d488:	9307      	strge	r3, [sp, #28]
 800d48a:	9307      	strlt	r3, [sp, #28]
 800d48c:	bfb8      	it	lt
 800d48e:	9204      	strlt	r2, [sp, #16]
 800d490:	7823      	ldrb	r3, [r4, #0]
 800d492:	2b2e      	cmp	r3, #46	; 0x2e
 800d494:	d10c      	bne.n	800d4b0 <_svfiprintf_r+0x130>
 800d496:	7863      	ldrb	r3, [r4, #1]
 800d498:	2b2a      	cmp	r3, #42	; 0x2a
 800d49a:	d135      	bne.n	800d508 <_svfiprintf_r+0x188>
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	1d1a      	adds	r2, r3, #4
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	9203      	str	r2, [sp, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bfb8      	it	lt
 800d4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ac:	3402      	adds	r4, #2
 800d4ae:	9305      	str	r3, [sp, #20]
 800d4b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d57c <_svfiprintf_r+0x1fc>
 800d4b4:	7821      	ldrb	r1, [r4, #0]
 800d4b6:	2203      	movs	r2, #3
 800d4b8:	4650      	mov	r0, sl
 800d4ba:	f7f2 fe91 	bl	80001e0 <memchr>
 800d4be:	b140      	cbz	r0, 800d4d2 <_svfiprintf_r+0x152>
 800d4c0:	2340      	movs	r3, #64	; 0x40
 800d4c2:	eba0 000a 	sub.w	r0, r0, sl
 800d4c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	4303      	orrs	r3, r0
 800d4ce:	3401      	adds	r4, #1
 800d4d0:	9304      	str	r3, [sp, #16]
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	4826      	ldr	r0, [pc, #152]	; (800d570 <_svfiprintf_r+0x1f0>)
 800d4d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4dc:	2206      	movs	r2, #6
 800d4de:	f7f2 fe7f 	bl	80001e0 <memchr>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d038      	beq.n	800d558 <_svfiprintf_r+0x1d8>
 800d4e6:	4b23      	ldr	r3, [pc, #140]	; (800d574 <_svfiprintf_r+0x1f4>)
 800d4e8:	bb1b      	cbnz	r3, 800d532 <_svfiprintf_r+0x1b2>
 800d4ea:	9b03      	ldr	r3, [sp, #12]
 800d4ec:	3307      	adds	r3, #7
 800d4ee:	f023 0307 	bic.w	r3, r3, #7
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	9303      	str	r3, [sp, #12]
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	4433      	add	r3, r6
 800d4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d4fc:	e767      	b.n	800d3ce <_svfiprintf_r+0x4e>
 800d4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d502:	460c      	mov	r4, r1
 800d504:	2001      	movs	r0, #1
 800d506:	e7a5      	b.n	800d454 <_svfiprintf_r+0xd4>
 800d508:	2300      	movs	r3, #0
 800d50a:	3401      	adds	r4, #1
 800d50c:	9305      	str	r3, [sp, #20]
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0c0a 	mov.w	ip, #10
 800d514:	4620      	mov	r0, r4
 800d516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51a:	3a30      	subs	r2, #48	; 0x30
 800d51c:	2a09      	cmp	r2, #9
 800d51e:	d903      	bls.n	800d528 <_svfiprintf_r+0x1a8>
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0c5      	beq.n	800d4b0 <_svfiprintf_r+0x130>
 800d524:	9105      	str	r1, [sp, #20]
 800d526:	e7c3      	b.n	800d4b0 <_svfiprintf_r+0x130>
 800d528:	fb0c 2101 	mla	r1, ip, r1, r2
 800d52c:	4604      	mov	r4, r0
 800d52e:	2301      	movs	r3, #1
 800d530:	e7f0      	b.n	800d514 <_svfiprintf_r+0x194>
 800d532:	ab03      	add	r3, sp, #12
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	462a      	mov	r2, r5
 800d538:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <_svfiprintf_r+0x1f8>)
 800d53a:	a904      	add	r1, sp, #16
 800d53c:	4638      	mov	r0, r7
 800d53e:	f7fd fe21 	bl	800b184 <_printf_float>
 800d542:	1c42      	adds	r2, r0, #1
 800d544:	4606      	mov	r6, r0
 800d546:	d1d6      	bne.n	800d4f6 <_svfiprintf_r+0x176>
 800d548:	89ab      	ldrh	r3, [r5, #12]
 800d54a:	065b      	lsls	r3, r3, #25
 800d54c:	f53f af2c 	bmi.w	800d3a8 <_svfiprintf_r+0x28>
 800d550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d552:	b01d      	add	sp, #116	; 0x74
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d558:	ab03      	add	r3, sp, #12
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	462a      	mov	r2, r5
 800d55e:	4b06      	ldr	r3, [pc, #24]	; (800d578 <_svfiprintf_r+0x1f8>)
 800d560:	a904      	add	r1, sp, #16
 800d562:	4638      	mov	r0, r7
 800d564:	f7fe f8b2 	bl	800b6cc <_printf_i>
 800d568:	e7eb      	b.n	800d542 <_svfiprintf_r+0x1c2>
 800d56a:	bf00      	nop
 800d56c:	0800ebac 	.word	0x0800ebac
 800d570:	0800ebb6 	.word	0x0800ebb6
 800d574:	0800b185 	.word	0x0800b185
 800d578:	0800d2c9 	.word	0x0800d2c9
 800d57c:	0800ebb2 	.word	0x0800ebb2

0800d580 <_read_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d07      	ldr	r5, [pc, #28]	; (800d5a0 <_read_r+0x20>)
 800d584:	4604      	mov	r4, r0
 800d586:	4608      	mov	r0, r1
 800d588:	4611      	mov	r1, r2
 800d58a:	2200      	movs	r2, #0
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	f7f5 fbe4 	bl	8002d5c <_read>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_read_r+0x1e>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_read_r+0x1e>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	2000542c 	.word	0x2000542c

0800d5a4 <__assert_func>:
 800d5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5a6:	4614      	mov	r4, r2
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <__assert_func+0x2c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	68d8      	ldr	r0, [r3, #12]
 800d5b2:	b14c      	cbz	r4, 800d5c8 <__assert_func+0x24>
 800d5b4:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <__assert_func+0x30>)
 800d5b6:	9100      	str	r1, [sp, #0]
 800d5b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5bc:	4906      	ldr	r1, [pc, #24]	; (800d5d8 <__assert_func+0x34>)
 800d5be:	462b      	mov	r3, r5
 800d5c0:	f000 f80e 	bl	800d5e0 <fiprintf>
 800d5c4:	f000 faa0 	bl	800db08 <abort>
 800d5c8:	4b04      	ldr	r3, [pc, #16]	; (800d5dc <__assert_func+0x38>)
 800d5ca:	461c      	mov	r4, r3
 800d5cc:	e7f3      	b.n	800d5b6 <__assert_func+0x12>
 800d5ce:	bf00      	nop
 800d5d0:	20000034 	.word	0x20000034
 800d5d4:	0800ebbd 	.word	0x0800ebbd
 800d5d8:	0800ebca 	.word	0x0800ebca
 800d5dc:	0800ebf8 	.word	0x0800ebf8

0800d5e0 <fiprintf>:
 800d5e0:	b40e      	push	{r1, r2, r3}
 800d5e2:	b503      	push	{r0, r1, lr}
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	4805      	ldr	r0, [pc, #20]	; (800d600 <fiprintf+0x20>)
 800d5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ee:	6800      	ldr	r0, [r0, #0]
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	f000 f88b 	bl	800d70c <_vfiprintf_r>
 800d5f6:	b002      	add	sp, #8
 800d5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5fc:	b003      	add	sp, #12
 800d5fe:	4770      	bx	lr
 800d600:	20000034 	.word	0x20000034

0800d604 <__ascii_mbtowc>:
 800d604:	b082      	sub	sp, #8
 800d606:	b901      	cbnz	r1, 800d60a <__ascii_mbtowc+0x6>
 800d608:	a901      	add	r1, sp, #4
 800d60a:	b142      	cbz	r2, 800d61e <__ascii_mbtowc+0x1a>
 800d60c:	b14b      	cbz	r3, 800d622 <__ascii_mbtowc+0x1e>
 800d60e:	7813      	ldrb	r3, [r2, #0]
 800d610:	600b      	str	r3, [r1, #0]
 800d612:	7812      	ldrb	r2, [r2, #0]
 800d614:	1e10      	subs	r0, r2, #0
 800d616:	bf18      	it	ne
 800d618:	2001      	movne	r0, #1
 800d61a:	b002      	add	sp, #8
 800d61c:	4770      	bx	lr
 800d61e:	4610      	mov	r0, r2
 800d620:	e7fb      	b.n	800d61a <__ascii_mbtowc+0x16>
 800d622:	f06f 0001 	mvn.w	r0, #1
 800d626:	e7f8      	b.n	800d61a <__ascii_mbtowc+0x16>

0800d628 <memmove>:
 800d628:	4288      	cmp	r0, r1
 800d62a:	b510      	push	{r4, lr}
 800d62c:	eb01 0402 	add.w	r4, r1, r2
 800d630:	d902      	bls.n	800d638 <memmove+0x10>
 800d632:	4284      	cmp	r4, r0
 800d634:	4623      	mov	r3, r4
 800d636:	d807      	bhi.n	800d648 <memmove+0x20>
 800d638:	1e43      	subs	r3, r0, #1
 800d63a:	42a1      	cmp	r1, r4
 800d63c:	d008      	beq.n	800d650 <memmove+0x28>
 800d63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d646:	e7f8      	b.n	800d63a <memmove+0x12>
 800d648:	4402      	add	r2, r0
 800d64a:	4601      	mov	r1, r0
 800d64c:	428a      	cmp	r2, r1
 800d64e:	d100      	bne.n	800d652 <memmove+0x2a>
 800d650:	bd10      	pop	{r4, pc}
 800d652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d65a:	e7f7      	b.n	800d64c <memmove+0x24>

0800d65c <_realloc_r>:
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	4680      	mov	r8, r0
 800d662:	4614      	mov	r4, r2
 800d664:	460e      	mov	r6, r1
 800d666:	b921      	cbnz	r1, 800d672 <_realloc_r+0x16>
 800d668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d66c:	4611      	mov	r1, r2
 800d66e:	f7fd bc75 	b.w	800af5c <_malloc_r>
 800d672:	b92a      	cbnz	r2, 800d680 <_realloc_r+0x24>
 800d674:	f7ff fddc 	bl	800d230 <_free_r>
 800d678:	4625      	mov	r5, r4
 800d67a:	4628      	mov	r0, r5
 800d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d680:	f000 faae 	bl	800dbe0 <_malloc_usable_size_r>
 800d684:	4284      	cmp	r4, r0
 800d686:	4607      	mov	r7, r0
 800d688:	d802      	bhi.n	800d690 <_realloc_r+0x34>
 800d68a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d68e:	d812      	bhi.n	800d6b6 <_realloc_r+0x5a>
 800d690:	4621      	mov	r1, r4
 800d692:	4640      	mov	r0, r8
 800d694:	f7fd fc62 	bl	800af5c <_malloc_r>
 800d698:	4605      	mov	r5, r0
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0ed      	beq.n	800d67a <_realloc_r+0x1e>
 800d69e:	42bc      	cmp	r4, r7
 800d6a0:	4622      	mov	r2, r4
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	bf28      	it	cs
 800d6a6:	463a      	movcs	r2, r7
 800d6a8:	f7fd fc21 	bl	800aeee <memcpy>
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	f7ff fdbe 	bl	800d230 <_free_r>
 800d6b4:	e7e1      	b.n	800d67a <_realloc_r+0x1e>
 800d6b6:	4635      	mov	r5, r6
 800d6b8:	e7df      	b.n	800d67a <_realloc_r+0x1e>

0800d6ba <__sfputc_r>:
 800d6ba:	6893      	ldr	r3, [r2, #8]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	b410      	push	{r4}
 800d6c2:	6093      	str	r3, [r2, #8]
 800d6c4:	da08      	bge.n	800d6d8 <__sfputc_r+0x1e>
 800d6c6:	6994      	ldr	r4, [r2, #24]
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	db01      	blt.n	800d6d0 <__sfputc_r+0x16>
 800d6cc:	290a      	cmp	r1, #10
 800d6ce:	d103      	bne.n	800d6d8 <__sfputc_r+0x1e>
 800d6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6d4:	f000 b94a 	b.w	800d96c <__swbuf_r>
 800d6d8:	6813      	ldr	r3, [r2, #0]
 800d6da:	1c58      	adds	r0, r3, #1
 800d6dc:	6010      	str	r0, [r2, #0]
 800d6de:	7019      	strb	r1, [r3, #0]
 800d6e0:	4608      	mov	r0, r1
 800d6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <__sfputs_r>:
 800d6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	460f      	mov	r7, r1
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	18d5      	adds	r5, r2, r3
 800d6f2:	42ac      	cmp	r4, r5
 800d6f4:	d101      	bne.n	800d6fa <__sfputs_r+0x12>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e007      	b.n	800d70a <__sfputs_r+0x22>
 800d6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fe:	463a      	mov	r2, r7
 800d700:	4630      	mov	r0, r6
 800d702:	f7ff ffda 	bl	800d6ba <__sfputc_r>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	d1f3      	bne.n	800d6f2 <__sfputs_r+0xa>
 800d70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d70c <_vfiprintf_r>:
 800d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d710:	460d      	mov	r5, r1
 800d712:	b09d      	sub	sp, #116	; 0x74
 800d714:	4614      	mov	r4, r2
 800d716:	4698      	mov	r8, r3
 800d718:	4606      	mov	r6, r0
 800d71a:	b118      	cbz	r0, 800d724 <_vfiprintf_r+0x18>
 800d71c:	6983      	ldr	r3, [r0, #24]
 800d71e:	b90b      	cbnz	r3, 800d724 <_vfiprintf_r+0x18>
 800d720:	f7fd fb20 	bl	800ad64 <__sinit>
 800d724:	4b89      	ldr	r3, [pc, #548]	; (800d94c <_vfiprintf_r+0x240>)
 800d726:	429d      	cmp	r5, r3
 800d728:	d11b      	bne.n	800d762 <_vfiprintf_r+0x56>
 800d72a:	6875      	ldr	r5, [r6, #4]
 800d72c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d72e:	07d9      	lsls	r1, r3, #31
 800d730:	d405      	bmi.n	800d73e <_vfiprintf_r+0x32>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	059a      	lsls	r2, r3, #22
 800d736:	d402      	bmi.n	800d73e <_vfiprintf_r+0x32>
 800d738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d73a:	f7fd fbd6 	bl	800aeea <__retarget_lock_acquire_recursive>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	071b      	lsls	r3, r3, #28
 800d742:	d501      	bpl.n	800d748 <_vfiprintf_r+0x3c>
 800d744:	692b      	ldr	r3, [r5, #16]
 800d746:	b9eb      	cbnz	r3, 800d784 <_vfiprintf_r+0x78>
 800d748:	4629      	mov	r1, r5
 800d74a:	4630      	mov	r0, r6
 800d74c:	f000 f96e 	bl	800da2c <__swsetup_r>
 800d750:	b1c0      	cbz	r0, 800d784 <_vfiprintf_r+0x78>
 800d752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d754:	07dc      	lsls	r4, r3, #31
 800d756:	d50e      	bpl.n	800d776 <_vfiprintf_r+0x6a>
 800d758:	f04f 30ff 	mov.w	r0, #4294967295
 800d75c:	b01d      	add	sp, #116	; 0x74
 800d75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d762:	4b7b      	ldr	r3, [pc, #492]	; (800d950 <_vfiprintf_r+0x244>)
 800d764:	429d      	cmp	r5, r3
 800d766:	d101      	bne.n	800d76c <_vfiprintf_r+0x60>
 800d768:	68b5      	ldr	r5, [r6, #8]
 800d76a:	e7df      	b.n	800d72c <_vfiprintf_r+0x20>
 800d76c:	4b79      	ldr	r3, [pc, #484]	; (800d954 <_vfiprintf_r+0x248>)
 800d76e:	429d      	cmp	r5, r3
 800d770:	bf08      	it	eq
 800d772:	68f5      	ldreq	r5, [r6, #12]
 800d774:	e7da      	b.n	800d72c <_vfiprintf_r+0x20>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	0598      	lsls	r0, r3, #22
 800d77a:	d4ed      	bmi.n	800d758 <_vfiprintf_r+0x4c>
 800d77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d77e:	f7fd fbb5 	bl	800aeec <__retarget_lock_release_recursive>
 800d782:	e7e9      	b.n	800d758 <_vfiprintf_r+0x4c>
 800d784:	2300      	movs	r3, #0
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
 800d788:	2320      	movs	r3, #32
 800d78a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d792:	2330      	movs	r3, #48	; 0x30
 800d794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d958 <_vfiprintf_r+0x24c>
 800d798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d79c:	f04f 0901 	mov.w	r9, #1
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	469a      	mov	sl, r3
 800d7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a8:	b10a      	cbz	r2, 800d7ae <_vfiprintf_r+0xa2>
 800d7aa:	2a25      	cmp	r2, #37	; 0x25
 800d7ac:	d1f9      	bne.n	800d7a2 <_vfiprintf_r+0x96>
 800d7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d7b2:	d00b      	beq.n	800d7cc <_vfiprintf_r+0xc0>
 800d7b4:	465b      	mov	r3, fp
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ff94 	bl	800d6e8 <__sfputs_r>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	f000 80aa 	beq.w	800d91a <_vfiprintf_r+0x20e>
 800d7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c8:	445a      	add	r2, fp
 800d7ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 80a2 	beq.w	800d91a <_vfiprintf_r+0x20e>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e0:	f10a 0a01 	add.w	sl, sl, #1
 800d7e4:	9304      	str	r3, [sp, #16]
 800d7e6:	9307      	str	r3, [sp, #28]
 800d7e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ee:	4654      	mov	r4, sl
 800d7f0:	2205      	movs	r2, #5
 800d7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f6:	4858      	ldr	r0, [pc, #352]	; (800d958 <_vfiprintf_r+0x24c>)
 800d7f8:	f7f2 fcf2 	bl	80001e0 <memchr>
 800d7fc:	9a04      	ldr	r2, [sp, #16]
 800d7fe:	b9d8      	cbnz	r0, 800d838 <_vfiprintf_r+0x12c>
 800d800:	06d1      	lsls	r1, r2, #27
 800d802:	bf44      	itt	mi
 800d804:	2320      	movmi	r3, #32
 800d806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d80a:	0713      	lsls	r3, r2, #28
 800d80c:	bf44      	itt	mi
 800d80e:	232b      	movmi	r3, #43	; 0x2b
 800d810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d814:	f89a 3000 	ldrb.w	r3, [sl]
 800d818:	2b2a      	cmp	r3, #42	; 0x2a
 800d81a:	d015      	beq.n	800d848 <_vfiprintf_r+0x13c>
 800d81c:	9a07      	ldr	r2, [sp, #28]
 800d81e:	4654      	mov	r4, sl
 800d820:	2000      	movs	r0, #0
 800d822:	f04f 0c0a 	mov.w	ip, #10
 800d826:	4621      	mov	r1, r4
 800d828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d82c:	3b30      	subs	r3, #48	; 0x30
 800d82e:	2b09      	cmp	r3, #9
 800d830:	d94e      	bls.n	800d8d0 <_vfiprintf_r+0x1c4>
 800d832:	b1b0      	cbz	r0, 800d862 <_vfiprintf_r+0x156>
 800d834:	9207      	str	r2, [sp, #28]
 800d836:	e014      	b.n	800d862 <_vfiprintf_r+0x156>
 800d838:	eba0 0308 	sub.w	r3, r0, r8
 800d83c:	fa09 f303 	lsl.w	r3, r9, r3
 800d840:	4313      	orrs	r3, r2
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	46a2      	mov	sl, r4
 800d846:	e7d2      	b.n	800d7ee <_vfiprintf_r+0xe2>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	1d19      	adds	r1, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	9103      	str	r1, [sp, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfbb      	ittet	lt
 800d854:	425b      	neglt	r3, r3
 800d856:	f042 0202 	orrlt.w	r2, r2, #2
 800d85a:	9307      	strge	r3, [sp, #28]
 800d85c:	9307      	strlt	r3, [sp, #28]
 800d85e:	bfb8      	it	lt
 800d860:	9204      	strlt	r2, [sp, #16]
 800d862:	7823      	ldrb	r3, [r4, #0]
 800d864:	2b2e      	cmp	r3, #46	; 0x2e
 800d866:	d10c      	bne.n	800d882 <_vfiprintf_r+0x176>
 800d868:	7863      	ldrb	r3, [r4, #1]
 800d86a:	2b2a      	cmp	r3, #42	; 0x2a
 800d86c:	d135      	bne.n	800d8da <_vfiprintf_r+0x1ce>
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	1d1a      	adds	r2, r3, #4
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	9203      	str	r2, [sp, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	bfb8      	it	lt
 800d87a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d87e:	3402      	adds	r4, #2
 800d880:	9305      	str	r3, [sp, #20]
 800d882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d968 <_vfiprintf_r+0x25c>
 800d886:	7821      	ldrb	r1, [r4, #0]
 800d888:	2203      	movs	r2, #3
 800d88a:	4650      	mov	r0, sl
 800d88c:	f7f2 fca8 	bl	80001e0 <memchr>
 800d890:	b140      	cbz	r0, 800d8a4 <_vfiprintf_r+0x198>
 800d892:	2340      	movs	r3, #64	; 0x40
 800d894:	eba0 000a 	sub.w	r0, r0, sl
 800d898:	fa03 f000 	lsl.w	r0, r3, r0
 800d89c:	9b04      	ldr	r3, [sp, #16]
 800d89e:	4303      	orrs	r3, r0
 800d8a0:	3401      	adds	r4, #1
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a8:	482c      	ldr	r0, [pc, #176]	; (800d95c <_vfiprintf_r+0x250>)
 800d8aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8ae:	2206      	movs	r2, #6
 800d8b0:	f7f2 fc96 	bl	80001e0 <memchr>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d03f      	beq.n	800d938 <_vfiprintf_r+0x22c>
 800d8b8:	4b29      	ldr	r3, [pc, #164]	; (800d960 <_vfiprintf_r+0x254>)
 800d8ba:	bb1b      	cbnz	r3, 800d904 <_vfiprintf_r+0x1f8>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	3307      	adds	r3, #7
 800d8c0:	f023 0307 	bic.w	r3, r3, #7
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	9303      	str	r3, [sp, #12]
 800d8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ca:	443b      	add	r3, r7
 800d8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ce:	e767      	b.n	800d7a0 <_vfiprintf_r+0x94>
 800d8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	e7a5      	b.n	800d826 <_vfiprintf_r+0x11a>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	3401      	adds	r4, #1
 800d8de:	9305      	str	r3, [sp, #20]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f04f 0c0a 	mov.w	ip, #10
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ec:	3a30      	subs	r2, #48	; 0x30
 800d8ee:	2a09      	cmp	r2, #9
 800d8f0:	d903      	bls.n	800d8fa <_vfiprintf_r+0x1ee>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0c5      	beq.n	800d882 <_vfiprintf_r+0x176>
 800d8f6:	9105      	str	r1, [sp, #20]
 800d8f8:	e7c3      	b.n	800d882 <_vfiprintf_r+0x176>
 800d8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8fe:	4604      	mov	r4, r0
 800d900:	2301      	movs	r3, #1
 800d902:	e7f0      	b.n	800d8e6 <_vfiprintf_r+0x1da>
 800d904:	ab03      	add	r3, sp, #12
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	462a      	mov	r2, r5
 800d90a:	4b16      	ldr	r3, [pc, #88]	; (800d964 <_vfiprintf_r+0x258>)
 800d90c:	a904      	add	r1, sp, #16
 800d90e:	4630      	mov	r0, r6
 800d910:	f7fd fc38 	bl	800b184 <_printf_float>
 800d914:	4607      	mov	r7, r0
 800d916:	1c78      	adds	r0, r7, #1
 800d918:	d1d6      	bne.n	800d8c8 <_vfiprintf_r+0x1bc>
 800d91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d91c:	07d9      	lsls	r1, r3, #31
 800d91e:	d405      	bmi.n	800d92c <_vfiprintf_r+0x220>
 800d920:	89ab      	ldrh	r3, [r5, #12]
 800d922:	059a      	lsls	r2, r3, #22
 800d924:	d402      	bmi.n	800d92c <_vfiprintf_r+0x220>
 800d926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d928:	f7fd fae0 	bl	800aeec <__retarget_lock_release_recursive>
 800d92c:	89ab      	ldrh	r3, [r5, #12]
 800d92e:	065b      	lsls	r3, r3, #25
 800d930:	f53f af12 	bmi.w	800d758 <_vfiprintf_r+0x4c>
 800d934:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d936:	e711      	b.n	800d75c <_vfiprintf_r+0x50>
 800d938:	ab03      	add	r3, sp, #12
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	462a      	mov	r2, r5
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <_vfiprintf_r+0x258>)
 800d940:	a904      	add	r1, sp, #16
 800d942:	4630      	mov	r0, r6
 800d944:	f7fd fec2 	bl	800b6cc <_printf_i>
 800d948:	e7e4      	b.n	800d914 <_vfiprintf_r+0x208>
 800d94a:	bf00      	nop
 800d94c:	0800e848 	.word	0x0800e848
 800d950:	0800e868 	.word	0x0800e868
 800d954:	0800e828 	.word	0x0800e828
 800d958:	0800ebac 	.word	0x0800ebac
 800d95c:	0800ebb6 	.word	0x0800ebb6
 800d960:	0800b185 	.word	0x0800b185
 800d964:	0800d6e9 	.word	0x0800d6e9
 800d968:	0800ebb2 	.word	0x0800ebb2

0800d96c <__swbuf_r>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	460e      	mov	r6, r1
 800d970:	4614      	mov	r4, r2
 800d972:	4605      	mov	r5, r0
 800d974:	b118      	cbz	r0, 800d97e <__swbuf_r+0x12>
 800d976:	6983      	ldr	r3, [r0, #24]
 800d978:	b90b      	cbnz	r3, 800d97e <__swbuf_r+0x12>
 800d97a:	f7fd f9f3 	bl	800ad64 <__sinit>
 800d97e:	4b21      	ldr	r3, [pc, #132]	; (800da04 <__swbuf_r+0x98>)
 800d980:	429c      	cmp	r4, r3
 800d982:	d12b      	bne.n	800d9dc <__swbuf_r+0x70>
 800d984:	686c      	ldr	r4, [r5, #4]
 800d986:	69a3      	ldr	r3, [r4, #24]
 800d988:	60a3      	str	r3, [r4, #8]
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	071a      	lsls	r2, r3, #28
 800d98e:	d52f      	bpl.n	800d9f0 <__swbuf_r+0x84>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	b36b      	cbz	r3, 800d9f0 <__swbuf_r+0x84>
 800d994:	6923      	ldr	r3, [r4, #16]
 800d996:	6820      	ldr	r0, [r4, #0]
 800d998:	1ac0      	subs	r0, r0, r3
 800d99a:	6963      	ldr	r3, [r4, #20]
 800d99c:	b2f6      	uxtb	r6, r6
 800d99e:	4283      	cmp	r3, r0
 800d9a0:	4637      	mov	r7, r6
 800d9a2:	dc04      	bgt.n	800d9ae <__swbuf_r+0x42>
 800d9a4:	4621      	mov	r1, r4
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f7ff f842 	bl	800ca30 <_fflush_r>
 800d9ac:	bb30      	cbnz	r0, 800d9fc <__swbuf_r+0x90>
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	60a3      	str	r3, [r4, #8]
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	1c5a      	adds	r2, r3, #1
 800d9b8:	6022      	str	r2, [r4, #0]
 800d9ba:	701e      	strb	r6, [r3, #0]
 800d9bc:	6963      	ldr	r3, [r4, #20]
 800d9be:	3001      	adds	r0, #1
 800d9c0:	4283      	cmp	r3, r0
 800d9c2:	d004      	beq.n	800d9ce <__swbuf_r+0x62>
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	07db      	lsls	r3, r3, #31
 800d9c8:	d506      	bpl.n	800d9d8 <__swbuf_r+0x6c>
 800d9ca:	2e0a      	cmp	r6, #10
 800d9cc:	d104      	bne.n	800d9d8 <__swbuf_r+0x6c>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	f7ff f82d 	bl	800ca30 <_fflush_r>
 800d9d6:	b988      	cbnz	r0, 800d9fc <__swbuf_r+0x90>
 800d9d8:	4638      	mov	r0, r7
 800d9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <__swbuf_r+0x9c>)
 800d9de:	429c      	cmp	r4, r3
 800d9e0:	d101      	bne.n	800d9e6 <__swbuf_r+0x7a>
 800d9e2:	68ac      	ldr	r4, [r5, #8]
 800d9e4:	e7cf      	b.n	800d986 <__swbuf_r+0x1a>
 800d9e6:	4b09      	ldr	r3, [pc, #36]	; (800da0c <__swbuf_r+0xa0>)
 800d9e8:	429c      	cmp	r4, r3
 800d9ea:	bf08      	it	eq
 800d9ec:	68ec      	ldreq	r4, [r5, #12]
 800d9ee:	e7ca      	b.n	800d986 <__swbuf_r+0x1a>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f000 f81a 	bl	800da2c <__swsetup_r>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0cb      	beq.n	800d994 <__swbuf_r+0x28>
 800d9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800da00:	e7ea      	b.n	800d9d8 <__swbuf_r+0x6c>
 800da02:	bf00      	nop
 800da04:	0800e848 	.word	0x0800e848
 800da08:	0800e868 	.word	0x0800e868
 800da0c:	0800e828 	.word	0x0800e828

0800da10 <__ascii_wctomb>:
 800da10:	b149      	cbz	r1, 800da26 <__ascii_wctomb+0x16>
 800da12:	2aff      	cmp	r2, #255	; 0xff
 800da14:	bf85      	ittet	hi
 800da16:	238a      	movhi	r3, #138	; 0x8a
 800da18:	6003      	strhi	r3, [r0, #0]
 800da1a:	700a      	strbls	r2, [r1, #0]
 800da1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800da20:	bf98      	it	ls
 800da22:	2001      	movls	r0, #1
 800da24:	4770      	bx	lr
 800da26:	4608      	mov	r0, r1
 800da28:	4770      	bx	lr
	...

0800da2c <__swsetup_r>:
 800da2c:	4b32      	ldr	r3, [pc, #200]	; (800daf8 <__swsetup_r+0xcc>)
 800da2e:	b570      	push	{r4, r5, r6, lr}
 800da30:	681d      	ldr	r5, [r3, #0]
 800da32:	4606      	mov	r6, r0
 800da34:	460c      	mov	r4, r1
 800da36:	b125      	cbz	r5, 800da42 <__swsetup_r+0x16>
 800da38:	69ab      	ldr	r3, [r5, #24]
 800da3a:	b913      	cbnz	r3, 800da42 <__swsetup_r+0x16>
 800da3c:	4628      	mov	r0, r5
 800da3e:	f7fd f991 	bl	800ad64 <__sinit>
 800da42:	4b2e      	ldr	r3, [pc, #184]	; (800dafc <__swsetup_r+0xd0>)
 800da44:	429c      	cmp	r4, r3
 800da46:	d10f      	bne.n	800da68 <__swsetup_r+0x3c>
 800da48:	686c      	ldr	r4, [r5, #4]
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da50:	0719      	lsls	r1, r3, #28
 800da52:	d42c      	bmi.n	800daae <__swsetup_r+0x82>
 800da54:	06dd      	lsls	r5, r3, #27
 800da56:	d411      	bmi.n	800da7c <__swsetup_r+0x50>
 800da58:	2309      	movs	r3, #9
 800da5a:	6033      	str	r3, [r6, #0]
 800da5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295
 800da66:	e03e      	b.n	800dae6 <__swsetup_r+0xba>
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <__swsetup_r+0xd4>)
 800da6a:	429c      	cmp	r4, r3
 800da6c:	d101      	bne.n	800da72 <__swsetup_r+0x46>
 800da6e:	68ac      	ldr	r4, [r5, #8]
 800da70:	e7eb      	b.n	800da4a <__swsetup_r+0x1e>
 800da72:	4b24      	ldr	r3, [pc, #144]	; (800db04 <__swsetup_r+0xd8>)
 800da74:	429c      	cmp	r4, r3
 800da76:	bf08      	it	eq
 800da78:	68ec      	ldreq	r4, [r5, #12]
 800da7a:	e7e6      	b.n	800da4a <__swsetup_r+0x1e>
 800da7c:	0758      	lsls	r0, r3, #29
 800da7e:	d512      	bpl.n	800daa6 <__swsetup_r+0x7a>
 800da80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da82:	b141      	cbz	r1, 800da96 <__swsetup_r+0x6a>
 800da84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da88:	4299      	cmp	r1, r3
 800da8a:	d002      	beq.n	800da92 <__swsetup_r+0x66>
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7ff fbcf 	bl	800d230 <_free_r>
 800da92:	2300      	movs	r3, #0
 800da94:	6363      	str	r3, [r4, #52]	; 0x34
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da9c:	81a3      	strh	r3, [r4, #12]
 800da9e:	2300      	movs	r3, #0
 800daa0:	6063      	str	r3, [r4, #4]
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	6023      	str	r3, [r4, #0]
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	f043 0308 	orr.w	r3, r3, #8
 800daac:	81a3      	strh	r3, [r4, #12]
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	b94b      	cbnz	r3, 800dac6 <__swsetup_r+0x9a>
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dabc:	d003      	beq.n	800dac6 <__swsetup_r+0x9a>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4630      	mov	r0, r6
 800dac2:	f000 f84d 	bl	800db60 <__smakebuf_r>
 800dac6:	89a0      	ldrh	r0, [r4, #12]
 800dac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dacc:	f010 0301 	ands.w	r3, r0, #1
 800dad0:	d00a      	beq.n	800dae8 <__swsetup_r+0xbc>
 800dad2:	2300      	movs	r3, #0
 800dad4:	60a3      	str	r3, [r4, #8]
 800dad6:	6963      	ldr	r3, [r4, #20]
 800dad8:	425b      	negs	r3, r3
 800dada:	61a3      	str	r3, [r4, #24]
 800dadc:	6923      	ldr	r3, [r4, #16]
 800dade:	b943      	cbnz	r3, 800daf2 <__swsetup_r+0xc6>
 800dae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dae4:	d1ba      	bne.n	800da5c <__swsetup_r+0x30>
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	0781      	lsls	r1, r0, #30
 800daea:	bf58      	it	pl
 800daec:	6963      	ldrpl	r3, [r4, #20]
 800daee:	60a3      	str	r3, [r4, #8]
 800daf0:	e7f4      	b.n	800dadc <__swsetup_r+0xb0>
 800daf2:	2000      	movs	r0, #0
 800daf4:	e7f7      	b.n	800dae6 <__swsetup_r+0xba>
 800daf6:	bf00      	nop
 800daf8:	20000034 	.word	0x20000034
 800dafc:	0800e848 	.word	0x0800e848
 800db00:	0800e868 	.word	0x0800e868
 800db04:	0800e828 	.word	0x0800e828

0800db08 <abort>:
 800db08:	b508      	push	{r3, lr}
 800db0a:	2006      	movs	r0, #6
 800db0c:	f000 f898 	bl	800dc40 <raise>
 800db10:	2001      	movs	r0, #1
 800db12:	f7f5 f919 	bl	8002d48 <_exit>

0800db16 <__swhatbuf_r>:
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	460e      	mov	r6, r1
 800db1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1e:	2900      	cmp	r1, #0
 800db20:	b096      	sub	sp, #88	; 0x58
 800db22:	4614      	mov	r4, r2
 800db24:	461d      	mov	r5, r3
 800db26:	da08      	bge.n	800db3a <__swhatbuf_r+0x24>
 800db28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	602a      	str	r2, [r5, #0]
 800db30:	061a      	lsls	r2, r3, #24
 800db32:	d410      	bmi.n	800db56 <__swhatbuf_r+0x40>
 800db34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db38:	e00e      	b.n	800db58 <__swhatbuf_r+0x42>
 800db3a:	466a      	mov	r2, sp
 800db3c:	f000 f89c 	bl	800dc78 <_fstat_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	dbf1      	blt.n	800db28 <__swhatbuf_r+0x12>
 800db44:	9a01      	ldr	r2, [sp, #4]
 800db46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db4e:	425a      	negs	r2, r3
 800db50:	415a      	adcs	r2, r3
 800db52:	602a      	str	r2, [r5, #0]
 800db54:	e7ee      	b.n	800db34 <__swhatbuf_r+0x1e>
 800db56:	2340      	movs	r3, #64	; 0x40
 800db58:	2000      	movs	r0, #0
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	b016      	add	sp, #88	; 0x58
 800db5e:	bd70      	pop	{r4, r5, r6, pc}

0800db60 <__smakebuf_r>:
 800db60:	898b      	ldrh	r3, [r1, #12]
 800db62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db64:	079d      	lsls	r5, r3, #30
 800db66:	4606      	mov	r6, r0
 800db68:	460c      	mov	r4, r1
 800db6a:	d507      	bpl.n	800db7c <__smakebuf_r+0x1c>
 800db6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	6123      	str	r3, [r4, #16]
 800db74:	2301      	movs	r3, #1
 800db76:	6163      	str	r3, [r4, #20]
 800db78:	b002      	add	sp, #8
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	ab01      	add	r3, sp, #4
 800db7e:	466a      	mov	r2, sp
 800db80:	f7ff ffc9 	bl	800db16 <__swhatbuf_r>
 800db84:	9900      	ldr	r1, [sp, #0]
 800db86:	4605      	mov	r5, r0
 800db88:	4630      	mov	r0, r6
 800db8a:	f7fd f9e7 	bl	800af5c <_malloc_r>
 800db8e:	b948      	cbnz	r0, 800dba4 <__smakebuf_r+0x44>
 800db90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db94:	059a      	lsls	r2, r3, #22
 800db96:	d4ef      	bmi.n	800db78 <__smakebuf_r+0x18>
 800db98:	f023 0303 	bic.w	r3, r3, #3
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	e7e3      	b.n	800db6c <__smakebuf_r+0xc>
 800dba4:	4b0d      	ldr	r3, [pc, #52]	; (800dbdc <__smakebuf_r+0x7c>)
 800dba6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	6020      	str	r0, [r4, #0]
 800dbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	9b00      	ldr	r3, [sp, #0]
 800dbb4:	6163      	str	r3, [r4, #20]
 800dbb6:	9b01      	ldr	r3, [sp, #4]
 800dbb8:	6120      	str	r0, [r4, #16]
 800dbba:	b15b      	cbz	r3, 800dbd4 <__smakebuf_r+0x74>
 800dbbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f000 f86b 	bl	800dc9c <_isatty_r>
 800dbc6:	b128      	cbz	r0, 800dbd4 <__smakebuf_r+0x74>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	f023 0303 	bic.w	r3, r3, #3
 800dbce:	f043 0301 	orr.w	r3, r3, #1
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	89a0      	ldrh	r0, [r4, #12]
 800dbd6:	4305      	orrs	r5, r0
 800dbd8:	81a5      	strh	r5, [r4, #12]
 800dbda:	e7cd      	b.n	800db78 <__smakebuf_r+0x18>
 800dbdc:	0800acfd 	.word	0x0800acfd

0800dbe0 <_malloc_usable_size_r>:
 800dbe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbe4:	1f18      	subs	r0, r3, #4
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bfbc      	itt	lt
 800dbea:	580b      	ldrlt	r3, [r1, r0]
 800dbec:	18c0      	addlt	r0, r0, r3
 800dbee:	4770      	bx	lr

0800dbf0 <_raise_r>:
 800dbf0:	291f      	cmp	r1, #31
 800dbf2:	b538      	push	{r3, r4, r5, lr}
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	460d      	mov	r5, r1
 800dbf8:	d904      	bls.n	800dc04 <_raise_r+0x14>
 800dbfa:	2316      	movs	r3, #22
 800dbfc:	6003      	str	r3, [r0, #0]
 800dbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dc02:	bd38      	pop	{r3, r4, r5, pc}
 800dc04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc06:	b112      	cbz	r2, 800dc0e <_raise_r+0x1e>
 800dc08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc0c:	b94b      	cbnz	r3, 800dc22 <_raise_r+0x32>
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 f830 	bl	800dc74 <_getpid_r>
 800dc14:	462a      	mov	r2, r5
 800dc16:	4601      	mov	r1, r0
 800dc18:	4620      	mov	r0, r4
 800dc1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc1e:	f000 b817 	b.w	800dc50 <_kill_r>
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d00a      	beq.n	800dc3c <_raise_r+0x4c>
 800dc26:	1c59      	adds	r1, r3, #1
 800dc28:	d103      	bne.n	800dc32 <_raise_r+0x42>
 800dc2a:	2316      	movs	r3, #22
 800dc2c:	6003      	str	r3, [r0, #0]
 800dc2e:	2001      	movs	r0, #1
 800dc30:	e7e7      	b.n	800dc02 <_raise_r+0x12>
 800dc32:	2400      	movs	r4, #0
 800dc34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	4798      	blx	r3
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	e7e0      	b.n	800dc02 <_raise_r+0x12>

0800dc40 <raise>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <raise+0xc>)
 800dc42:	4601      	mov	r1, r0
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	f7ff bfd3 	b.w	800dbf0 <_raise_r>
 800dc4a:	bf00      	nop
 800dc4c:	20000034 	.word	0x20000034

0800dc50 <_kill_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d07      	ldr	r5, [pc, #28]	; (800dc70 <_kill_r+0x20>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4604      	mov	r4, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	f7f5 f863 	bl	8002d28 <_kill>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	d102      	bne.n	800dc6c <_kill_r+0x1c>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b103      	cbz	r3, 800dc6c <_kill_r+0x1c>
 800dc6a:	6023      	str	r3, [r4, #0]
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}
 800dc6e:	bf00      	nop
 800dc70:	2000542c 	.word	0x2000542c

0800dc74 <_getpid_r>:
 800dc74:	f7f5 b850 	b.w	8002d18 <_getpid>

0800dc78 <_fstat_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4d07      	ldr	r5, [pc, #28]	; (800dc98 <_fstat_r+0x20>)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4604      	mov	r4, r0
 800dc80:	4608      	mov	r0, r1
 800dc82:	4611      	mov	r1, r2
 800dc84:	602b      	str	r3, [r5, #0]
 800dc86:	f7f5 f8ae 	bl	8002de6 <_fstat>
 800dc8a:	1c43      	adds	r3, r0, #1
 800dc8c:	d102      	bne.n	800dc94 <_fstat_r+0x1c>
 800dc8e:	682b      	ldr	r3, [r5, #0]
 800dc90:	b103      	cbz	r3, 800dc94 <_fstat_r+0x1c>
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	bd38      	pop	{r3, r4, r5, pc}
 800dc96:	bf00      	nop
 800dc98:	2000542c 	.word	0x2000542c

0800dc9c <_isatty_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d06      	ldr	r5, [pc, #24]	; (800dcb8 <_isatty_r+0x1c>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	f7f5 f8ad 	bl	8002e06 <_isatty>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_isatty_r+0x1a>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_isatty_r+0x1a>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	2000542c 	.word	0x2000542c

0800dcbc <_init>:
 800dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcbe:	bf00      	nop
 800dcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc2:	bc08      	pop	{r3}
 800dcc4:	469e      	mov	lr, r3
 800dcc6:	4770      	bx	lr

0800dcc8 <_fini>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	bf00      	nop
 800dccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcce:	bc08      	pop	{r3}
 800dcd0:	469e      	mov	lr, r3
 800dcd2:	4770      	bx	lr
