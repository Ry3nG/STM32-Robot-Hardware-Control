
MDP_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800d818  0800d818  0001d818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e74c  0800e74c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800e74c  0800e74c  0001e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e754  0800e754  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e754  0800e754  0001e754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e758  0800e758  0001e758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800e75c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          000051e0  20000208  20000208  00020208  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200053e8  200053e8  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa99  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e85  00000000  00000000  0003fccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00043b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018e0  00000000  00000000  00045590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aa9  00000000  00000000  00046e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dda7  00000000  00000000  0006b919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5df  00000000  00000000  000896c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165c9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008168  00000000  00000000  00165cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7fc 	.word	0x0800d7fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d7fc 	.word	0x0800d7fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	460b      	mov	r3, r1
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <_ICM20948_SelectUserBank+0x26>
 8000fae:	2368      	movs	r3, #104	; 0x68
 8000fb0:	e000      	b.n	8000fb4 <_ICM20948_SelectUserBank+0x28>
 8000fb2:	2369      	movs	r3, #105	; 0x69
 8000fb4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000fb6:	7dbb      	ldrb	r3, [r7, #22]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	f107 0315 	add.w	r3, r7, #21
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	227f      	movs	r2, #127	; 0x7f
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f002 fcfb 	bl	80039cc <HAL_I2C_Mem_Write>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	70fb      	strb	r3, [r7, #3]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	70bb      	strb	r3, [r7, #2]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <_ICM20948_WriteByte+0x28>
 8001008:	2368      	movs	r3, #104	; 0x68
 800100a:	e000      	b.n	800100e <_ICM20948_WriteByte+0x2a>
 800100c:	2369      	movs	r3, #105	; 0x69
 800100e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	b29b      	uxth	r3, r3
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	b299      	uxth	r1, r3
 8001018:	78bb      	ldrb	r3, [r7, #2]
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1c7b      	adds	r3, r7, #1
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 fcce 	bl	80039cc <HAL_I2C_Mem_Write>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
 800104a:	4613      	mov	r3, r2
 800104c:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff97 	bl	8000f8c <_ICM20948_SelectUserBank>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8001062:	78f9      	ldrb	r1, [r7, #3]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	2206      	movs	r2, #6
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffbb 	bl	8000fe4 <_ICM20948_WriteByte>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8001072:	20c8      	movs	r0, #200	; 0xc8
 8001074:	f001 fffe 	bl	8003074 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001078:	78f9      	ldrb	r1, [r7, #3]
 800107a:	2301      	movs	r3, #1
 800107c:	2206      	movs	r2, #6
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <_ICM20948_WriteByte>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8001088:	78f9      	ldrb	r1, [r7, #3]
 800108a:	2338      	movs	r3, #56	; 0x38
 800108c:	2207      	movs	r2, #7
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa8 	bl	8000fe4 <_ICM20948_WriteByte>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2202      	movs	r2, #2
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff74 	bl	8000f8c <_ICM20948_SelectUserBank>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 80010a8:	78bb      	ldrb	r3, [r7, #2]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	f043 0319 	orr.w	r3, r3, #25
 80010b2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	78f9      	ldrb	r1, [r7, #3]
 80010b8:	2201      	movs	r2, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff92 	bl	8000fe4 <_ICM20948_WriteByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 80010c4:	78f9      	ldrb	r1, [r7, #3]
 80010c6:	2304      	movs	r3, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff8a 	bl	8000fe4 <_ICM20948_WriteByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff56 	bl	8000f8c <_ICM20948_SelectUserBank>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 80010e4:	78f9      	ldrb	r1, [r7, #3]
 80010e6:	2302      	movs	r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff7a 	bl	8000fe4 <_ICM20948_WriteByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001100:	f001 ff76 	bl	8002ff0 <HAL_Init>

	/* USER CODE BEGIN Init */
	OLED_Init();
 8001104:	f009 fae0 	bl	800a6c8 <OLED_Init>
	PID_init(&left_pid, PID_POSITION, pid_param_right, max_out, max_iout);
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <main+0x120>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <main+0x124>)
 8001110:	ed93 7a00 	vldr	s14, [r3]
 8001114:	eef0 0a47 	vmov.f32	s1, s14
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	4a41      	ldr	r2, [pc, #260]	; (8001224 <main+0x128>)
 800111e:	2100      	movs	r1, #0
 8001120:	4841      	ldr	r0, [pc, #260]	; (8001228 <main+0x12c>)
 8001122:	f001 fa18 	bl	8002556 <PID_init>
	PID_init(&right_pid, PID_POSITION, pid_param_right, max_out, max_iout);
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <main+0x120>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <main+0x124>)
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	eef0 0a47 	vmov.f32	s1, s14
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <main+0x128>)
 800113c:	2100      	movs	r1, #0
 800113e:	483b      	ldr	r0, [pc, #236]	; (800122c <main+0x130>)
 8001140:	f001 fa09 	bl	8002556 <PID_init>

	PID_init(&left_turn_pid, PID_POSITION, pid_param_turn, max_out_turn,
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <main+0x134>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <main+0x124>)
 800114c:	ed93 7a00 	vldr	s14, [r3]
 8001150:	eef0 0a47 	vmov.f32	s1, s14
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	4a36      	ldr	r2, [pc, #216]	; (8001234 <main+0x138>)
 800115a:	2100      	movs	r1, #0
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <main+0x13c>)
 800115e:	f001 f9fa 	bl	8002556 <PID_init>
			max_iout);
	PID_init(&right_turn_pid, PID_POSITION, pid_param_turn, max_out_turn,
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <main+0x134>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <main+0x124>)
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	eef0 0a47 	vmov.f32	s1, s14
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <main+0x138>)
 8001178:	2100      	movs	r1, #0
 800117a:	4830      	ldr	r0, [pc, #192]	; (800123c <main+0x140>)
 800117c:	f001 f9eb 	bl	8002556 <PID_init>
			max_iout);

	ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS);
 8001180:	2203      	movs	r2, #3
 8001182:	2100      	movs	r1, #0
 8001184:	482e      	ldr	r0, [pc, #184]	; (8001240 <main+0x144>)
 8001186:	f7ff ff5a 	bl	800103e <ICM20948_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800118a:	f000 f877 	bl	800127c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800118e:	f000 fb1b 	bl	80017c8 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001192:	f000 fa45 	bl	8001620 <MX_TIM8_Init>
	MX_TIM1_Init();
 8001196:	f000 f8fd 	bl	8001394 <MX_TIM1_Init>
	MX_TIM2_Init();
 800119a:	f000 f999 	bl	80014d0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800119e:	f000 f9eb 	bl	8001578 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 80011a2:	f000 fae7 	bl	8001774 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 80011a6:	f000 f8c7 	bl	8001338 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 80011aa:	f009 fa8d 	bl	800a6c8 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 80011ae:	220a      	movs	r2, #10
 80011b0:	4924      	ldr	r1, [pc, #144]	; (8001244 <main+0x148>)
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <main+0x14c>)
 80011b4:	f005 fa19 	bl	80065ea <HAL_UART_Receive_IT>

	//start pwm
	//servo
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011b8:	210c      	movs	r1, #12
 80011ba:	4824      	ldr	r0, [pc, #144]	; (800124c <main+0x150>)
 80011bc:	f004 f88e 	bl	80052dc <HAL_TIM_PWM_Start>

	// Left Motor Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011c0:	213c      	movs	r1, #60	; 0x3c
 80011c2:	4823      	ldr	r0, [pc, #140]	; (8001250 <main+0x154>)
 80011c4:	f004 f9f8 	bl	80055b8 <HAL_TIM_Encoder_Start>
	// Right Motor Encoder
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011c8:	213c      	movs	r1, #60	; 0x3c
 80011ca:	4822      	ldr	r0, [pc, #136]	; (8001254 <main+0x158>)
 80011cc:	f004 f9f4 	bl	80055b8 <HAL_TIM_Encoder_Start>

	// Set up the Motors PWM
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	4821      	ldr	r0, [pc, #132]	; (8001258 <main+0x15c>)
 80011d4:	f004 f882 	bl	80052dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011d8:	2104      	movs	r1, #4
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <main+0x15c>)
 80011dc:	f004 f87e 	bl	80052dc <HAL_TIM_PWM_Start>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80011e0:	f006 f9e0 	bl	80075a4 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of chassisCommandQueue */
	chassisCommandQueueHandle = osMessageQueueNew(100, sizeof(uint32_t),
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <main+0x160>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	2064      	movs	r0, #100	; 0x64
 80011ea:	f006 fad2 	bl	8007792 <osMessageQueueNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <main+0x164>)
 80011f2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <main+0x168>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	481b      	ldr	r0, [pc, #108]	; (8001268 <main+0x16c>)
 80011fa:	f006 fa1d 	bl	8007638 <osThreadNew>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <main+0x170>)
 8001202:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of ChassisTask */
	ChassisTaskHandle = osThreadNew(chassisTask, NULL, &ChassisTask_attributes);
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <main+0x174>)
 8001206:	2100      	movs	r1, #0
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <main+0x178>)
 800120a:	f006 fa15 	bl	8007638 <osThreadNew>
 800120e:	4603      	mov	r3, r0
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <main+0x17c>)
 8001212:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001214:	f006 f9ea 	bl	80075ec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001218:	e7fe      	b.n	8001218 <main+0x11c>
 800121a:	bf00      	nop
 800121c:	20000018 	.word	0x20000018
 8001220:	20000020 	.word	0x20000020
 8001224:	20000000 	.word	0x20000000
 8001228:	20000438 	.word	0x20000438
 800122c:	20000488 	.word	0x20000488
 8001230:	2000001c 	.word	0x2000001c
 8001234:	2000000c 	.word	0x2000000c
 8001238:	200004d8 	.word	0x200004d8
 800123c:	20000528 	.word	0x20000528
 8001240:	20000224 	.word	0x20000224
 8001244:	200003e8 	.word	0x200003e8
 8001248:	20000398 	.word	0x20000398
 800124c:	20000278 	.word	0x20000278
 8001250:	200002c0 	.word	0x200002c0
 8001254:	20000308 	.word	0x20000308
 8001258:	20000350 	.word	0x20000350
 800125c:	0800d8d8 	.word	0x0800d8d8
 8001260:	200003e4 	.word	0x200003e4
 8001264:	0800d890 	.word	0x0800d890
 8001268:	08001d95 	.word	0x08001d95
 800126c:	200003dc 	.word	0x200003dc
 8001270:	0800d8b4 	.word	0x0800d8b4
 8001274:	08001db9 	.word	0x08001db9
 8001278:	200003e0 	.word	0x200003e0

0800127c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f009 fbdd 	bl	800aa4a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <SystemClock_Config+0xb4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <SystemClock_Config+0xb4>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <SystemClock_Config+0xb4>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <SystemClock_Config+0xb8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <SystemClock_Config+0xb8>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <SystemClock_Config+0xb8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fa11 	bl	8004714 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x80>
		Error_Handler();
 80012f8:	f001 f928 	bl	800254c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fc74 	bl	8004c04 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xaa>
		Error_Handler();
 8001322:	f001 f913 	bl	800254c <Error_Handler>
	}
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x50>)
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <MX_I2C1_Init+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x50>)
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_I2C1_Init+0x58>)
 8001346:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_I2C1_Init+0x50>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_I2C1_Init+0x50>)
 8001376:	f002 f9e5 	bl	8003744 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001380:	f001 f8e4 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000224 	.word	0x20000224
 800138c:	40005400 	.word	0x40005400
 8001390:	000186a0 	.word	0x000186a0

08001394 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800139a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f009 fb3c 	bl	800aa4a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013d4:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <MX_TIM1_Init+0x138>)
 80013d6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013da:	22a0      	movs	r2, #160	; 0xa0
 80013dc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ea:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MX_TIM1_Init+0x134>)
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80013fe:	4832      	ldr	r0, [pc, #200]	; (80014c8 <MX_TIM1_Init+0x134>)
 8001400:	f003 fe52 	bl	80050a8 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800140a:	f001 f89f 	bl	800254c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001418:	4619      	mov	r1, r3
 800141a:	482b      	ldr	r0, [pc, #172]	; (80014c8 <MX_TIM1_Init+0x134>)
 800141c:	f004 fb24 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x96>
		Error_Handler();
 8001426:	f001 f891 	bl	800254c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800142a:	4827      	ldr	r0, [pc, #156]	; (80014c8 <MX_TIM1_Init+0x134>)
 800142c:	f003 fefc 	bl	8005228 <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001436:	f001 f889 	bl	800254c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001442:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001446:	4619      	mov	r1, r3
 8001448:	481f      	ldr	r0, [pc, #124]	; (80014c8 <MX_TIM1_Init+0x134>)
 800144a:	f004 ff0d 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001454:	f001 f87a 	bl	800254c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	220c      	movs	r2, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM1_Init+0x134>)
 800147a:	f004 fa33 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8001484:	f001 f862 	bl	800254c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM1_Init+0x134>)
 80014ac:	f004 ff58 	bl	8006360 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 80014b6:	f001 f849 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM1_Init+0x134>)
 80014bc:	f001 fb54 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3758      	adds	r7, #88	; 0x58
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000278 	.word	0x20000278
 80014cc:	40010000 	.word	0x40010000

080014d0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	; 0x30
 80014d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fab3 	bl	800aa4a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_TIM2_Init+0xa4>)
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_TIM2_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_TIM2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_TIM2_Init+0xa4>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_TIM2_Init+0xa4>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_TIM2_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001514:	2303      	movs	r3, #3
 8001516:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001524:	230a      	movs	r3, #10
 8001526:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_TIM2_Init+0xa4>)
 8001540:	f003 ff94 	bl	800546c <HAL_TIM_Encoder_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800154a:	f000 ffff 	bl	800254c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_TIM2_Init+0xa4>)
 800155c:	f004 fe84 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001566:	f000 fff1 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3730      	adds	r7, #48	; 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002c0 	.word	0x200002c0

08001578 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f009 fa5f 	bl	800aa4a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_TIM3_Init+0xa0>)
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <MX_TIM3_Init+0xa4>)
 8001598:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_TIM3_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80015ca:	230a      	movs	r3, #10
 80015cc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015e6:	f003 ff41 	bl	800546c <HAL_TIM_Encoder_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80015f0:	f000 ffac 	bl	800254c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM3_Init+0xa0>)
 8001602:	f004 fe31 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 800160c:	f000 ff9e 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000308 	.word	0x20000308
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2220      	movs	r2, #32
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f009 f9f6 	bl	800aa4a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <MX_TIM8_Init+0x14c>)
 8001660:	4a43      	ldr	r2, [pc, #268]	; (8001770 <MX_TIM8_Init+0x150>)
 8001662:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001664:	4b41      	ldr	r3, [pc, #260]	; (800176c <MX_TIM8_Init+0x14c>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <MX_TIM8_Init+0x14c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <MX_TIM8_Init+0x14c>)
 8001672:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001676:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_TIM8_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <MX_TIM8_Init+0x14c>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <MX_TIM8_Init+0x14c>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800168a:	4838      	ldr	r0, [pc, #224]	; (800176c <MX_TIM8_Init+0x14c>)
 800168c:	f003 fd0c 	bl	80050a8 <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001696:	f000 ff59 	bl	800254c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80016a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a4:	4619      	mov	r1, r3
 80016a6:	4831      	ldr	r0, [pc, #196]	; (800176c <MX_TIM8_Init+0x14c>)
 80016a8:	f004 f9de 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM8_Init+0x96>
		Error_Handler();
 80016b2:	f000 ff4b 	bl	800254c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80016b6:	482d      	ldr	r0, [pc, #180]	; (800176c <MX_TIM8_Init+0x14c>)
 80016b8:	f003 fdb6 	bl	8005228 <HAL_TIM_PWM_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80016c2:	f000 ff43 	bl	800254c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80016ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d2:	4619      	mov	r1, r3
 80016d4:	4825      	ldr	r0, [pc, #148]	; (800176c <MX_TIM8_Init+0x14c>)
 80016d6:	f004 fdc7 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80016e0:	f000 ff34 	bl	800254c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e4:	2360      	movs	r3, #96	; 0x60
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	4818      	ldr	r0, [pc, #96]	; (800176c <MX_TIM8_Init+0x14c>)
 800170a:	f004 f8eb 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001714:	f000 ff1a 	bl	800254c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_TIM8_Init+0x14c>)
 8001722:	f004 f8df 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 800172c:	f000 ff0e 	bl	800254c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM8_Init+0x14c>)
 8001754:	f004 fe04 	bl	8006360 <HAL_TIMEx_ConfigBreakDeadTime>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800175e:	f000 fef5 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3758      	adds	r7, #88	; 0x58
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000350 	.word	0x20000350
 8001770:	40010400 	.word	0x40010400

08001774 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_USART3_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART3_UART_Init+0x4c>)
 80017ac:	f004 fe3e 	bl	800642c <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80017b6:	f000 fec9 	bl	800254c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000398 	.word	0x20000398
 80017c4:	40004800 	.word	0x40004800

080017c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <MX_GPIO_Init+0xe0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <MX_GPIO_Init+0xe0>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <MX_GPIO_Init+0xe0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <MX_GPIO_Init+0xe0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <MX_GPIO_Init+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_GPIO_Init+0xe0>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_GPIO_Init+0xe0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <MX_GPIO_Init+0xe4>)
 8001856:	f001 ff41 	bl	80036dc <HAL_GPIO_WritePin>
			OLED_SCLK_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 800185a:	2200      	movs	r2, #0
 800185c:	213c      	movs	r1, #60	; 0x3c
 800185e:	4814      	ldr	r0, [pc, #80]	; (80018b0 <MX_GPIO_Init+0xe8>)
 8001860:	f001 ff3c 	bl	80036dc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCLK_Pin | OLED_SDA_Pin | OLED_RST_Pin
 8001864:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001868:	617b      	str	r3, [r7, #20]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <MX_GPIO_Init+0xe4>)
 800187e:	f001 fd91 	bl	80033a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 8001882:	233c      	movs	r3, #60	; 0x3c
 8001884:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_GPIO_Init+0xe8>)
 800189a:	f001 fd83 	bl	80033a4 <HAL_GPIO_Init>

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	uint32_t cmd = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
	if (huart == &huart3) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_UART_RxCpltCallback+0x144>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f040 8092 	bne.w	80019ee <HAL_UART_RxCpltCallback+0x13a>
		char c1 = aRxBuffer[0];
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_UART_RxCpltCallback+0x148>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		char c2 = aRxBuffer[1];
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_UART_RxCpltCallback+0x148>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		// char c3 = aRxBuffer[2];
		char d[4];
		memcpy(d, (void*) &aRxBuffer[2], 3);
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2203      	movs	r2, #3
 80018e0:	4947      	ldr	r1, [pc, #284]	; (8001a00 <HAL_UART_RxCpltCallback+0x14c>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 f8a3 	bl	800aa2e <memcpy>
		d[3] = '\0';
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		data = (uint32_t) atoi(d);
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4618      	mov	r0, r3
 80018f4:	f008 ff74 	bl	800a7e0 <atoi>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_UART_RxCpltCallback+0x150>)
 80018fe:	601a      	str	r2, [r3, #0]
		if (c1 == 'n') {
 8001900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001904:	2b6e      	cmp	r3, #110	; 0x6e
 8001906:	d102      	bne.n	800190e <HAL_UART_RxCpltCallback+0x5a>
			newCmdReceived = 1;
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_UART_RxCpltCallback+0x154>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]

		}
		directionCmd = c2;
 800190e:	4a3f      	ldr	r2, [pc, #252]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001910:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001914:	7013      	strb	r3, [r2, #0]
		// steeringCmd = c3;
		uint8_t message1[20];

		sprintf(message1, "cmd:%c,%d", directionCmd, data);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_UART_RxCpltCallback+0x150>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f107 000c 	add.w	r0, r7, #12
 8001924:	493a      	ldr	r1, [pc, #232]	; (8001a10 <HAL_UART_RxCpltCallback+0x15c>)
 8001926:	f009 fe11 	bl	800b54c <siprintf>
		OLED_ShowString(10, 10, message1);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	461a      	mov	r2, r3
 8001930:	210a      	movs	r1, #10
 8001932:	200a      	movs	r0, #10
 8001934:	f008 fe96 	bl	800a664 <OLED_ShowString>

		if (newCmdReceived == 1) {
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_UART_RxCpltCallback+0x154>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d151      	bne.n	80019e4 <HAL_UART_RxCpltCallback+0x130>
			// load direction Cmd and distance data into the queue using the cmd variable
			// w = 1, a = 2, s = 3, d = 4
			if (directionCmd == 'w')
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b77      	cmp	r3, #119	; 0x77
 8001946:	d102      	bne.n	800194e <HAL_UART_RxCpltCallback+0x9a>
				cmd = MOVE_FORWARD;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	e032      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'q')
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b71      	cmp	r3, #113	; 0x71
 8001954:	d102      	bne.n	800195c <HAL_UART_RxCpltCallback+0xa8>
				cmd = MOVE_FORWARD_LEFT;
 8001956:	2303      	movs	r3, #3
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	e02b      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'e')
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b65      	cmp	r3, #101	; 0x65
 8001962:	d102      	bne.n	800196a <HAL_UART_RxCpltCallback+0xb6>
				cmd = MOVE_FORWARD_RIGHT;
 8001964:	2305      	movs	r3, #5
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	e024      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'x')
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b78      	cmp	r3, #120	; 0x78
 8001970:	d102      	bne.n	8001978 <HAL_UART_RxCpltCallback+0xc4>
				cmd = MOVE_BACKWARD;
 8001972:	2302      	movs	r3, #2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	e01d      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'z')
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b7a      	cmp	r3, #122	; 0x7a
 800197e:	d102      	bne.n	8001986 <HAL_UART_RxCpltCallback+0xd2>
				cmd = MOVE_BACKWARD_LEFT;
 8001980:	2304      	movs	r3, #4
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	e016      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'c')
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b63      	cmp	r3, #99	; 0x63
 800198c:	d102      	bne.n	8001994 <HAL_UART_RxCpltCallback+0xe0>
				cmd = MOVE_BACKWARD_RIGHT;
 800198e:	2306      	movs	r3, #6
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e00f      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 's')
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b73      	cmp	r3, #115	; 0x73
 800199a:	d102      	bne.n	80019a2 <HAL_UART_RxCpltCallback+0xee>
				cmd = CENTER_CALIBRATION;
 800199c:	2307      	movs	r3, #7
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e008      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			else if (directionCmd == 'u') {
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_UART_RxCpltCallback+0x158>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b75      	cmp	r3, #117	; 0x75
 80019a8:	d102      	bne.n	80019b0 <HAL_UART_RxCpltCallback+0xfc>
				cmd = MOVE_INFINITELY;
 80019aa:	2308      	movs	r3, #8
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e001      	b.n	80019b4 <HAL_UART_RxCpltCallback+0x100>
			} else
				cmd = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
			cmd = cmd * 1000 + data;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ba:	fb03 f202 	mul.w	r2, r3, r2
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_UART_RxCpltCallback+0x150>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24

			// enqueue the command
			osStatus_t status = osMessageQueuePut(chassisCommandQueueHandle,
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_UART_RxCpltCallback+0x160>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ce:	2300      	movs	r3, #0
 80019d0:	2200      	movs	r2, #0
 80019d2:	f005 ff51 	bl	8007878 <osMessageQueuePut>
 80019d6:	62b8      	str	r0, [r7, #40]	; 0x28
					&cmd, 0, 0);

			HAL_UART_Transmit(&huart3, (uint8_t*) "ACK", 3, 100);
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	2203      	movs	r2, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_UART_RxCpltCallback+0x164>)
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HAL_UART_RxCpltCallback+0x144>)
 80019e0:	f004 fd71 	bl	80064c6 <HAL_UART_Transmit>
			 sprintf(message1, "OTHER");
			 OLED_ShowString(10, 40, message1);
			 }
			 */
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 80019e4:	2205      	movs	r2, #5
 80019e6:	4905      	ldr	r1, [pc, #20]	; (80019fc <HAL_UART_RxCpltCallback+0x148>)
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <HAL_UART_RxCpltCallback+0x144>)
 80019ea:	f004 fdfe 	bl	80065ea <HAL_UART_Receive_IT>
	}
}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000398 	.word	0x20000398
 80019fc:	200003e8 	.word	0x200003e8
 8001a00:	200003ea 	.word	0x200003ea
 8001a04:	200003f0 	.word	0x200003f0
 8001a08:	200003ed 	.word	0x200003ed
 8001a0c:	200003ee 	.word	0x200003ee
 8001a10:	0800d844 	.word	0x0800d844
 8001a14:	200003e4 	.word	0x200003e4
 8001a18:	0800d850 	.word	0x0800d850

08001a1c <setLeftPWM>:

//////////////////// Movement Helper Function ////////////////////
void setLeftPWM(uint16_t dutyCycle) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dutyCycle);
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <setLeftPWM+0x20>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000350 	.word	0x20000350

08001a40 <setRightPWM>:

void setRightPWM(uint16_t dutyCycle) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <setRightPWM+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000350 	.word	0x20000350

08001a64 <moveMotor>:
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
}
void moveMotor(int direction) // 0 is forward, 1 is backward
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	// start the PWM
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4823      	ldr	r0, [pc, #140]	; (8001afc <moveMotor+0x98>)
 8001a70:	f003 fc34 	bl	80052dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001a74:	2104      	movs	r1, #4
 8001a76:	4821      	ldr	r0, [pc, #132]	; (8001afc <moveMotor+0x98>)
 8001a78:	f003 fc30 	bl	80052dc <HAL_TIM_PWM_Start>

	if (direction == 0) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11c      	bne.n	8001abc <moveMotor+0x58>
		// ------- left motor
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2120      	movs	r1, #32
 8001a86:	481e      	ldr	r0, [pc, #120]	; (8001b00 <moveMotor+0x9c>)
 8001a88:	f001 fe28 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2110      	movs	r1, #16
 8001a90:	481b      	ldr	r0, [pc, #108]	; (8001b00 <moveMotor+0x9c>)
 8001a92:	f001 fe23 	bl	80036dc <HAL_GPIO_WritePin>
		// ------- right motor
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <moveMotor+0x9c>)
 8001a9c:	f001 fe1e 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4816      	ldr	r0, [pc, #88]	; (8001b00 <moveMotor+0x9c>)
 8001aa6:	f001 fe19 	bl	80036dc <HAL_GPIO_WritePin>
		// drive the motor
		setLeftPWM(3150);
 8001aaa:	f640 404e 	movw	r0, #3150	; 0xc4e
 8001aae:	f7ff ffb5 	bl	8001a1c <setLeftPWM>
		setRightPWM(3000);
 8001ab2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ab6:	f7ff ffc3 	bl	8001a40 <setRightPWM>
		// drive the motor
		setLeftPWM(3150);
		setRightPWM(3000);
	}

}
 8001aba:	e01b      	b.n	8001af4 <moveMotor+0x90>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2120      	movs	r1, #32
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <moveMotor+0x9c>)
 8001ac2:	f001 fe0b 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2110      	movs	r1, #16
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <moveMotor+0x9c>)
 8001acc:	f001 fe06 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <moveMotor+0x9c>)
 8001ad6:	f001 fe01 	bl	80036dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2108      	movs	r1, #8
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <moveMotor+0x9c>)
 8001ae0:	f001 fdfc 	bl	80036dc <HAL_GPIO_WritePin>
		setLeftPWM(3150);
 8001ae4:	f640 404e 	movw	r0, #3150	; 0xc4e
 8001ae8:	f7ff ff98 	bl	8001a1c <setLeftPWM>
		setRightPWM(3000);
 8001aec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001af0:	f7ff ffa6 	bl	8001a40 <setRightPWM>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000350 	.word	0x20000350
 8001b00:	40020000 	.word	0x40020000

08001b04 <setMotorForward>:

void setMotorForward() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <setMotorForward+0x30>)
 8001b0e:	f001 fde5 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2110      	movs	r1, #16
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <setMotorForward+0x30>)
 8001b18:	f001 fde0 	bl	80036dc <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <setMotorForward+0x30>)
 8001b22:	f001 fddb 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <setMotorForward+0x30>)
 8001b2c:	f001 fdd6 	bl	80036dc <HAL_GPIO_WritePin>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020000 	.word	0x40020000

08001b38 <setMotorBackward>:
void setMotorBackward() {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	// set motor direction
	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <setMotorBackward+0x30>)
 8001b42:	f001 fdcb 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2110      	movs	r1, #16
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <setMotorBackward+0x30>)
 8001b4c:	f001 fdc6 	bl	80036dc <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	2104      	movs	r1, #4
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <setMotorBackward+0x30>)
 8001b56:	f001 fdc1 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2108      	movs	r1, #8
 8001b5e:	4802      	ldr	r0, [pc, #8]	; (8001b68 <setMotorBackward+0x30>)
 8001b60:	f001 fdbc 	bl	80036dc <HAL_GPIO_WritePin>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40020000 	.word	0x40020000

08001b6c <turnLeft>:
void turnLeft() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = LEFT_POS_PWM;
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <turnLeft+0x18>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2271      	movs	r2, #113	; 0x71
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001b78:	20fa      	movs	r0, #250	; 0xfa
 8001b7a:	f005 fdef 	bl	800775c <osDelay>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000278 	.word	0x20000278

08001b88 <turnRight>:
void turnRight() {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHT_POS_PWM;
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <turnRight+0x18>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	22f3      	movs	r2, #243	; 0xf3
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001b94:	20fa      	movs	r0, #250	; 0xfa
 8001b96:	f005 fde1 	bl	800775c <osDelay>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000278 	.word	0x20000278

08001ba4 <faceFront>:
void faceFront() {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = CENTER_POS_PWM;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <faceFront+0x18>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2299      	movs	r2, #153	; 0x99
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001bb0:	20fa      	movs	r0, #250	; 0xfa
 8001bb2:	f005 fdd3 	bl	800775c <osDelay>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000278 	.word	0x20000278

08001bc0 <calibrate>:

void calibrate() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = RIGHT_POS_PWM;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <calibrate+0x18>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	22f3      	movs	r2, #243	; 0xf3
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME);
 8001bcc:	20fa      	movs	r0, #250	; 0xfa
 8001bce:	f005 fdc5 	bl	800775c <osDelay>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000278 	.word	0x20000278
 8001bdc:	00000000 	.word	0x00000000

08001be0 <robotTurn>:

void robotTurn(float *targetAngle) {
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	6078      	str	r0, [r7, #4]
	*targetAngle = 4 * (*targetAngle);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	angleNow = 0;
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <robotTurn+0x140>)
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
	gyroZ = 0;
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <robotTurn+0x144>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8001c0a:	f001 fa27 	bl	800305c <HAL_GetTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <robotTurn+0x148>)
 8001c12:	6013      	str	r3, [r2, #0]
	do {
		if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8001c14:	f001 fa22 	bl	800305c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <robotTurn+0x148>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d9f7      	bls.n	8001c14 <robotTurn+0x34>
			__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <robotTurn+0x14c>)
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	2237      	movs	r2, #55	; 0x37
 8001c36:	21d0      	movs	r1, #208	; 0xd0
 8001c38:	483d      	ldr	r0, [pc, #244]	; (8001d30 <robotTurn+0x150>)
 8001c3a:	f001 ffc1 	bl	8003bc0 <HAL_I2C_Mem_Read>
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <robotTurn+0x14c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <robotTurn+0x14c>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <robotTurn+0x144>)
 8001c52:	801a      	strh	r2, [r3, #0]
			angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <robotTurn+0x140>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc75 	bl	8000548 <__aeabi_f2d>
 8001c5e:	4604      	mov	r4, r0
 8001c60:	460d      	mov	r5, r1
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <robotTurn+0x144>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc5b 	bl	8000524 <__aeabi_i2d>
 8001c6e:	a328      	add	r3, pc, #160	; (adr r3, 8001d10 <robotTurn+0x130>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fdea 	bl	800084c <__aeabi_ddiv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a325      	add	r3, pc, #148	; (adr r3, 8001d18 <robotTurn+0x138>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fcb7 	bl	80005f8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4620      	mov	r0, r4
 8001c90:	4629      	mov	r1, r5
 8001c92:	f7fe fafb 	bl	800028c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ffa3 	bl	8000be8 <__aeabi_d2f>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <robotTurn+0x140>)
 8001ca6:	6013      	str	r3, [r2, #0]
			if (abs(angleNow - *targetAngle) < 0.1)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <robotTurn+0x140>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0d      	blt.n	8001ce0 <robotTurn+0x100>
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <robotTurn+0x140>)
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dd05      	ble.n	8001cec <robotTurn+0x10c>
				break;
			last_curTask_tick = HAL_GetTick();
 8001ce0:	f001 f9bc 	bl	800305c <HAL_GetTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <robotTurn+0x148>)
 8001ce8:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8001cea:	e793      	b.n	8001c14 <robotTurn+0x34>
				break;
 8001cec:	bf00      	nop
		}
	} while (1);
	*targetAngle = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
	setLeftPWM(0);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fe90 	bl	8001a1c <setLeftPWM>
	setRightPWM(0);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fe9f 	bl	8001a40 <setRightPWM>
	calibrate();
 8001d02:	f7ff ff5d 	bl	8001bc0 <calibrate>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	66666666 	.word	0x66666666
 8001d14:	40306666 	.word	0x40306666
 8001d18:	47ae147b 	.word	0x47ae147b
 8001d1c:	3f847ae1 	.word	0x3f847ae1
 8001d20:	200003fc 	.word	0x200003fc
 8001d24:	20000402 	.word	0x20000402
 8001d28:	20000404 	.word	0x20000404
 8001d2c:	20000400 	.word	0x20000400
 8001d30:	20000224 	.word	0x20000224

08001d34 <getEncoderDelta>:

// ENCODER HELPER FUNCTIONS

uint32_t getEncoderDelta(uint32_t count1, uint32_t count2,
		TIM_HandleTypeDef *htim) {
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d10e      	bne.n	8001d6c <getEncoderDelta+0x38>
		if (count2 <= count1) {
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d803      	bhi.n	8001d5e <getEncoderDelta+0x2a>
			return count1 - count2;
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	e014      	b.n	8001d88 <getEncoderDelta+0x54>
		} else {
			return (65535 - count2) + count1;
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d68:	33ff      	adds	r3, #255	; 0xff
 8001d6a:	e00d      	b.n	8001d88 <getEncoderDelta+0x54>
		}
	} else {
		if (count2 >= count1) {
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d303      	bcc.n	8001d7c <getEncoderDelta+0x48>
			return count2 - count1;
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	e005      	b.n	8001d88 <getEncoderDelta+0x54>
		} else {
			return (65535 - count1) + count2;
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d86:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		// Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <StartDefaultTask+0x20>)
 8001da2:	f001 fcb4 	bl	800370e <HAL_GPIO_TogglePin>
		OLED_Refresh_Gram(); // Refresh Ram
 8001da6:	f008 fae9 	bl	800a37c <OLED_Refresh_Gram>
		osDelay(50);
 8001daa:	2032      	movs	r0, #50	; 0x32
 8001dac:	f005 fcd6 	bl	800775c <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001db0:	e7f4      	b.n	8001d9c <StartDefaultTask+0x8>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <chassisTask>:
 * @brief Function implementing the ChassisTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_chassisTask */
void chassisTask(void *argument) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b099      	sub	sp, #100	; 0x64
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN chassisTask */
	uint32_t encoder_A_count1 = 0, encoder_A_count2 = 0, encoder_A_count_delta =
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc8:	2300      	movs	r3, #0
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
			0, encoder_B_count1 = 0, encoder_B_count2 = 0,
 8001dcc:	2300      	movs	r3, #0
 8001dce:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
			encoder_B_count_delta = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t message1[20];
	uint32_t current_cmd = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]

	//Rpi transmit buffer
	uint8_t RpiBuffer[20] = "COMPLE\r\n";
 8001ddc:	4ac0      	ldr	r2, [pc, #768]	; (80020e0 <chassisTask+0x328>)
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de4:	c303      	stmia	r3!, {r0, r1}
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	f107 0311 	add.w	r3, r7, #17
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	f8c3 2007 	str.w	r2, [r3, #7]

	// toMove Flag
	int toMove = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	657b      	str	r3, [r7, #84]	; 0x54
	// disconnect the motor first
	//motorStop();
	faceFront();
 8001dfa:	f7ff fed3 	bl	8001ba4 <faceFront>

	// set initial values for count and ticks for both encoders
	encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 8001dfe:	4bb9      	ldr	r3, [pc, #740]	; (80020e4 <chassisTask+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
	encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8001e06:	4bb8      	ldr	r3, [pc, #736]	; (80020e8 <chassisTask+0x330>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
	/* Infinite loop */
	for (;;) {
		int8_t directionCmdBuffer;
		int16_t distanceCmdBuffer;

		if (!toMove) {
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 81c1 	bne.w	8002198 <chassisTask+0x3e0>
			// decompose commands
			osMessageQueueGet(chassisCommandQueueHandle, &current_cmd, 0, 200);
 8001e16:	4bb5      	ldr	r3, [pc, #724]	; (80020ec <chassisTask+0x334>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f107 011c 	add.w	r1, r7, #28
 8001e1e:	23c8      	movs	r3, #200	; 0xc8
 8001e20:	2200      	movs	r2, #0
 8001e22:	f005 fd89 	bl	8007938 <osMessageQueueGet>
			if (current_cmd != 0) {
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <chassisTask+0x7a>
				cmdFinishFlag = 1;
 8001e2c:	4bb0      	ldr	r3, [pc, #704]	; (80020f0 <chassisTask+0x338>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
			}
			sprintf(message1, "ACK: %d", current_cmd);
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	49ae      	ldr	r1, [pc, #696]	; (80020f4 <chassisTask+0x33c>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f009 fb86 	bl	800b54c <siprintf>

			OLED_ShowString(10, 20, message1);
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	461a      	mov	r2, r3
 8001e46:	2114      	movs	r1, #20
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f008 fc0b 	bl	800a664 <OLED_ShowString>

			uint8_t directionCmd = current_cmd / 1000;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4aa9      	ldr	r2, [pc, #676]	; (80020f8 <chassisTask+0x340>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uint16_t distanceCmd = current_cmd % 1000;
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	4ba6      	ldr	r3, [pc, #664]	; (80020f8 <chassisTask+0x340>)
 8001e60:	fba3 1302 	umull	r1, r3, r3, r2
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	86bb      	strh	r3, [r7, #52]	; 0x34
			directionCmdBuffer = directionCmd;
 8001e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			distanceCmdBuffer = distanceCmd;
 8001e7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			sprintf(message1, "dis: %d", distanceCmdBuffer);
 8001e80:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	499c      	ldr	r1, [pc, #624]	; (80020fc <chassisTask+0x344>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f009 fb5e 	bl	800b54c <siprintf>
			OLED_ShowString(10, 40, message1);
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	461a      	mov	r2, r3
 8001e96:	2128      	movs	r1, #40	; 0x28
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f008 fbe3 	bl	800a664 <OLED_ShowString>

			if (directionCmd == MOVE_INFINITELY) {
 8001e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d104      	bne.n	8001eb0 <chassisTask+0xf8>
				moveMotor(distanceCmd);
 8001ea6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fddb 	bl	8001a64 <moveMotor>
 8001eae:	e173      	b.n	8002198 <chassisTask+0x3e0>
			} else {
				// set motor directions and top speed
				if (directionCmd == MOVE_BACKWARD
 8001eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d007      	beq.n	8001ec8 <chassisTask+0x110>
						|| directionCmd == MOVE_BACKWARD_LEFT
 8001eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d003      	beq.n	8001ec8 <chassisTask+0x110>
						|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d105      	bne.n	8001ed4 <chassisTask+0x11c>
					setMotorBackward();
 8001ec8:	f7ff fe36 	bl	8001b38 <setMotorBackward>
					max_out = 4000;
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <chassisTask+0x348>)
 8001ece:	4a8d      	ldr	r2, [pc, #564]	; (8002104 <chassisTask+0x34c>)
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e004      	b.n	8001ede <chassisTask+0x126>

				} else {
					setMotorForward();
 8001ed4:	f7ff fe16 	bl	8001b04 <setMotorForward>
					max_out = 4000;
 8001ed8:	4b89      	ldr	r3, [pc, #548]	; (8002100 <chassisTask+0x348>)
 8001eda:	4a8a      	ldr	r2, [pc, #552]	; (8002104 <chassisTask+0x34c>)
 8001edc:	601a      	str	r2, [r3, #0]
				}
				// set servo direction
				if (directionCmd == MOVE_FORWARD_LEFT
 8001ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d003      	beq.n	8001eee <chassisTask+0x136>
						|| directionCmd == MOVE_BACKWARD_LEFT) {
 8001ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d102      	bne.n	8001ef4 <chassisTask+0x13c>
					turnLeft();
 8001eee:	f7ff fe3d 	bl	8001b6c <turnLeft>
 8001ef2:	e013      	b.n	8001f1c <chassisTask+0x164>
				} else if (directionCmd == MOVE_FORWARD_RIGHT
 8001ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d003      	beq.n	8001f04 <chassisTask+0x14c>
						|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d102      	bne.n	8001f0a <chassisTask+0x152>
					turnRight();
 8001f04:	f7ff fe40 	bl	8001b88 <turnRight>
 8001f08:	e008      	b.n	8001f1c <chassisTask+0x164>
				} else if (directionCmd == CENTER_CALIBRATION) {
 8001f0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	d102      	bne.n	8001f18 <chassisTask+0x160>
					calibrate();
 8001f12:	f7ff fe55 	bl	8001bc0 <calibrate>
 8001f16:	e001      	b.n	8001f1c <chassisTask+0x164>
				} else {
					faceFront();
 8001f18:	f7ff fe44 	bl	8001ba4 <faceFront>
				}

				// setpoint calculation (PID steering involved)
				if (directionCmd == MOVE_BACKWARD_LEFT
 8001f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d003      	beq.n	8001f2c <chassisTask+0x174>
						|| directionCmd == MOVE_FORWARD_LEFT) {
 8001f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d162      	bne.n	8001ff2 <chassisTask+0x23a>
					setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142 // was 25.5 (dependent on turning radius)
 8001f2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fae8 	bl	8000504 <__aeabi_ui2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b73      	ldr	r3, [pc, #460]	; (8002108 <chassisTask+0x350>)
 8001f3a:	f7fe fc87 	bl	800084c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	f7fe f99f 	bl	800028c <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	a35e      	add	r3, pc, #376	; (adr r3, 80020d0 <chassisTask+0x318>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
							* (16.5 + 16.5)) / DISTANCE_PER_ENCODER_PULSE;
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <chassisTask+0x354>)
 8001f6e:	f7fe fb43 	bl	80005f8 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	a357      	add	r3, pc, #348	; (adr r3, 80020d8 <chassisTask+0x320>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fc64 	bl	800084c <__aeabi_ddiv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
					setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142 // was 25.5 (dependent on turning radius)
 8001f88:	4961      	ldr	r1, [pc, #388]	; (8002110 <chassisTask+0x358>)
 8001f8a:	e9c1 2300 	strd	r2, r3, [r1]
					setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001f8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fab7 	bl	8000504 <__aeabi_ui2d>
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <chassisTask+0x350>)
 8001f9c:	f7fe fc56 	bl	800084c <__aeabi_ddiv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	f7fe f96e 	bl	800028c <__adddf3>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	a345      	add	r3, pc, #276	; (adr r3, 80020d0 <chassisTask+0x318>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb1b 	bl	80005f8 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
							* (16.5)) / DISTANCE_PER_ENCODER_PULSE;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b51      	ldr	r3, [pc, #324]	; (8002114 <chassisTask+0x35c>)
 8001fd0:	f7fe fb12 	bl	80005f8 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a33e      	add	r3, pc, #248	; (adr r3, 80020d8 <chassisTask+0x320>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fc33 	bl	800084c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
					setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8001fea:	494b      	ldr	r1, [pc, #300]	; (8002118 <chassisTask+0x360>)
 8001fec:	e9c1 2300 	strd	r2, r3, [r1]
 8001ff0:	e0ac      	b.n	800214c <chassisTask+0x394>
				} else if (directionCmd == MOVE_FORWARD_RIGHT
 8001ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d004      	beq.n	8002004 <chassisTask+0x24c>
						|| directionCmd == MOVE_BACKWARD_RIGHT) {
 8001ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	f040 8090 	bne.w	8002124 <chassisTask+0x36c>
					setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8002004:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa7c 	bl	8000504 <__aeabi_ui2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <chassisTask+0x350>)
 8002012:	f7fe fc1b 	bl	800084c <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f7fe f933 	bl	800028c <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	a328      	add	r3, pc, #160	; (adr r3, 80020d0 <chassisTask+0x318>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fae0 	bl	80005f8 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
							* (16.5 + 26.5)) / DISTANCE_PER_ENCODER_PULSE; // was 27.3
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <chassisTask+0x364>)
 8002046:	f7fe fad7 	bl	80005f8 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	a321      	add	r3, pc, #132	; (adr r3, 80020d8 <chassisTask+0x320>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fbf8 	bl	800084c <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
					setpoint_left = (((double) distanceCmd / 360) * 2 * 3.142
 8002060:	492d      	ldr	r1, [pc, #180]	; (8002118 <chassisTask+0x360>)
 8002062:	e9c1 2300 	strd	r2, r3, [r1]
					setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142
 8002066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa4b 	bl	8000504 <__aeabi_ui2d>
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <chassisTask+0x350>)
 8002074:	f7fe fbea 	bl	800084c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	f7fe f902 	bl	800028c <__adddf3>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	a30f      	add	r3, pc, #60	; (adr r3, 80020d0 <chassisTask+0x318>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe faaf 	bl	80005f8 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
							* (26.5)) / DISTANCE_PER_ENCODER_PULSE;
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <chassisTask+0x368>)
 80020a8:	f7fe faa6 	bl	80005f8 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	a308      	add	r3, pc, #32	; (adr r3, 80020d8 <chassisTask+0x320>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fbc7 	bl	800084c <__aeabi_ddiv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
					setpoint_right = (((double) distanceCmd / 360) * 2 * 3.142
 80020c2:	4913      	ldr	r1, [pc, #76]	; (8002110 <chassisTask+0x358>)
 80020c4:	e9c1 2300 	strd	r2, r3, [r1]
 80020c8:	e040      	b.n	800214c <chassisTask+0x394>
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	e5604189 	.word	0xe5604189
 80020d4:	400922d0 	.word	0x400922d0
 80020d8:	952ec048 	.word	0x952ec048
 80020dc:	3f8b3966 	.word	0x3f8b3966
 80020e0:	0800d864 	.word	0x0800d864
 80020e4:	200002c0 	.word	0x200002c0
 80020e8:	20000308 	.word	0x20000308
 80020ec:	200003e4 	.word	0x200003e4
 80020f0:	200003f4 	.word	0x200003f4
 80020f4:	0800d854 	.word	0x0800d854
 80020f8:	10624dd3 	.word	0x10624dd3
 80020fc:	0800d85c 	.word	0x0800d85c
 8002100:	20000018 	.word	0x20000018
 8002104:	457a0000 	.word	0x457a0000
 8002108:	40768000 	.word	0x40768000
 800210c:	40408000 	.word	0x40408000
 8002110:	20000420 	.word	0x20000420
 8002114:	40308000 	.word	0x40308000
 8002118:	20000408 	.word	0x20000408
 800211c:	40458000 	.word	0x40458000
 8002120:	403a8000 	.word	0x403a8000

				} else {
					setpoint_left = ((double) distanceCmd)
 8002124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f9ec 	bl	8000504 <__aeabi_ui2d>
							/ DISTANCE_PER_ENCODER_PULSE;
 800212c:	a397      	add	r3, pc, #604	; (adr r3, 800238c <chassisTask+0x5d4>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fb8b 	bl	800084c <__aeabi_ddiv>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
					setpoint_left = ((double) distanceCmd)
 800213a:	4989      	ldr	r1, [pc, #548]	; (8002360 <chassisTask+0x5a8>)
 800213c:	e9c1 2300 	strd	r2, r3, [r1]
					setpoint_right = setpoint_left;
 8002140:	4b87      	ldr	r3, [pc, #540]	; (8002360 <chassisTask+0x5a8>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	4987      	ldr	r1, [pc, #540]	; (8002364 <chassisTask+0x5ac>)
 8002148:	e9c1 2300 	strd	r2, r3, [r1]
				}

				// reset other variables
				input_left = 0;
 800214c:	4986      	ldr	r1, [pc, #536]	; (8002368 <chassisTask+0x5b0>)
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9c1 2300 	strd	r2, r3, [r1]
				output_left = 0;
 800215a:	4984      	ldr	r1, [pc, #528]	; (800236c <chassisTask+0x5b4>)
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9c1 2300 	strd	r2, r3, [r1]
				input_right = 0;
 8002168:	4981      	ldr	r1, [pc, #516]	; (8002370 <chassisTask+0x5b8>)
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
				output_right = 0;
 8002176:	497f      	ldr	r1, [pc, #508]	; (8002374 <chassisTask+0x5bc>)
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9c1 2300 	strd	r2, r3, [r1]

				// reset encoder value
				encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <chassisTask+0x5c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	65fb      	str	r3, [r7, #92]	; 0x5c
				encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 800218c:	4b7b      	ldr	r3, [pc, #492]	; (800237c <chassisTask+0x5c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	65bb      	str	r3, [r7, #88]	; 0x58

				// set toMove flag
				toMove = 1;
 8002194:	2301      	movs	r3, #1
 8002196:	657b      	str	r3, [r7, #84]	; 0x54
			}
		}

		if (toMove) {
 8002198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 81a1 	beq.w	80024e2 <chassisTask+0x72a>

			int left_complete = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	64fb      	str	r3, [r7, #76]	; 0x4c
			int right_complete = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
			// get current encoder count and ticks
			encoder_A_count2 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 80021a8:	4b73      	ldr	r3, [pc, #460]	; (8002378 <chassisTask+0x5c0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	647b      	str	r3, [r7, #68]	; 0x44
			encoder_B_count2 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 80021b0:	4b72      	ldr	r3, [pc, #456]	; (800237c <chassisTask+0x5c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c

			// calculate the encoder count
			encoder_A_count_delta = getEncoderDelta(encoder_A_count1,
 80021b8:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <chassisTask+0x5c0>)
 80021ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80021be:	f7ff fdb9 	bl	8001d34 <getEncoderDelta>
 80021c2:	6438      	str	r0, [r7, #64]	; 0x40
					encoder_A_count2, &htim2);
			encoder_B_count_delta = getEncoderDelta(encoder_B_count1,
 80021c4:	4a6d      	ldr	r2, [pc, #436]	; (800237c <chassisTask+0x5c4>)
 80021c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021ca:	f7ff fdb3 	bl	8001d34 <getEncoderDelta>
 80021ce:	63b8      	str	r0, [r7, #56]	; 0x38
					encoder_B_count2, &htim3);

			input_left += (double) encoder_A_count_delta;
 80021d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80021d2:	f7fe f997 	bl	8000504 <__aeabi_ui2d>
 80021d6:	4b64      	ldr	r3, [pc, #400]	; (8002368 <chassisTask+0x5b0>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f856 	bl	800028c <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4960      	ldr	r1, [pc, #384]	; (8002368 <chassisTask+0x5b0>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
			input_right += (double) encoder_B_count_delta;
 80021ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021ec:	f7fe f98a 	bl	8000504 <__aeabi_ui2d>
 80021f0:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <chassisTask+0x5b8>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f849 	bl	800028c <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	495c      	ldr	r1, [pc, #368]	; (8002370 <chassisTask+0x5b8>)
 8002200:	e9c1 2300 	strd	r2, r3, [r1]

			if (directionCmdBuffer == MOVE_BACKWARD
 8002204:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002208:	2b02      	cmp	r3, #2
 800220a:	d003      	beq.n	8002214 <chassisTask+0x45c>
					|| directionCmdBuffer == MOVE_FORWARD) {
 800220c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002210:	2b01      	cmp	r3, #1
 8002212:	d153      	bne.n	80022bc <chassisTask+0x504>

				// if setpoint too small, PID won't work, use open-loop
				if (distanceCmdBuffer >= 10) {
 8002214:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002218:	2b09      	cmp	r3, #9
 800221a:	dd42      	ble.n	80022a2 <chassisTask+0x4ea>

					output_right = PID_calc(&right_pid, input_right,
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <chassisTask+0x5b8>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcdf 	bl	8000be8 <__aeabi_d2f>
 800222a:	4604      	mov	r4, r0
 800222c:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <chassisTask+0x5ac>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fcd7 	bl	8000be8 <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	ee00 3a90 	vmov	s1, r3
 8002240:	ee00 4a10 	vmov	s0, r4
 8002244:	484e      	ldr	r0, [pc, #312]	; (8002380 <chassisTask+0x5c8>)
 8002246:	f000 f9db 	bl	8002600 <PID_calc>
 800224a:	ee10 3a10 	vmov	r3, s0
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f97a 	bl	8000548 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4946      	ldr	r1, [pc, #280]	; (8002374 <chassisTask+0x5bc>)
 800225a:	e9c1 2300 	strd	r2, r3, [r1]
							setpoint_right);
					output_left = PID_calc(&left_pid, input_left,
 800225e:	4b42      	ldr	r3, [pc, #264]	; (8002368 <chassisTask+0x5b0>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fcbe 	bl	8000be8 <__aeabi_d2f>
 800226c:	4604      	mov	r4, r0
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <chassisTask+0x5ac>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fcb6 	bl	8000be8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	ee00 3a90 	vmov	s1, r3
 8002282:	ee00 4a10 	vmov	s0, r4
 8002286:	483f      	ldr	r0, [pc, #252]	; (8002384 <chassisTask+0x5cc>)
 8002288:	f000 f9ba 	bl	8002600 <PID_calc>
 800228c:	ee10 3a10 	vmov	r3, s0
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f959 	bl	8000548 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4934      	ldr	r1, [pc, #208]	; (800236c <chassisTask+0x5b4>)
 800229c:	e9c1 2300 	strd	r2, r3, [r1]
				if (distanceCmdBuffer >= 10) {
 80022a0:	e094      	b.n	80023cc <chassisTask+0x614>
							setpoint_right);

					/*output_left = 2200;
					 output_right = 2000;*/
				} else {
					output_left = 1500;
 80022a2:	4932      	ldr	r1, [pc, #200]	; (800236c <chassisTask+0x5b4>)
 80022a4:	a32c      	add	r3, pc, #176	; (adr r3, 8002358 <chassisTask+0x5a0>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
					output_right = 1500;
 80022ae:	4931      	ldr	r1, [pc, #196]	; (8002374 <chassisTask+0x5bc>)
 80022b0:	a329      	add	r3, pc, #164	; (adr r3, 8002358 <chassisTask+0x5a0>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	e9c1 2300 	strd	r2, r3, [r1]
				if (distanceCmdBuffer >= 10) {
 80022ba:	e087      	b.n	80023cc <chassisTask+0x614>
				}
			} else {

				if (directionCmdBuffer == MOVE_FORWARD_LEFT) {
 80022bc:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d114      	bne.n	80022ee <chassisTask+0x536>
					targetAngle = distanceCmdBuffer; // dont know why need to *4, probably different IMU model freq
 80022c4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <chassisTask+0x5d0>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(1000); // was 1000, 2000
 80022d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022da:	f7ff fb9f 	bl	8001a1c <setLeftPWM>
					setRightPWM(2000);
 80022de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022e2:	f7ff fbad 	bl	8001a40 <setRightPWM>
					//robotTurnPID(&targetAngle, 0);
					robotTurn(&targetAngle);
 80022e6:	4828      	ldr	r0, [pc, #160]	; (8002388 <chassisTask+0x5d0>)
 80022e8:	f7ff fc7a 	bl	8001be0 <robotTurn>
 80022ec:	e06a      	b.n	80023c4 <chassisTask+0x60c>
				} else if (directionCmdBuffer == MOVE_FORWARD_RIGHT) {
 80022ee:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d115      	bne.n	8002322 <chassisTask+0x56a>
					targetAngle = -distanceCmdBuffer;
 80022f6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80022fa:	425b      	negs	r3, r3
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <chassisTask+0x5d0>)
 8002306:	edc3 7a00 	vstr	s15, [r3]
					//targetAngle = distanceCmdBuffer;
					setLeftPWM(2000);
 800230a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800230e:	f7ff fb85 	bl	8001a1c <setLeftPWM>
					setRightPWM(1000);
 8002312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002316:	f7ff fb93 	bl	8001a40 <setRightPWM>
					//robotTurnPID(&targetAngle, 1);
					robotTurn(&targetAngle);
 800231a:	481b      	ldr	r0, [pc, #108]	; (8002388 <chassisTask+0x5d0>)
 800231c:	f7ff fc60 	bl	8001be0 <robotTurn>
 8002320:	e050      	b.n	80023c4 <chassisTask+0x60c>
				} else if (directionCmdBuffer == MOVE_BACKWARD_LEFT) {
 8002322:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002326:	2b04      	cmp	r3, #4
 8002328:	d134      	bne.n	8002394 <chassisTask+0x5dc>
					targetAngle = -distanceCmdBuffer;
 800232a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800232e:	425b      	negs	r3, r3
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <chassisTask+0x5d0>)
 800233a:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(1000);
 800233e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002342:	f7ff fb6b 	bl	8001a1c <setLeftPWM>
					setRightPWM(2000);
 8002346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800234a:	f7ff fb79 	bl	8001a40 <setRightPWM>
					robotTurn(&targetAngle);
 800234e:	480e      	ldr	r0, [pc, #56]	; (8002388 <chassisTask+0x5d0>)
 8002350:	f7ff fc46 	bl	8001be0 <robotTurn>
 8002354:	e036      	b.n	80023c4 <chassisTask+0x60c>
 8002356:	bf00      	nop
 8002358:	00000000 	.word	0x00000000
 800235c:	40977000 	.word	0x40977000
 8002360:	20000408 	.word	0x20000408
 8002364:	20000420 	.word	0x20000420
 8002368:	20000418 	.word	0x20000418
 800236c:	20000410 	.word	0x20000410
 8002370:	20000430 	.word	0x20000430
 8002374:	20000428 	.word	0x20000428
 8002378:	200002c0 	.word	0x200002c0
 800237c:	20000308 	.word	0x20000308
 8002380:	20000488 	.word	0x20000488
 8002384:	20000438 	.word	0x20000438
 8002388:	200003f8 	.word	0x200003f8
 800238c:	952ec048 	.word	0x952ec048
 8002390:	3f8b3966 	.word	0x3f8b3966
				} else if (directionCmdBuffer == MOVE_BACKWARD_RIGHT) {
 8002394:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002398:	2b06      	cmp	r3, #6
 800239a:	d113      	bne.n	80023c4 <chassisTask+0x60c>
					targetAngle = distanceCmdBuffer;
 800239c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	4b54      	ldr	r3, [pc, #336]	; (80024fc <chassisTask+0x744>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
					setLeftPWM(2000);
 80023ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023b2:	f7ff fb33 	bl	8001a1c <setLeftPWM>
					setRightPWM(1000);
 80023b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ba:	f7ff fb41 	bl	8001a40 <setRightPWM>
					robotTurn(&targetAngle);
 80023be:	484f      	ldr	r0, [pc, #316]	; (80024fc <chassisTask+0x744>)
 80023c0:	f7ff fc0e 	bl	8001be0 <robotTurn>
				}
				left_complete = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
				right_complete = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
			}

			if (setpoint_left - input_left <= 40) {
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <chassisTask+0x748>)
 80023ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d2:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <chassisTask+0x74c>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fd ff56 	bl	8000288 <__aeabi_dsub>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <chassisTask+0x750>)
 80023ea:	f7fe fb81 	bl	8000af0 <__aeabi_dcmple>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d019      	beq.n	8002428 <chassisTask+0x670>
				input_left = 0;
 80023f4:	4943      	ldr	r1, [pc, #268]	; (8002504 <chassisTask+0x74c>)
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9c1 2300 	strd	r2, r3, [r1]
				output_left = 0;
 8002402:	4942      	ldr	r1, [pc, #264]	; (800250c <chassisTask+0x754>)
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_left = 0;
 8002410:	493b      	ldr	r1, [pc, #236]	; (8002500 <chassisTask+0x748>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9c1 2300 	strd	r2, r3, [r1]
				setLeftPWM(0);
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fafc 	bl	8001a1c <setLeftPWM>
				left_complete = 1;
 8002424:	2301      	movs	r3, #1
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			if (setpoint_right - input_right <= 40) {
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <chassisTask+0x758>)
 800242a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <chassisTask+0x75c>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fd ff28 	bl	8000288 <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <chassisTask+0x750>)
 8002446:	f7fe fb53 	bl	8000af0 <__aeabi_dcmple>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d019      	beq.n	8002484 <chassisTask+0x6cc>
				input_right = 0;
 8002450:	4930      	ldr	r1, [pc, #192]	; (8002514 <chassisTask+0x75c>)
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9c1 2300 	strd	r2, r3, [r1]
				output_right = 0;
 800245e:	492e      	ldr	r1, [pc, #184]	; (8002518 <chassisTask+0x760>)
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_right = 0;
 800246c:	4928      	ldr	r1, [pc, #160]	; (8002510 <chassisTask+0x758>)
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9c1 2300 	strd	r2, r3, [r1]
				setRightPWM(0);
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff fae0 	bl	8001a40 <setRightPWM>
				right_complete = 1;
 8002480:	2301      	movs	r3, #1
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
			}

			if (left_complete && right_complete) {
 8002484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <chassisTask+0x6ee>
 800248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <chassisTask+0x6ee>
				toMove = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
				current_cmd = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
				if (cmdFinishFlag) {
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <chassisTask+0x764>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <chassisTask+0x6ee>
					//HAL_UART_Transmit(&huart3, RpiBuffer, sizeof(RpiBuffer),
					//		10);
					cmdFinishFlag = 0;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <chassisTask+0x764>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
				}
			}

			// drive the motor
			if (!left_complete)
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <chassisTask+0x70c>
				setLeftPWM(output_left);
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <chassisTask+0x754>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fb77 	bl	8000ba8 <__aeabi_d2uiz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff faac 	bl	8001a1c <setLeftPWM>
			if (!right_complete)
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <chassisTask+0x72a>
				setRightPWM(output_right);
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <chassisTask+0x760>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fb68 	bl	8000ba8 <__aeabi_d2uiz>
 80024d8:	4603      	mov	r3, r0
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff faaf 	bl	8001a40 <setRightPWM>

		}

		// restart the process
		encoder_A_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim2);
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <chassisTask+0x768>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
		encoder_B_count1 = (uint32_t) __HAL_TIM_GET_COUNTER(&htim3);
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <chassisTask+0x76c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	65bb      	str	r3, [r7, #88]	; 0x58
		osDelay(50);
 80024f2:	2032      	movs	r0, #50	; 0x32
 80024f4:	f005 f932 	bl	800775c <osDelay>
	for (;;) {
 80024f8:	e489      	b.n	8001e0e <chassisTask+0x56>
 80024fa:	bf00      	nop
 80024fc:	200003f8 	.word	0x200003f8
 8002500:	20000408 	.word	0x20000408
 8002504:	20000418 	.word	0x20000418
 8002508:	40440000 	.word	0x40440000
 800250c:	20000410 	.word	0x20000410
 8002510:	20000420 	.word	0x20000420
 8002514:	20000430 	.word	0x20000430
 8002518:	20000428 	.word	0x20000428
 800251c:	200003f4 	.word	0x200003f4
 8002520:	200002c0 	.word	0x200002c0
 8002524:	20000308 	.word	0x20000308

08002528 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800253a:	f000 fd7b 	bl	8003034 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40001400 	.word	0x40001400

0800254c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002550:	b672      	cpsid	i
}
 8002552:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002554:	e7fe      	b.n	8002554 <Error_Handler+0x8>

08002556 <PID_init>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const fp32 PID[3], fp32 max_out, fp32 max_iout)
{
 8002556:	b480      	push	{r7}
 8002558:	b087      	sub	sp, #28
 800255a:	af00      	add	r7, sp, #0
 800255c:	6178      	str	r0, [r7, #20]
 800255e:	460b      	mov	r3, r1
 8002560:	60fa      	str	r2, [r7, #12]
 8002562:	ed87 0a02 	vstr	s0, [r7, #8]
 8002566:	edc7 0a01 	vstr	s1, [r7, #4]
 800256a:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d040      	beq.n	80025f4 <PID_init+0x9e>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03d      	beq.n	80025f4 <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	7cfa      	ldrb	r2, [r7, #19]
 800257c:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	6a1a      	ldr	r2, [r3, #32]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f2:	e000      	b.n	80025f6 <PID_init+0xa0>
        return;
 80025f4:	bf00      	nop
}
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <PID_calc>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
fp32 PID_calc(pid_type_def *pid, fp32 ref, fp32 set)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	ed87 0a02 	vstr	s0, [r7, #8]
 800260c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <PID_calc+0x1c>
    {
        return 0.0f;
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e130      	b.n	800287e <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8002638:	ed97 7a01 	vldr	s14, [r7, #4]
 800263c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8095 	bne.w	800277e <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	ed93 7a01 	vldr	s14, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	edd3 6a02 	vldr	s13, [r3, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80026d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	dd04      	ble.n	80026e6 <PID_calc+0xe6>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
 80026e4:	e014      	b.n	8002710 <PID_calc+0x110>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80026f2:	eef1 7a67 	vneg.f32	s15, s15
 80026f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d507      	bpl.n	8002710 <PID_calc+0x110>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	edd3 7a05 	vldr	s15, [r3, #20]
 8002706:	eef1 7a67 	vneg.f32	s15, s15
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800271c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	ed93 7a08 	vldr	s14, [r3, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	edd3 7a04 	vldr	s15, [r3, #16]
 800273c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	dd04      	ble.n	8002750 <PID_calc+0x150>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
 800274e:	e094      	b.n	800287a <PID_calc+0x27a>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	ed93 7a08 	vldr	s14, [r3, #32]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	edd3 7a04 	vldr	s15, [r3, #16]
 800275c:	eef1 7a67 	vneg.f32	s15, s15
 8002760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	f140 8087 	bpl.w	800287a <PID_calc+0x27a>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002772:	eef1 7a67 	vneg.f32	s15, s15
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	edc3 7a08 	vstr	s15, [r3, #32]
 800277c:	e07d      	b.n	800287a <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d179      	bne.n	800287a <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800279c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80027d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80027e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	ed93 7a08 	vldr	s14, [r3, #32]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002818:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	ed93 7a08 	vldr	s14, [r3, #32]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edd3 7a04 	vldr	s15, [r3, #16]
 800283c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	dd04      	ble.n	8002850 <PID_calc+0x250>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
 800284e:	e014      	b.n	800287a <PID_calc+0x27a>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	ed93 7a08 	vldr	s14, [r3, #32]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	edd3 7a04 	vldr	s15, [r3, #16]
 800285c:	eef1 7a67 	vneg.f32	s15, s15
 8002860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d507      	bpl.n	800287a <PID_calc+0x27a>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002870:	eef1 7a67 	vneg.f32	s15, s15
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
}
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_MspInit+0x54>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_MspInit+0x54>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_MspInit+0x54>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_MspInit+0x54>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <HAL_MspInit+0x54>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_MspInit+0x54>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	210f      	movs	r1, #15
 80028d2:	f06f 0001 	mvn.w	r0, #1
 80028d6:	f000 fca9 	bl	800322c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_I2C_MspInit+0x84>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12c      	bne.n	8002964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_I2C_MspInit+0x88>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_I2C_MspInit+0x88>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_I2C_MspInit+0x88>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292c:	2312      	movs	r3, #18
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002938:	2304      	movs	r3, #4
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	480c      	ldr	r0, [pc, #48]	; (8002974 <HAL_I2C_MspInit+0x8c>)
 8002944:	f000 fd2e 	bl	80033a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_I2C_MspInit+0x88>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_I2C_MspInit+0x88>)
 8002952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_I2C_MspInit+0x88>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40005400 	.word	0x40005400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029b6:	e030      	b.n	8002a1a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_TIM_Base_MspInit+0xb4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d12b      	bne.n	8002a1a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80029fa:	23c0      	movs	r3, #192	; 0xc0
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4806      	ldr	r0, [pc, #24]	; (8002a30 <HAL_TIM_Base_MspInit+0xb8>)
 8002a16:	f000 fcc5 	bl	80033a4 <HAL_GPIO_Init>
}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40020800 	.word	0x40020800

08002a34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d14b      	bne.n	8002aee <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a3e      	ldr	r2, [pc, #248]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a37      	ldr	r2, [pc, #220]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002abc:	2301      	movs	r3, #1
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4825      	ldr	r0, [pc, #148]	; (8002b5c <HAL_TIM_Encoder_MspInit+0x128>)
 8002ac8:	f000 fc6c 	bl	80033a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002acc:	2308      	movs	r3, #8
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	481e      	ldr	r0, [pc, #120]	; (8002b60 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002ae8:	f000 fc5c 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002aec:	e030      	b.n	8002b50 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_TIM_Encoder_MspInit+0x130>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d12b      	bne.n	8002b50 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b30:	23c0      	movs	r3, #192	; 0xc0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b40:	2302      	movs	r3, #2
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4804      	ldr	r0, [pc, #16]	; (8002b5c <HAL_TIM_Encoder_MspInit+0x128>)
 8002b4c:	f000 fc2a 	bl	80033a4 <HAL_GPIO_Init>
}
 8002b50:	bf00      	nop
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40000400 	.word	0x40000400

08002b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d11e      	bne.n	8002bc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_TIM_MspPostInit+0x6c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_TIM_MspPostInit+0x6c>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_TIM_MspPostInit+0x6c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8002ba6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002baa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <HAL_TIM_MspPostInit+0x70>)
 8002bc4:	f000 fbee 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_UART_MspInit+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d145      	bne.n	8002c8a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_UART_MspInit+0xbc>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c44:	2302      	movs	r3, #2
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c48:	2307      	movs	r3, #7
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	4812      	ldr	r0, [pc, #72]	; (8002c9c <HAL_UART_MspInit+0xc0>)
 8002c54:	f000 fba6 	bl	80033a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c66:	2302      	movs	r3, #2
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_UART_MspInit+0xc0>)
 8002c76:	f000 fb95 	bl	80033a4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2105      	movs	r1, #5
 8002c7e:	2027      	movs	r0, #39	; 0x27
 8002c80:	f000 fad4 	bl	800322c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c84:	2027      	movs	r0, #39	; 0x27
 8002c86:	f000 faed 	bl	8003264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40004800 	.word	0x40004800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020800 	.word	0x40020800

08002ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_InitTick+0xe4>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <HAL_InitTick+0xe4>)
 8002cba:	f043 0320 	orr.w	r3, r3, #32
 8002cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc0:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_InitTick+0xe4>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ccc:	f107 0210 	add.w	r2, r7, #16
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 f9b4 	bl	8005044 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f002 f985 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8002cea:	6378      	str	r0, [r7, #52]	; 0x34
 8002cec:	e004      	b.n	8002cf8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cee:	f002 f981 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <HAL_InitTick+0xe8>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3b01      	subs	r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002d06:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_InitTick+0xec>)
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_InitTick+0xf0>)
 8002d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_InitTick+0xec>)
 8002d0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d12:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_InitTick+0xec>)
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_InitTick+0xec>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_InitTick+0xec>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_InitTick+0xec>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002d2c:	4817      	ldr	r0, [pc, #92]	; (8002d8c <HAL_InitTick+0xec>)
 8002d2e:	f002 f9bb 	bl	80050a8 <HAL_TIM_Base_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11b      	bne.n	8002d78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002d40:	4812      	ldr	r0, [pc, #72]	; (8002d8c <HAL_InitTick+0xec>)
 8002d42:	f002 fa01 	bl	8005148 <HAL_TIM_Base_Start_IT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d54:	2037      	movs	r0, #55	; 0x37
 8002d56:	f000 fa85 	bl	8003264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d808      	bhi.n	8002d72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	2037      	movs	r0, #55	; 0x37
 8002d66:	f000 fa61 	bl	800322c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_InitTick+0xf4>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e002      	b.n	8002d78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3738      	adds	r7, #56	; 0x38
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	20000578 	.word	0x20000578
 8002d90:	40001400 	.word	0x40001400
 8002d94:	20000028 	.word	0x20000028

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <NMI_Handler+0x4>

08002d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <HardFault_Handler+0x4>

08002da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <MemManage_Handler+0x4>

08002daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <BusFault_Handler+0x4>

08002db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <UsageFault_Handler+0x4>

08002db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART3_IRQHandler+0x10>)
 8002dca:	f003 fc3f 	bl	800664c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000398 	.word	0x20000398

08002dd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <TIM7_IRQHandler+0x10>)
 8002dde:	f002 fc79 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000578 	.word	0x20000578

08002dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return 1;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_kill>:

int _kill(int pid, int sig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e06:	f007 fcef 	bl	800a7e8 <__errno>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2216      	movs	r2, #22
 8002e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_exit>:

void _exit (int status)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffe7 	bl	8002dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2e:	e7fe      	b.n	8002e2e <_exit+0x12>

08002e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00a      	b.n	8002e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e42:	f3af 8000 	nop.w
 8002e46:	4601      	mov	r1, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf0      	blt.n	8002e42 <_read+0x12>
  }

  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e009      	b.n	8002e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf1      	blt.n	8002e7c <_write+0x12>
  }
  return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_close>:

int _close(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_isatty>:

int _isatty(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f007 fc54 	bl	800a7e8 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20020000 	.word	0x20020000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	200005c0 	.word	0x200005c0
 8002f74:	200053e8 	.word	0x200053e8

08002f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa0:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa8:	e002      	b.n	8002fb0 <LoopCopyDataInit>

08002faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fae:	3304      	adds	r3, #4

08002fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb4:	d3f9      	bcc.n	8002faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb8:	4c0b      	ldr	r4, [pc, #44]	; (8002fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fbc:	e001      	b.n	8002fc2 <LoopFillZerobss>

08002fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc0:	3204      	adds	r2, #4

08002fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc4:	d3fb      	bcc.n	8002fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fc6:	f7ff ffd7 	bl	8002f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fca:	f007 fd09 	bl	800a9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fce:	f7fe f895 	bl	80010fc <main>
  bx  lr    
 8002fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002fe0:	0800e75c 	.word	0x0800e75c
  ldr r2, =_sbss
 8002fe4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002fe8:	200053e8 	.word	0x200053e8

08002fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC_IRQHandler>
	...

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 f8fc 	bl	8003216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	200f      	movs	r0, #15
 8003020:	f7ff fe3e 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fc34 	bl	8002890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000002c 	.word	0x2000002c
 8003058:	200005c4 	.word	0x200005c4

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	200005c4 	.word	0x200005c4

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000002c 	.word	0x2000002c

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ff4c 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800323e:	f7ff ff61 	bl	8003104 <__NVIC_GetPriorityGrouping>
 8003242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f7ff ffb1 	bl	80031b0 <NVIC_EncodePriority>
 800324e:	4602      	mov	r2, r0
 8003250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff80 	bl	800315c <__NVIC_SetPriority>
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff54 	bl	8003120 <__NVIC_EnableIRQ>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800328e:	f7ff fee5 	bl	800305c <HAL_GetTick>
 8003292:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d008      	beq.n	80032b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e052      	b.n	8003358 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0216 	bic.w	r2, r2, #22
 80032c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_DMA_Abort+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0208 	bic.w	r2, r2, #8
 80032f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003302:	e013      	b.n	800332c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003304:	f7ff feaa 	bl	800305c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d90c      	bls.n	800332c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e015      	b.n	8003358 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e4      	bne.n	8003304 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	223f      	movs	r2, #63	; 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e00c      	b.n	8003398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2205      	movs	r2, #5
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e16b      	b.n	8003698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 815a 	bne.w	8003692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d130      	bne.n	8003458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d017      	beq.n	8003494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d123      	bne.n	80034e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80b4 	beq.w	8003692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 8003534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_GPIO_Init+0x310>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_GPIO_Init+0x314>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02b      	beq.n	80035ca <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a51      	ldr	r2, [pc, #324]	; (80036bc <HAL_GPIO_Init+0x318>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d025      	beq.n	80035c6 <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_GPIO_Init+0x31c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01f      	beq.n	80035c2 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4f      	ldr	r2, [pc, #316]	; (80036c4 <HAL_GPIO_Init+0x320>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d019      	beq.n	80035be <HAL_GPIO_Init+0x21a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4e      	ldr	r2, [pc, #312]	; (80036c8 <HAL_GPIO_Init+0x324>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0x216>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4d      	ldr	r2, [pc, #308]	; (80036cc <HAL_GPIO_Init+0x328>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00d      	beq.n	80035b6 <HAL_GPIO_Init+0x212>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4c      	ldr	r2, [pc, #304]	; (80036d0 <HAL_GPIO_Init+0x32c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x20e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4b      	ldr	r2, [pc, #300]	; (80036d4 <HAL_GPIO_Init+0x330>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_GPIO_Init+0x20a>
 80035aa:	2307      	movs	r3, #7
 80035ac:	e00e      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e00c      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035b2:	2306      	movs	r3, #6
 80035b4:	e00a      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e008      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e006      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035be:	2303      	movs	r3, #3
 80035c0:	e004      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e002      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ca:	2300      	movs	r3, #0
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f002 0203 	and.w	r2, r2, #3
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	4093      	lsls	r3, r2
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <HAL_GPIO_Init+0x310>)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_GPIO_Init+0x334>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003614:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003638:	4a27      	ldr	r2, [pc, #156]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	f67f ae90 	bls.w	80033c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40013800 	.word	0x40013800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020c00 	.word	0x40020c00
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40021400 	.word	0x40021400
 80036d0:	40021800 	.word	0x40021800
 80036d4:	40021c00 	.word	0x40021c00
 80036d8:	40013c00 	.word	0x40013c00

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f8:	e003      	b.n	8003702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43d9      	mvns	r1, r3
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	400b      	ands	r3, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff f8bc 	bl	80028e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f001 fc24 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	817b      	strh	r3, [r7, #10]
 80039de:	460b      	mov	r3, r1
 80039e0:	813b      	strh	r3, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e6:	f7ff fb39 	bl	800305c <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	f040 80d9 	bne.w	8003bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2319      	movs	r3, #25
 8003a00:	2201      	movs	r2, #1
 8003a02:	496d      	ldr	r1, [pc, #436]	; (8003bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fc7f 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0cc      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Mem_Write+0x56>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0c5      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d007      	beq.n	8003a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	; 0x21
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_I2C_Mem_Write+0x1f0>)
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8a:	88f8      	ldrh	r0, [r7, #6]
 8003a8c:	893a      	ldrh	r2, [r7, #8]
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fab6 	bl	800400c <I2C_RequestMemoryWrite>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d052      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e081      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fd00 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11b      	bne.n	8003b4c <HAL_I2C_Mem_Write+0x180>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1aa      	bne.n	8003aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fcec 	bl	8004536 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e016      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bda:	f7ff fa3f 	bl	800305c <HAL_GetTick>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	f040 8208 	bne.w	8003ffe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2319      	movs	r3, #25
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	497b      	ldr	r1, [pc, #492]	; (8003de4 <HAL_I2C_Mem_Read+0x224>)
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb85 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	e1fb      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Mem_Read+0x56>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e1f4      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d007      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2222      	movs	r2, #34	; 0x22
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a5b      	ldr	r2, [pc, #364]	; (8003de8 <HAL_I2C_Mem_Read+0x228>)
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c7e:	88f8      	ldrh	r0, [r7, #6]
 8003c80:	893a      	ldrh	r2, [r7, #8]
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa52 	bl	8004138 <I2C_RequestMemoryRead>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1b0      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e184      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11b      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e164      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	e144      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d64:	e138      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	f200 80f1 	bhi.w	8003f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d123      	bne.n	8003dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fc1b 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e139      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dbe:	e10b      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d14e      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_I2C_Mem_Read+0x22c>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa98 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e10e      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e0b8      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4966      	ldr	r1, [pc, #408]	; (8004008 <HAL_I2C_Mem_Read+0x448>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fa49 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0bf      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2200      	movs	r2, #0
 8003eca:	494f      	ldr	r1, [pc, #316]	; (8004008 <HAL_I2C_Mem_Read+0x448>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa1b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e091      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f50:	e042      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb2e 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e04c      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d118      	bne.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f47f aec2 	bne.w	8003d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	00010004 	.word	0x00010004

0800400c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	2200      	movs	r2, #0
 800403e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f960 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405c:	d103      	bne.n	8004066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e05f      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	492d      	ldr	r1, [pc, #180]	; (8004134 <I2C_RequestMemoryWrite+0x128>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f998 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e04c      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fa02 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e02b      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e021      	b.n	8004128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9dc 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b04      	cmp	r3, #4
 8004108:	d107      	bne.n	800411a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e005      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	00010002 	.word	0x00010002

08004138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	4603      	mov	r3, r0
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	460b      	mov	r3, r1
 800414c:	813b      	strh	r3, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2200      	movs	r2, #0
 800417a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8c2 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004198:	d103      	bne.n	80041a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0aa      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	4952      	ldr	r1, [pc, #328]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f8fa 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e097      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f964 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e076      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	e021      	b.n	8004264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f93e 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e050      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	6a39      	ldr	r1, [r7, #32]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f923 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b04      	cmp	r3, #4
 800427a:	d107      	bne.n	800428c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e035      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f82b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d103      	bne.n	80042d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e013      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	4906      	ldr	r1, [pc, #24]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f863 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	e025      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe fe9b 	bl	800305c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e023      	b.n	80043ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10d      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	e00c      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b6      	beq.n	800431a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c4:	e051      	b.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d123      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e046      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fe19 	bl	800305c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e020      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10c      	bne.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e00b      	b.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d18d      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	e02d      	b.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8ce 	bl	8004664 <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d021      	beq.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe fdbf 	bl	800305c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d1ca      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004542:	e02d      	b.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f88d 	bl	8004664 <I2C_IsAcknowledgeFailed>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e02d      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d021      	beq.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7fe fd7e 	bl	800305c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e007      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d1ca      	bne.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c4:	e042      	b.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d119      	bne.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e029      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fd28 	bl	800305c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d1b5      	bne.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d11b      	bne.n	80046b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80046d6:	687b      	ldr	r3, [r7, #4]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	420e0020 	.word	0x420e0020
 80046e8:	40007000 	.word	0x40007000

080046ec <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_PWR_DisableBkUpAccess+0x20>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_PWR_DisableBkUpAccess+0x24>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80046fe:	687b      	ldr	r3, [r7, #4]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	420e0020 	.word	0x420e0020
 8004710:	40007000 	.word	0x40007000

08004714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e267      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d075      	beq.n	800481e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004732:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b04      	cmp	r3, #4
 800473c:	d00c      	beq.n	8004758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b85      	ldr	r3, [pc, #532]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d112      	bne.n	8004770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004756:	d10b      	bne.n	8004770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	4b7e      	ldr	r3, [pc, #504]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05b      	beq.n	800481c <HAL_RCC_OscConfig+0x108>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d157      	bne.n	800481c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e242      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x74>
 800477a:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a75      	ldr	r2, [pc, #468]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xb0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x98>
 8004792:	4b70      	ldr	r3, [pc, #448]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6f      	ldr	r2, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b6d      	ldr	r3, [pc, #436]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a6c      	ldr	r2, [pc, #432]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xb0>
 80047ac:	4b69      	ldr	r3, [pc, #420]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a68      	ldr	r2, [pc, #416]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a65      	ldr	r2, [pc, #404]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe fc46 	bl	800305c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe fc42 	bl	800305c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e207      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xc0>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe fc32 	bl	800305c <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe fc2e 	bl	800305c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1f3      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	4b51      	ldr	r3, [pc, #324]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0xe8>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482a:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d11c      	bne.n	800487c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004842:	4b44      	ldr	r3, [pc, #272]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d116      	bne.n	800487c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_RCC_OscConfig+0x152>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e1c7      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4937      	ldr	r1, [pc, #220]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	e03a      	b.n	80048f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCC_OscConfig+0x244>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fe fbe7 	bl	800305c <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fe fbe3 	bl	800305c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1a8      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4925      	ldr	r1, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x244>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe fbc6 	bl	800305c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d4:	f7fe fbc2 	bl	800305c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e187      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d036      	beq.n	800496c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	4b15      	ldr	r3, [pc, #84]	; (800495c <HAL_RCC_OscConfig+0x248>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fe fba6 	bl	800305c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004914:	f7fe fba2 	bl	800305c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e167      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x240>)
 8004928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x200>
 8004932:	e01b      	b.n	800496c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_RCC_OscConfig+0x248>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fe fb8f 	bl	800305c <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	e00e      	b.n	8004960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004942:	f7fe fb8b 	bl	800305c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d907      	bls.n	8004960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e150      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
 8004954:	40023800 	.word	0x40023800
 8004958:	42470000 	.word	0x42470000
 800495c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	4b88      	ldr	r3, [pc, #544]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ea      	bne.n	8004942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8097 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b81      	ldr	r3, [pc, #516]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	4b7d      	ldr	r3, [pc, #500]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	4a7c      	ldr	r2, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	6413      	str	r3, [r2, #64]	; 0x40
 800499a:	4b7a      	ldr	r3, [pc, #488]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d118      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b6:	4b74      	ldr	r3, [pc, #464]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a73      	ldr	r2, [pc, #460]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fe fb4b 	bl	800305c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fe fb47 	bl	800305c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e10c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_OscConfig+0x474>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x2ea>
 80049f0:	4b64      	ldr	r3, [pc, #400]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a63      	ldr	r2, [pc, #396]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
 80049fc:	e01c      	b.n	8004a38 <HAL_RCC_OscConfig+0x324>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x30c>
 8004a06:	4b5f      	ldr	r3, [pc, #380]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a5e      	ldr	r2, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	4b5c      	ldr	r3, [pc, #368]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a5b      	ldr	r2, [pc, #364]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0x324>
 8004a20:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a54      	ldr	r2, [pc, #336]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f023 0304 	bic.w	r3, r3, #4
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fe fb0c 	bl	800305c <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fe fb08 	bl	800305c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0cb      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ee      	beq.n	8004a48 <HAL_RCC_OscConfig+0x334>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6c:	f7fe faf6 	bl	800305c <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fe faf2 	bl	800305c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0b5      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ee      	bne.n	8004a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80a1 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab2:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d05c      	beq.n	8004b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d141      	bne.n	8004b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe fac6 	bl	800305c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe fac2 	bl	800305c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e087      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69da      	ldr	r2, [r3, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	491b      	ldr	r1, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fe fa9b 	bl	800305c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fe fa97 	bl	800305c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e05c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x416>
 8004b48:	e054      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_RCC_OscConfig+0x478>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b50:	f7fe fa84 	bl	800305c <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fe fa80 	bl	800305c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e045      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x444>
 8004b76:	e03d      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e038      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x4ec>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d121      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d11a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d111      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800

08004c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0cc      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b68      	ldr	r3, [pc, #416]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d90c      	bls.n	8004c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b63      	ldr	r3, [pc, #396]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0b8      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c58:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4a58      	ldr	r2, [pc, #352]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a52      	ldr	r2, [pc, #328]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c7c:	4b50      	ldr	r3, [pc, #320]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	494d      	ldr	r1, [pc, #308]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d044      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d119      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e07f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e067      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4934      	ldr	r1, [pc, #208]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf4:	f7fe f9b2 	bl	800305c <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fe f9ae 	bl	800305c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04f      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d20c      	bcs.n	8004d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e032      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4916      	ldr	r1, [pc, #88]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8a:	f000 f821 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	490a      	ldr	r1, [pc, #40]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d9c:	5ccb      	ldrb	r3, [r1, r3]
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1c8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd ff78 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023c00 	.word	0x40023c00
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	0800d8f0 	.word	0x0800d8f0
 8004dc8:	20000024 	.word	0x20000024
 8004dcc:	20000028 	.word	0x20000028

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b094      	sub	sp, #80	; 0x50
 8004dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
 8004ddc:	2300      	movs	r3, #0
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de0:	2300      	movs	r3, #0
 8004de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de8:	4b79      	ldr	r3, [pc, #484]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d00d      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x40>
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	f200 80e1 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x34>
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e02:	e0db      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b73      	ldr	r3, [pc, #460]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e08:	e0db      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e0e:	e0d8      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e10:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	f04f 0000 	mov.w	r0, #0
 8004e4a:	f04f 0100 	mov.w	r1, #0
 8004e4e:	0159      	lsls	r1, r3, #5
 8004e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e54:	0150      	lsls	r0, r2, #5
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	1a51      	subs	r1, r2, r1
 8004e5e:	6139      	str	r1, [r7, #16]
 8004e60:	4629      	mov	r1, r5
 8004e62:	eb63 0301 	sbc.w	r3, r3, r1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e74:	4659      	mov	r1, fp
 8004e76:	018b      	lsls	r3, r1, #6
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e7e:	4651      	mov	r1, sl
 8004e80:	018a      	lsls	r2, r1, #6
 8004e82:	4651      	mov	r1, sl
 8004e84:	ebb2 0801 	subs.w	r8, r2, r1
 8004e88:	4659      	mov	r1, fp
 8004e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	eb18 0303 	adds.w	r3, r8, r3
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	462b      	mov	r3, r5
 8004eb0:	eb49 0303 	adc.w	r3, r9, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	024b      	lsls	r3, r1, #9
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ecc:	4621      	mov	r1, r4
 8004ece:	024a      	lsls	r2, r1, #9
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee0:	f7fb fed2 	bl	8000c88 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	e058      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	4611      	mov	r1, r2
 8004efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004efe:	623b      	str	r3, [r7, #32]
 8004f00:	2300      	movs	r3, #0
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	f04f 0000 	mov.w	r0, #0
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	0159      	lsls	r1, r3, #5
 8004f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1a:	0150      	lsls	r0, r2, #5
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4641      	mov	r1, r8
 8004f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f26:	4649      	mov	r1, r9
 8004f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f40:	ebb2 040a 	subs.w	r4, r2, sl
 8004f44:	eb63 050b 	sbc.w	r5, r3, fp
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	00eb      	lsls	r3, r5, #3
 8004f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f56:	00e2      	lsls	r2, r4, #3
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	18e3      	adds	r3, r4, r3
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb45 0303 	adc.w	r3, r5, r3
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	61fa      	str	r2, [r7, #28]
 8004f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f94:	f7fb fe78 	bl	8000c88 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3750      	adds	r7, #80	; 0x50
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000024 	.word	0x20000024

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a9b      	lsrs	r3, r3, #10
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4903      	ldr	r1, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	0800d900 	.word	0x0800d900

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005020:	f7ff ffdc 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0b5b      	lsrs	r3, r3, #13
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	0800d900 	.word	0x0800d900

08005044 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	220f      	movs	r2, #15
 8005052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0203 	and.w	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <HAL_RCC_GetClockConfig+0x5c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_GetClockConfig+0x5c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	08db      	lsrs	r3, r3, #3
 800507e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <HAL_RCC_GetClockConfig+0x60>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0207 	and.w	r2, r3, #7
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40023c00 	.word	0x40023c00

080050a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e041      	b.n	800513e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fd fc52 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f000 fdae 	bl	8005c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e04e      	b.n	80051fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a23      	ldr	r2, [pc, #140]	; (800520c <HAL_TIM_Base_Start_IT+0xc4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d022      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d01d      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <HAL_TIM_Base_Start_IT+0xc8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d018      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <HAL_TIM_Base_Start_IT+0xcc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <HAL_TIM_Base_Start_IT+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <HAL_TIM_Base_Start_IT+0xd4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d111      	bne.n	80051ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d010      	beq.n	80051fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	e007      	b.n	80051fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40001800 	.word	0x40001800

08005228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e041      	b.n	80052be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f839 	bl	80052c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f000 fcee 	bl	8005c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_TIM_PWM_Start+0x24>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e022      	b.n	8005346 <HAL_TIM_PWM_Start+0x6a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d109      	bne.n	800531a <HAL_TIM_PWM_Start+0x3e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e015      	b.n	8005346 <HAL_TIM_PWM_Start+0x6a>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d109      	bne.n	8005334 <HAL_TIM_PWM_Start+0x58>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e008      	b.n	8005346 <HAL_TIM_PWM_Start+0x6a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e07c      	b.n	8005448 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Start+0x82>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	e013      	b.n	8005386 <HAL_TIM_PWM_Start+0xaa>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0x92>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536c:	e00b      	b.n	8005386 <HAL_TIM_PWM_Start+0xaa>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0xa2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800537c:	e003      	b.n	8005386 <HAL_TIM_PWM_Start+0xaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff44 	bl	800621c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2d      	ldr	r2, [pc, #180]	; (8005450 <HAL_TIM_PWM_Start+0x174>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_PWM_Start+0xcc>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <HAL_TIM_PWM_Start+0x178>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_PWM_Start+0xd0>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a22      	ldr	r2, [pc, #136]	; (8005450 <HAL_TIM_PWM_Start+0x174>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d01d      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <HAL_TIM_PWM_Start+0x17c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1d      	ldr	r2, [pc, #116]	; (800545c <HAL_TIM_PWM_Start+0x180>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_TIM_PWM_Start+0x184>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_TIM_PWM_Start+0x178>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIM_PWM_Start+0x188>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_PWM_Start+0x136>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a16      	ldr	r2, [pc, #88]	; (8005468 <HAL_TIM_PWM_Start+0x18c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d111      	bne.n	8005436 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b06      	cmp	r3, #6
 8005422:	d010      	beq.n	8005446 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	e007      	b.n	8005446 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40010000 	.word	0x40010000
 8005454:	40010400 	.word	0x40010400
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40014000 	.word	0x40014000
 8005468:	40001800 	.word	0x40001800

0800546c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e097      	b.n	80055b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fd facd 	bl	8002a34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b0:	f023 0307 	bic.w	r3, r3, #7
 80054b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f000 fbc1 	bl	8005c48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	4313      	orrs	r3, r2
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800550c:	f023 030c 	bic.w	r3, r3, #12
 8005510:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	4313      	orrs	r3, r2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	031b      	lsls	r3, r3, #12
 800553c:	4313      	orrs	r3, r2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4313      	orrs	r3, r2
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d110      	bne.n	800560a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d102      	bne.n	80055f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055ee:	7b7b      	ldrb	r3, [r7, #13]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e069      	b.n	80056cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	e031      	b.n	800566e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d110      	bne.n	8005632 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005616:	7b3b      	ldrb	r3, [r7, #12]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d001      	beq.n	8005620 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e055      	b.n	80056cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005630:	e01d      	b.n	800566e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d108      	bne.n	800564a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005638:	7bbb      	ldrb	r3, [r7, #14]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800563e:	7b7b      	ldrb	r3, [r7, #13]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005644:	7b3b      	ldrb	r3, [r7, #12]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e03e      	b.n	80056cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_TIM_Encoder_Start+0xc4>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b04      	cmp	r3, #4
 8005678:	d008      	beq.n	800568c <HAL_TIM_Encoder_Start+0xd4>
 800567a:	e00f      	b.n	800569c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fdc9 	bl	800621c <TIM_CCxChannelCmd>
      break;
 800568a:	e016      	b.n	80056ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2201      	movs	r2, #1
 8005692:	2104      	movs	r1, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fdc1 	bl	800621c <TIM_CCxChannelCmd>
      break;
 800569a:	e00e      	b.n	80056ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fdb9 	bl	800621c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2201      	movs	r2, #1
 80056b0:	2104      	movs	r1, #4
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fdb2 	bl	800621c <TIM_CCxChannelCmd>
      break;
 80056b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0202 	mvn.w	r2, #2
 8005700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa77 	bl	8005c0a <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa69 	bl	8005bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa7a 	bl	8005c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b04      	cmp	r3, #4
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b04      	cmp	r3, #4
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0204 	mvn.w	r2, #4
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa4d 	bl	8005c0a <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa3f 	bl	8005bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa50 	bl	8005c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b08      	cmp	r3, #8
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b08      	cmp	r3, #8
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0208 	mvn.w	r2, #8
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa23 	bl	8005c0a <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa15 	bl	8005bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fa26 	bl	8005c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0210 	mvn.w	r2, #16
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2208      	movs	r2, #8
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9f9 	bl	8005c0a <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9eb 	bl	8005bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f9fc 	bl	8005c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc fe68 	bl	8002528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fdca 	bl	8006418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9c1 	bl	8005c32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0220 	mvn.w	r2, #32
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fd94 	bl	8006404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0ae      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	f200 809f 	bhi.w	8005a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	0800594d 	.word	0x0800594d
 800591c:	08005a51 	.word	0x08005a51
 8005920:	08005a51 	.word	0x08005a51
 8005924:	08005a51 	.word	0x08005a51
 8005928:	0800598d 	.word	0x0800598d
 800592c:	08005a51 	.word	0x08005a51
 8005930:	08005a51 	.word	0x08005a51
 8005934:	08005a51 	.word	0x08005a51
 8005938:	080059cf 	.word	0x080059cf
 800593c:	08005a51 	.word	0x08005a51
 8005940:	08005a51 	.word	0x08005a51
 8005944:	08005a51 	.word	0x08005a51
 8005948:	08005a0f 	.word	0x08005a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fa18 	bl	8005d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0208 	orr.w	r2, r2, #8
 8005966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0204 	bic.w	r2, r2, #4
 8005976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	619a      	str	r2, [r3, #24]
      break;
 800598a:	e064      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fa68 	bl	8005e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	619a      	str	r2, [r3, #24]
      break;
 80059cc:	e043      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fabd 	bl	8005f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0208 	orr.w	r2, r2, #8
 80059e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0204 	bic.w	r2, r2, #4
 80059f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	61da      	str	r2, [r3, #28]
      break;
 8005a0c:	e023      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fb11 	bl	800603c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	021a      	lsls	r2, r3, #8
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	61da      	str	r2, [r3, #28]
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
      break;
 8005a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_ConfigClockSource+0x1c>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e0b4      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x186>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abc:	d03e      	beq.n	8005b3c <HAL_TIM_ConfigClockSource+0xd4>
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	f200 8087 	bhi.w	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	f000 8086 	beq.w	8005bda <HAL_TIM_ConfigClockSource+0x172>
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d87f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d01a      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0xa6>
 8005ad8:	2b70      	cmp	r3, #112	; 0x70
 8005ada:	d87b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b60      	cmp	r3, #96	; 0x60
 8005ade:	d050      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x11a>
 8005ae0:	2b60      	cmp	r3, #96	; 0x60
 8005ae2:	d877      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b50      	cmp	r3, #80	; 0x50
 8005ae6:	d03c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xfa>
 8005ae8:	2b50      	cmp	r3, #80	; 0x50
 8005aea:	d873      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d058      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d86f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d064      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d86b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d060      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d867      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d05a      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	e062      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f000 fb5d 	bl	80061dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	609a      	str	r2, [r3, #8]
      break;
 8005b3a:	e04f      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 fb46 	bl	80061dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5e:	609a      	str	r2, [r3, #8]
      break;
 8005b60:	e03c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 faba 	bl	80060e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2150      	movs	r1, #80	; 0x50
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fb13 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005b80:	e02c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 fad9 	bl	8006146 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2160      	movs	r1, #96	; 0x60
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb03 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e01c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f000 fa9a 	bl	80060e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2140      	movs	r1, #64	; 0x40
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 faf3 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005bc0:	e00c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f000 faea 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005bd2:	e003      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	e000      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a40      	ldr	r2, [pc, #256]	; (8005d5c <TIM_Base_SetConfig+0x114>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d00f      	beq.n	8005c88 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3d      	ldr	r2, [pc, #244]	; (8005d60 <TIM_Base_SetConfig+0x118>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00b      	beq.n	8005c88 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3c      	ldr	r2, [pc, #240]	; (8005d64 <TIM_Base_SetConfig+0x11c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d007      	beq.n	8005c88 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3b      	ldr	r2, [pc, #236]	; (8005d68 <TIM_Base_SetConfig+0x120>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3a      	ldr	r2, [pc, #232]	; (8005d6c <TIM_Base_SetConfig+0x124>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d108      	bne.n	8005c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2f      	ldr	r2, [pc, #188]	; (8005d5c <TIM_Base_SetConfig+0x114>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d02b      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca8:	d027      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <TIM_Base_SetConfig+0x118>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d023      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <TIM_Base_SetConfig+0x11c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <TIM_Base_SetConfig+0x120>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01b      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <TIM_Base_SetConfig+0x124>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d017      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <TIM_Base_SetConfig+0x128>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a27      	ldr	r2, [pc, #156]	; (8005d74 <TIM_Base_SetConfig+0x12c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <TIM_Base_SetConfig+0x130>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <TIM_Base_SetConfig+0x134>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <TIM_Base_SetConfig+0x138>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a23      	ldr	r2, [pc, #140]	; (8005d84 <TIM_Base_SetConfig+0x13c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <TIM_Base_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_Base_SetConfig+0xf8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <TIM_Base_SetConfig+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d103      	bne.n	8005d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800
 8005d7c:	40001800 	.word	0x40001800
 8005d80:	40001c00 	.word	0x40001c00
 8005d84:	40002000 	.word	0x40002000

08005d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0201 	bic.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 0302 	bic.w	r3, r3, #2
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC1_SetConfig+0xd8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC1_SetConfig+0x64>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <TIM_OC1_SetConfig+0xdc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d10c      	bne.n	8005e06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0308 	bic.w	r3, r3, #8
 8005df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 0304 	bic.w	r3, r3, #4
 8005e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <TIM_OC1_SetConfig+0xd8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC1_SetConfig+0x8e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a14      	ldr	r2, [pc, #80]	; (8005e64 <TIM_OC1_SetConfig+0xdc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d111      	bne.n	8005e3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0210 	bic.w	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0320 	bic.w	r3, r3, #32
 8005eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <TIM_OC2_SetConfig+0xe4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x68>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <TIM_OC2_SetConfig+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10d      	bne.n	8005eec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <TIM_OC2_SetConfig+0xe4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC2_SetConfig+0x94>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <TIM_OC2_SetConfig+0xe8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d113      	bne.n	8005f24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a21      	ldr	r2, [pc, #132]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x66>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x92>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a15      	ldr	r2, [pc, #84]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <TIM_OC4_SetConfig+0xa4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC4_SetConfig+0x68>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <TIM_OC4_SetConfig+0xa8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d109      	bne.n	80060b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	019b      	lsls	r3, r3, #6
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40010400 	.word	0x40010400

080060e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f023 0201 	bic.w	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 030a 	bic.w	r3, r3, #10
 8006124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f023 0210 	bic.w	r2, r3, #16
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f043 0307 	orr.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	431a      	orrs	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	2201      	movs	r2, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	43db      	mvns	r3, r3
 800623e:	401a      	ands	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	431a      	orrs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e05a      	b.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a21      	ldr	r2, [pc, #132]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d01d      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10c      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4313      	orrs	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40001800 	.word	0x40001800

08006360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006378:	2302      	movs	r3, #2
 800637a:	e03d      	b.n	80063f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e03f      	b.n	80064be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fc fbc2 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fddf 	bl	8007034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08a      	sub	sp, #40	; 0x28
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d17c      	bne.n	80065e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Transmit+0x2c>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e075      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Transmit+0x3e>
 8006500:	2302      	movs	r3, #2
 8006502:	e06e      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651a:	f7fc fd9f 	bl	800305c <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	88fa      	ldrh	r2, [r7, #6]
 800652a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Transmit+0x82>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006558:	e02a      	b.n	80065b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fb1f 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e036      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006588:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3302      	adds	r3, #2
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e007      	b.n	80065a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	3301      	adds	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1cf      	bne.n	800655a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2140      	movs	r1, #64	; 0x40
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 faef 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	4613      	mov	r3, r2
 80065f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b20      	cmp	r3, #32
 8006602:	d11d      	bne.n	8006640 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_UART_Receive_IT+0x26>
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e016      	b.n	8006642 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_UART_Receive_IT+0x38>
 800661e:	2302      	movs	r3, #2
 8006620:	e00f      	b.n	8006642 <HAL_UART_Receive_IT+0x58>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	461a      	mov	r2, r3
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fb24 	bl	8006c84 <UART_Start_Receive_IT>
 800663c:	4603      	mov	r3, r0
 800663e:	e000      	b.n	8006642 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b0ba      	sub	sp, #232	; 0xe8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006678:	2300      	movs	r3, #0
 800667a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10f      	bne.n	80066b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_UART_IRQHandler+0x66>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fc07 	bl	8006ebe <UART_Receive_IT>
      return;
 80066b0:	e256      	b.n	8006b60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 80de 	beq.w	8006878 <HAL_UART_IRQHandler+0x22c>
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80d1 	beq.w	8006878 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xae>
 80066e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0201 	orr.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_UART_IRQHandler+0xd2>
 8006706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f043 0202 	orr.w	r2, r3, #2
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <HAL_UART_IRQHandler+0xf6>
 800672a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f043 0204 	orr.w	r2, r3, #4
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <HAL_UART_IRQHandler+0x126>
 800674e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800675a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f043 0208 	orr.w	r2, r3, #8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 81ed 	beq.w	8006b56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_UART_IRQHandler+0x14e>
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fb92 	bl	8006ebe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <HAL_UART_IRQHandler+0x17a>
 80067be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d04f      	beq.n	8006866 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa9a 	bl	8006d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d141      	bne.n	800685e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800680a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800681e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1d9      	bne.n	80067da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	4a7d      	ldr	r2, [pc, #500]	; (8006a28 <HAL_UART_IRQHandler+0x3dc>)
 8006834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	4618      	mov	r0, r3
 800683c:	f7fc fd90 	bl	8003360 <HAL_DMA_Abort_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e00e      	b.n	8006874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f990 	bl	8006b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e00a      	b.n	8006874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f98c 	bl	8006b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e006      	b.n	8006874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f988 	bl	8006b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006872:	e170      	b.n	8006b56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	bf00      	nop
    return;
 8006876:	e16e      	b.n	8006b56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	2b01      	cmp	r3, #1
 800687e:	f040 814a 	bne.w	8006b16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8143 	beq.w	8006b16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 813c 	beq.w	8006b16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	f040 80b4 	bne.w	8006a2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8140 	beq.w	8006b5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f080 8139 	bcs.w	8006b5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fa:	f000 8088 	beq.w	8006a0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800691c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800692a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800692e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d9      	bne.n	80068fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3314      	adds	r3, #20
 8006950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800695a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800696e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e1      	bne.n	800694a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e3      	bne.n	8006986 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069de:	f023 0310 	bic.w	r3, r3, #16
 80069e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80069f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e3      	bne.n	80069cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fc fc39 	bl	8003280 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8b6 	bl	8006b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a24:	e099      	b.n	8006b5a <HAL_UART_IRQHandler+0x50e>
 8006a26:	bf00      	nop
 8006a28:	08006dc7 	.word	0x08006dc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 808b 	beq.w	8006b5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8086 	beq.w	8006b5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a76:	647a      	str	r2, [r7, #68]	; 0x44
 8006a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aae:	633a      	str	r2, [r7, #48]	; 0x30
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e3      	bne.n	8006a8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006af4:	61fa      	str	r2, [r7, #28]
 8006af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69b9      	ldr	r1, [r7, #24]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	617b      	str	r3, [r7, #20]
   return(result);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e3      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f83e 	bl	8006b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b14:	e023      	b.n	8006b5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <HAL_UART_IRQHandler+0x4ea>
 8006b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f95d 	bl	8006dee <UART_Transmit_IT>
    return;
 8006b34:	e014      	b.n	8006b60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <HAL_UART_IRQHandler+0x514>
 8006b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f99d 	bl	8006e8e <UART_EndTransmit_IT>
    return;
 8006b54:	e004      	b.n	8006b60 <HAL_UART_IRQHandler+0x514>
    return;
 8006b56:	bf00      	nop
 8006b58:	e002      	b.n	8006b60 <HAL_UART_IRQHandler+0x514>
      return;
 8006b5a:	bf00      	nop
 8006b5c:	e000      	b.n	8006b60 <HAL_UART_IRQHandler+0x514>
      return;
 8006b5e:	bf00      	nop
  }
}
 8006b60:	37e8      	adds	r7, #232	; 0xe8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop

08006b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b090      	sub	sp, #64	; 0x40
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	e050      	b.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d04c      	beq.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc8:	f7fc fa48 	bl	800305c <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d241      	bcs.n	8006c5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c2c:	623a      	str	r2, [r7, #32]
 8006c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69f9      	ldr	r1, [r7, #28]
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e00f      	b.n	8006c7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4013      	ands	r3, r2
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2301      	moveq	r3, #1
 8006c6e:	2300      	movne	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d09f      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3740      	adds	r7, #64	; 0x40
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2222      	movs	r2, #34	; 0x22
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0220 	orr.w	r2, r2, #32
 8006cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b095      	sub	sp, #84	; 0x54
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d28:	643a      	str	r2, [r7, #64]	; 0x40
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d119      	bne.n	8006dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d98:	61ba      	str	r2, [r7, #24]
 8006d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6979      	ldr	r1, [r7, #20]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	613b      	str	r3, [r7, #16]
   return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e5      	bne.n	8006d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dba:	bf00      	nop
 8006dbc:	3754      	adds	r7, #84	; 0x54
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fecb 	bl	8006b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b21      	cmp	r3, #33	; 0x21
 8006e00:	d13e      	bne.n	8006e80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0a:	d114      	bne.n	8006e36 <UART_Transmit_IT+0x48>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d110      	bne.n	8006e36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	1c9a      	adds	r2, r3, #2
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]
 8006e34:	e008      	b.n	8006e48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6211      	str	r1, [r2, #32]
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4619      	mov	r1, r3
 8006e56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10f      	bne.n	8006e7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e000      	b.n	8006e82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fe5a 	bl	8006b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b08c      	sub	sp, #48	; 0x30
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b22      	cmp	r3, #34	; 0x22
 8006ed0:	f040 80ab 	bne.w	800702a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006edc:	d117      	bne.n	8006f0e <UART_Receive_IT+0x50>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d113      	bne.n	8006f0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f0c:	e026      	b.n	8006f5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d007      	beq.n	8006f32 <UART_Receive_IT+0x74>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <UART_Receive_IT+0x82>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e008      	b.n	8006f52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d15a      	bne.n	8007026 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0220 	bic.w	r2, r2, #32
 8006f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d135      	bne.n	800701c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	623a      	str	r2, [r7, #32]
 8006fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	69f9      	ldr	r1, [r7, #28]
 8006fdc:	6a3a      	ldr	r2, [r7, #32]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d10a      	bne.n	800700e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fdbb 	bl	8006b90 <HAL_UARTEx_RxEventCallback>
 800701a:	e002      	b.n	8007022 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fa fc49 	bl	80018b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e002      	b.n	800702c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3730      	adds	r7, #48	; 0x30
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007038:	b0c0      	sub	sp, #256	; 0x100
 800703a:	af00      	add	r7, sp, #0
 800703c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007050:	68d9      	ldr	r1, [r3, #12]
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	ea40 0301 	orr.w	r3, r0, r1
 800705c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800705e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	431a      	orrs	r2, r3
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	431a      	orrs	r2, r3
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800708c:	f021 010c 	bic.w	r1, r1, #12
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800709a:	430b      	orrs	r3, r1
 800709c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ae:	6999      	ldr	r1, [r3, #24]
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	ea40 0301 	orr.w	r3, r0, r1
 80070ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b8f      	ldr	r3, [pc, #572]	; (8007300 <UART_SetConfig+0x2cc>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d005      	beq.n	80070d4 <UART_SetConfig+0xa0>
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b8d      	ldr	r3, [pc, #564]	; (8007304 <UART_SetConfig+0x2d0>)
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d104      	bne.n	80070de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fd ffa2 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 80070d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070dc:	e003      	b.n	80070e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070de:	f7fd ff89 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80070e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f0:	f040 810c 	bne.w	800730c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007106:	4622      	mov	r2, r4
 8007108:	462b      	mov	r3, r5
 800710a:	1891      	adds	r1, r2, r2
 800710c:	65b9      	str	r1, [r7, #88]	; 0x58
 800710e:	415b      	adcs	r3, r3
 8007110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007116:	4621      	mov	r1, r4
 8007118:	eb12 0801 	adds.w	r8, r2, r1
 800711c:	4629      	mov	r1, r5
 800711e:	eb43 0901 	adc.w	r9, r3, r1
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800712e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007136:	4690      	mov	r8, r2
 8007138:	4699      	mov	r9, r3
 800713a:	4623      	mov	r3, r4
 800713c:	eb18 0303 	adds.w	r3, r8, r3
 8007140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007144:	462b      	mov	r3, r5
 8007146:	eb49 0303 	adc.w	r3, r9, r3
 800714a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800715a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800715e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007162:	460b      	mov	r3, r1
 8007164:	18db      	adds	r3, r3, r3
 8007166:	653b      	str	r3, [r7, #80]	; 0x50
 8007168:	4613      	mov	r3, r2
 800716a:	eb42 0303 	adc.w	r3, r2, r3
 800716e:	657b      	str	r3, [r7, #84]	; 0x54
 8007170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007178:	f7f9 fd86 	bl	8000c88 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4b61      	ldr	r3, [pc, #388]	; (8007308 <UART_SetConfig+0x2d4>)
 8007182:	fba3 2302 	umull	r2, r3, r3, r2
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	011c      	lsls	r4, r3, #4
 800718a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718e:	2200      	movs	r2, #0
 8007190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007194:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	1891      	adds	r1, r2, r2
 80071a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80071a4:	415b      	adcs	r3, r3
 80071a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071ac:	4641      	mov	r1, r8
 80071ae:	eb12 0a01 	adds.w	sl, r2, r1
 80071b2:	4649      	mov	r1, r9
 80071b4:	eb43 0b01 	adc.w	fp, r3, r1
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071cc:	4692      	mov	sl, r2
 80071ce:	469b      	mov	fp, r3
 80071d0:	4643      	mov	r3, r8
 80071d2:	eb1a 0303 	adds.w	r3, sl, r3
 80071d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071da:	464b      	mov	r3, r9
 80071dc:	eb4b 0303 	adc.w	r3, fp, r3
 80071e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071f8:	460b      	mov	r3, r1
 80071fa:	18db      	adds	r3, r3, r3
 80071fc:	643b      	str	r3, [r7, #64]	; 0x40
 80071fe:	4613      	mov	r3, r2
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	647b      	str	r3, [r7, #68]	; 0x44
 8007206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800720a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800720e:	f7f9 fd3b 	bl	8000c88 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4611      	mov	r1, r2
 8007218:	4b3b      	ldr	r3, [pc, #236]	; (8007308 <UART_SetConfig+0x2d4>)
 800721a:	fba3 2301 	umull	r2, r3, r3, r1
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	2264      	movs	r2, #100	; 0x64
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	1acb      	subs	r3, r1, r3
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800722e:	4b36      	ldr	r3, [pc, #216]	; (8007308 <UART_SetConfig+0x2d4>)
 8007230:	fba3 2302 	umull	r2, r3, r3, r2
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800723c:	441c      	add	r4, r3
 800723e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007242:	2200      	movs	r2, #0
 8007244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007248:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800724c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	1891      	adds	r1, r2, r2
 8007256:	63b9      	str	r1, [r7, #56]	; 0x38
 8007258:	415b      	adcs	r3, r3
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800725c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007260:	4641      	mov	r1, r8
 8007262:	1851      	adds	r1, r2, r1
 8007264:	6339      	str	r1, [r7, #48]	; 0x30
 8007266:	4649      	mov	r1, r9
 8007268:	414b      	adcs	r3, r1
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007278:	4659      	mov	r1, fp
 800727a:	00cb      	lsls	r3, r1, #3
 800727c:	4651      	mov	r1, sl
 800727e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007282:	4651      	mov	r1, sl
 8007284:	00ca      	lsls	r2, r1, #3
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	4603      	mov	r3, r0
 800728c:	4642      	mov	r2, r8
 800728e:	189b      	adds	r3, r3, r2
 8007290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007294:	464b      	mov	r3, r9
 8007296:	460a      	mov	r2, r1
 8007298:	eb42 0303 	adc.w	r3, r2, r3
 800729c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072b4:	460b      	mov	r3, r1
 80072b6:	18db      	adds	r3, r3, r3
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ba:	4613      	mov	r3, r2
 80072bc:	eb42 0303 	adc.w	r3, r2, r3
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072ca:	f7f9 fcdd 	bl	8000c88 <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <UART_SetConfig+0x2d4>)
 80072d4:	fba3 1302 	umull	r1, r3, r3, r2
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	2164      	movs	r1, #100	; 0x64
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	3332      	adds	r3, #50	; 0x32
 80072e6:	4a08      	ldr	r2, [pc, #32]	; (8007308 <UART_SetConfig+0x2d4>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f003 0207 	and.w	r2, r3, #7
 80072f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4422      	add	r2, r4
 80072fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072fc:	e105      	b.n	800750a <UART_SetConfig+0x4d6>
 80072fe:	bf00      	nop
 8007300:	40011000 	.word	0x40011000
 8007304:	40011400 	.word	0x40011400
 8007308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800730c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007310:	2200      	movs	r2, #0
 8007312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007316:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800731a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800731e:	4642      	mov	r2, r8
 8007320:	464b      	mov	r3, r9
 8007322:	1891      	adds	r1, r2, r2
 8007324:	6239      	str	r1, [r7, #32]
 8007326:	415b      	adcs	r3, r3
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800732e:	4641      	mov	r1, r8
 8007330:	1854      	adds	r4, r2, r1
 8007332:	4649      	mov	r1, r9
 8007334:	eb43 0501 	adc.w	r5, r3, r1
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	00eb      	lsls	r3, r5, #3
 8007342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007346:	00e2      	lsls	r2, r4, #3
 8007348:	4614      	mov	r4, r2
 800734a:	461d      	mov	r5, r3
 800734c:	4643      	mov	r3, r8
 800734e:	18e3      	adds	r3, r4, r3
 8007350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007354:	464b      	mov	r3, r9
 8007356:	eb45 0303 	adc.w	r3, r5, r3
 800735a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800736a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800737a:	4629      	mov	r1, r5
 800737c:	008b      	lsls	r3, r1, #2
 800737e:	4621      	mov	r1, r4
 8007380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007384:	4621      	mov	r1, r4
 8007386:	008a      	lsls	r2, r1, #2
 8007388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800738c:	f7f9 fc7c 	bl	8000c88 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4b60      	ldr	r3, [pc, #384]	; (8007518 <UART_SetConfig+0x4e4>)
 8007396:	fba3 2302 	umull	r2, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	011c      	lsls	r4, r3, #4
 800739e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	61b9      	str	r1, [r7, #24]
 80073b8:	415b      	adcs	r3, r3
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c0:	4641      	mov	r1, r8
 80073c2:	1851      	adds	r1, r2, r1
 80073c4:	6139      	str	r1, [r7, #16]
 80073c6:	4649      	mov	r1, r9
 80073c8:	414b      	adcs	r3, r1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073d8:	4659      	mov	r1, fp
 80073da:	00cb      	lsls	r3, r1, #3
 80073dc:	4651      	mov	r1, sl
 80073de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073e2:	4651      	mov	r1, sl
 80073e4:	00ca      	lsls	r2, r1, #3
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	4642      	mov	r2, r8
 80073ee:	189b      	adds	r3, r3, r2
 80073f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073f4:	464b      	mov	r3, r9
 80073f6:	460a      	mov	r2, r1
 80073f8:	eb42 0303 	adc.w	r3, r2, r3
 80073fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	67bb      	str	r3, [r7, #120]	; 0x78
 800740a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007418:	4649      	mov	r1, r9
 800741a:	008b      	lsls	r3, r1, #2
 800741c:	4641      	mov	r1, r8
 800741e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007422:	4641      	mov	r1, r8
 8007424:	008a      	lsls	r2, r1, #2
 8007426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800742a:	f7f9 fc2d 	bl	8000c88 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4b39      	ldr	r3, [pc, #228]	; (8007518 <UART_SetConfig+0x4e4>)
 8007434:	fba3 1302 	umull	r1, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2164      	movs	r1, #100	; 0x64
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	3332      	adds	r3, #50	; 0x32
 8007446:	4a34      	ldr	r2, [pc, #208]	; (8007518 <UART_SetConfig+0x4e4>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007452:	441c      	add	r4, r3
 8007454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007458:	2200      	movs	r2, #0
 800745a:	673b      	str	r3, [r7, #112]	; 0x70
 800745c:	677a      	str	r2, [r7, #116]	; 0x74
 800745e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007462:	4642      	mov	r2, r8
 8007464:	464b      	mov	r3, r9
 8007466:	1891      	adds	r1, r2, r2
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	415b      	adcs	r3, r3
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007472:	4641      	mov	r1, r8
 8007474:	1851      	adds	r1, r2, r1
 8007476:	6039      	str	r1, [r7, #0]
 8007478:	4649      	mov	r1, r9
 800747a:	414b      	adcs	r3, r1
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	f04f 0200 	mov.w	r2, #0
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800748a:	4659      	mov	r1, fp
 800748c:	00cb      	lsls	r3, r1, #3
 800748e:	4651      	mov	r1, sl
 8007490:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007494:	4651      	mov	r1, sl
 8007496:	00ca      	lsls	r2, r1, #3
 8007498:	4610      	mov	r0, r2
 800749a:	4619      	mov	r1, r3
 800749c:	4603      	mov	r3, r0
 800749e:	4642      	mov	r2, r8
 80074a0:	189b      	adds	r3, r3, r2
 80074a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a4:	464b      	mov	r3, r9
 80074a6:	460a      	mov	r2, r1
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	663b      	str	r3, [r7, #96]	; 0x60
 80074b8:	667a      	str	r2, [r7, #100]	; 0x64
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074c6:	4649      	mov	r1, r9
 80074c8:	008b      	lsls	r3, r1, #2
 80074ca:	4641      	mov	r1, r8
 80074cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d0:	4641      	mov	r1, r8
 80074d2:	008a      	lsls	r2, r1, #2
 80074d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074d8:	f7f9 fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <UART_SetConfig+0x4e4>)
 80074e2:	fba3 1302 	umull	r1, r3, r3, r2
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	2164      	movs	r1, #100	; 0x64
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	3332      	adds	r3, #50	; 0x32
 80074f4:	4a08      	ldr	r2, [pc, #32]	; (8007518 <UART_SetConfig+0x4e4>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4422      	add	r2, r4
 8007508:	609a      	str	r2, [r3, #8]
}
 800750a:	bf00      	nop
 800750c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007510:	46bd      	mov	sp, r7
 8007512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007516:	bf00      	nop
 8007518:	51eb851f 	.word	0x51eb851f

0800751c <__NVIC_SetPriority>:
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752c:	2b00      	cmp	r3, #0
 800752e:	db0a      	blt.n	8007546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	b2da      	uxtb	r2, r3
 8007534:	490c      	ldr	r1, [pc, #48]	; (8007568 <__NVIC_SetPriority+0x4c>)
 8007536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753a:	0112      	lsls	r2, r2, #4
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	440b      	add	r3, r1
 8007540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007544:	e00a      	b.n	800755c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4908      	ldr	r1, [pc, #32]	; (800756c <__NVIC_SetPriority+0x50>)
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	3b04      	subs	r3, #4
 8007554:	0112      	lsls	r2, r2, #4
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	440b      	add	r3, r1
 800755a:	761a      	strb	r2, [r3, #24]
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	e000e100 	.word	0xe000e100
 800756c:	e000ed00 	.word	0xe000ed00

08007570 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <SysTick_Handler+0x1c>)
 8007576:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007578:	f001 fe98 	bl	80092ac <xTaskGetSchedulerState>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d001      	beq.n	8007586 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007582:	f002 fc81 	bl	8009e88 <xPortSysTickHandler>
  }
}
 8007586:	bf00      	nop
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000e010 	.word	0xe000e010

08007590 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007594:	2100      	movs	r1, #0
 8007596:	f06f 0004 	mvn.w	r0, #4
 800759a:	f7ff ffbf 	bl	800751c <__NVIC_SetPriority>
#endif
}
 800759e:	bf00      	nop
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075aa:	f3ef 8305 	mrs	r3, IPSR
 80075ae:	603b      	str	r3, [r7, #0]
  return(result);
 80075b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80075b6:	f06f 0305 	mvn.w	r3, #5
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	e00c      	b.n	80075d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <osKernelInitialize+0x44>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <osKernelInitialize+0x44>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	e002      	b.n	80075d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075d8:	687b      	ldr	r3, [r7, #4]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	200005c8 	.word	0x200005c8

080075ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f2:	f3ef 8305 	mrs	r3, IPSR
 80075f6:	603b      	str	r3, [r7, #0]
  return(result);
 80075f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <osKernelStart+0x1a>
    stat = osErrorISR;
 80075fe:	f06f 0305 	mvn.w	r3, #5
 8007602:	607b      	str	r3, [r7, #4]
 8007604:	e010      	b.n	8007628 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <osKernelStart+0x48>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d109      	bne.n	8007622 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800760e:	f7ff ffbf 	bl	8007590 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <osKernelStart+0x48>)
 8007614:	2202      	movs	r2, #2
 8007616:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007618:	f001 fa24 	bl	8008a64 <vTaskStartScheduler>
      stat = osOK;
 800761c:	2300      	movs	r3, #0
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	e002      	b.n	8007628 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007622:	f04f 33ff 	mov.w	r3, #4294967295
 8007626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007628:	687b      	ldr	r3, [r7, #4]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200005c8 	.word	0x200005c8

08007638 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b08e      	sub	sp, #56	; 0x38
 800763c:	af04      	add	r7, sp, #16
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007648:	f3ef 8305 	mrs	r3, IPSR
 800764c:	617b      	str	r3, [r7, #20]
  return(result);
 800764e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007650:	2b00      	cmp	r3, #0
 8007652:	d17e      	bne.n	8007752 <osThreadNew+0x11a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d07b      	beq.n	8007752 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800765a:	2380      	movs	r3, #128	; 0x80
 800765c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800765e:	2318      	movs	r3, #24
 8007660:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295
 800766a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d045      	beq.n	80076fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <osThreadNew+0x48>
        name = attr->name;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <osThreadNew+0x6e>
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b38      	cmp	r3, #56	; 0x38
 8007698:	d805      	bhi.n	80076a6 <osThreadNew+0x6e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <osThreadNew+0x72>
        return (NULL);
 80076a6:	2300      	movs	r3, #0
 80076a8:	e054      	b.n	8007754 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	089b      	lsrs	r3, r3, #2
 80076b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00e      	beq.n	80076e0 <osThreadNew+0xa8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2bbb      	cmp	r3, #187	; 0xbb
 80076c8:	d90a      	bls.n	80076e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <osThreadNew+0xa8>
        mem = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e010      	b.n	8007702 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <osThreadNew+0xca>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d108      	bne.n	8007702 <osThreadNew+0xca>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <osThreadNew+0xca>
          mem = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e001      	b.n	8007702 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d110      	bne.n	800772a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007710:	9202      	str	r2, [sp, #8]
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6a3a      	ldr	r2, [r7, #32]
 800771c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 ffc4 	bl	80086ac <xTaskCreateStatic>
 8007724:	4603      	mov	r3, r0
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	e013      	b.n	8007752 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d110      	bne.n	8007752 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	b29a      	uxth	r2, r3
 8007734:	f107 0310 	add.w	r3, r7, #16
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f001 f80f 	bl	8008766 <xTaskCreate>
 8007748:	4603      	mov	r3, r0
 800774a:	2b01      	cmp	r3, #1
 800774c:	d001      	beq.n	8007752 <osThreadNew+0x11a>
            hTask = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007752:	693b      	ldr	r3, [r7, #16]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007764:	f3ef 8305 	mrs	r3, IPSR
 8007768:	60bb      	str	r3, [r7, #8]
  return(result);
 800776a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <osDelay+0x1c>
    stat = osErrorISR;
 8007770:	f06f 0305 	mvn.w	r3, #5
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	e007      	b.n	8007788 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f93a 	bl	80089fc <vTaskDelay>
    }
  }

  return (stat);
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007792:	b580      	push	{r7, lr}
 8007794:	b08a      	sub	sp, #40	; 0x28
 8007796:	af02      	add	r7, sp, #8
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a2:	f3ef 8305 	mrs	r3, IPSR
 80077a6:	613b      	str	r3, [r7, #16]
  return(result);
 80077a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d15f      	bne.n	800786e <osMessageQueueNew+0xdc>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05c      	beq.n	800786e <osMessageQueueNew+0xdc>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d059      	beq.n	800786e <osMessageQueueNew+0xdc>
    mem = -1;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d029      	beq.n	800781a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d012      	beq.n	80077f4 <osMessageQueueNew+0x62>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b4f      	cmp	r3, #79	; 0x4f
 80077d4:	d90e      	bls.n	80077f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <osMessageQueueNew+0x62>
        mem = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e014      	b.n	800781e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d110      	bne.n	800781e <osMessageQueueNew+0x8c>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007808:	2b00      	cmp	r3, #0
 800780a:	d108      	bne.n	800781e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <osMessageQueueNew+0x8c>
          mem = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	e001      	b.n	800781e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d10b      	bne.n	800783c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2100      	movs	r1, #0
 800782e:	9100      	str	r1, [sp, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fa21 	bl	8007c7a <xQueueGenericCreateStatic>
 8007838:	61f8      	str	r0, [r7, #28]
 800783a:	e008      	b.n	800784e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007842:	2200      	movs	r2, #0
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fa8f 	bl	8007d6a <xQueueGenericCreate>
 800784c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00c      	beq.n	800786e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <osMessageQueueNew+0xd0>
        name = attr->name;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e001      	b.n	8007866 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007866:	6979      	ldr	r1, [r7, #20]
 8007868:	69f8      	ldr	r0, [r7, #28]
 800786a:	f000 fec1 	bl	80085f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800786e:	69fb      	ldr	r3, [r7, #28]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800788c:	2300      	movs	r3, #0
 800788e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007890:	f3ef 8305 	mrs	r3, IPSR
 8007894:	617b      	str	r3, [r7, #20]
  return(result);
 8007896:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007898:	2b00      	cmp	r3, #0
 800789a:	d028      	beq.n	80078ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <osMessageQueuePut+0x36>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <osMessageQueuePut+0x36>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80078ae:	f06f 0303 	mvn.w	r3, #3
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	e038      	b.n	8007928 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80078ba:	f107 0210 	add.w	r2, r7, #16
 80078be:	2300      	movs	r3, #0
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	69b8      	ldr	r0, [r7, #24]
 80078c4:	f000 fb94 	bl	8007ff0 <xQueueGenericSendFromISR>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d003      	beq.n	80078d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80078ce:	f06f 0302 	mvn.w	r3, #2
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	e028      	b.n	8007928 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d025      	beq.n	8007928 <osMessageQueuePut+0xb0>
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <osMessageQueuePut+0xbc>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	e01c      	b.n	8007928 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <osMessageQueuePut+0x82>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80078fa:	f06f 0303 	mvn.w	r3, #3
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e012      	b.n	8007928 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007902:	2300      	movs	r3, #0
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	69b8      	ldr	r0, [r7, #24]
 800790a:	f000 fa8b 	bl	8007e24 <xQueueGenericSend>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	d009      	beq.n	8007928 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800791a:	f06f 0301 	mvn.w	r3, #1
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e002      	b.n	8007928 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007922:	f06f 0302 	mvn.w	r3, #2
 8007926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007928:	69fb      	ldr	r3, [r7, #28]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	617b      	str	r3, [r7, #20]
  return(result);
 8007954:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007956:	2b00      	cmp	r3, #0
 8007958:	d028      	beq.n	80079ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <osMessageQueueGet+0x34>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <osMessageQueueGet+0x34>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800796c:	f06f 0303 	mvn.w	r3, #3
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	e037      	b.n	80079e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007978:	f107 0310 	add.w	r3, r7, #16
 800797c:	461a      	mov	r2, r3
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	69b8      	ldr	r0, [r7, #24]
 8007982:	f000 fca5 	bl	80082d0 <xQueueReceiveFromISR>
 8007986:	4603      	mov	r3, r0
 8007988:	2b01      	cmp	r3, #1
 800798a:	d003      	beq.n	8007994 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800798c:	f06f 0302 	mvn.w	r3, #2
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	e027      	b.n	80079e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d024      	beq.n	80079e4 <osMessageQueueGet+0xac>
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <osMessageQueueGet+0xb8>)
 800799c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	e01b      	b.n	80079e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <osMessageQueueGet+0x80>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80079b8:	f06f 0303 	mvn.w	r3, #3
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	e011      	b.n	80079e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	69b8      	ldr	r0, [r7, #24]
 80079c6:	f000 fbaf 	bl	8008128 <xQueueReceive>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d009      	beq.n	80079e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80079d6:	f06f 0301 	mvn.w	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
 80079dc:	e002      	b.n	80079e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80079de:	f06f 0302 	mvn.w	r3, #2
 80079e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80079e4:	69fb      	ldr	r3, [r7, #28]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4a06      	ldr	r2, [pc, #24]	; (8007a24 <vApplicationGetIdleTaskMemory+0x30>)
 8007a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	200005cc 	.word	0x200005cc
 8007a24:	20000688 	.word	0x20000688

08007a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a07      	ldr	r2, [pc, #28]	; (8007a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a06      	ldr	r2, [pc, #24]	; (8007a58 <vApplicationGetTimerTaskMemory+0x30>)
 8007a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20000888 	.word	0x20000888
 8007a58:	20000944 	.word	0x20000944

08007a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0208 	add.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f103 0208 	add.w	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0208 	add.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d103      	bne.n	8007b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e00c      	b.n	8007b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3308      	adds	r3, #8
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <vListInsert+0x2e>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d2f6      	bcs.n	8007b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6892      	ldr	r2, [r2, #8]
 8007b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d103      	bne.n	8007ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1e5a      	subs	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bee:	f002 f8b9 	bl	8009d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	441a      	add	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	22ff      	movs	r2, #255	; 0xff
 8007c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	22ff      	movs	r2, #255	; 0xff
 8007c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00f      	beq.n	8007c6c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3310      	adds	r3, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 f96f 	bl	8008f34 <xTaskRemoveFromEventList>
 8007c56:	e009      	b.n	8007c6c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3310      	adds	r3, #16
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fefd 	bl	8007a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3324      	adds	r3, #36	; 0x24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fef8 	bl	8007a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c6c:	f002 f8aa 	bl	8009dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c70:	2301      	movs	r3, #1
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b08e      	sub	sp, #56	; 0x38
 8007c7e:	af02      	add	r7, sp, #8
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
 8007c86:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <xQueueGenericCreateStatic+0x52>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <xQueueGenericCreateStatic+0x56>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <xQueueGenericCreateStatic+0x58>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	623b      	str	r3, [r7, #32]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <xQueueGenericCreateStatic+0x7e>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <xQueueGenericCreateStatic+0x82>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <xQueueGenericCreateStatic+0x84>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	61fb      	str	r3, [r7, #28]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d18:	2350      	movs	r3, #80	; 0x50
 8007d1a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b50      	cmp	r3, #80	; 0x50
 8007d20:	d00a      	beq.n	8007d38 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	61bb      	str	r3, [r7, #24]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00d      	beq.n	8007d60 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f83f 	bl	8007dde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3730      	adds	r7, #48	; 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b08a      	sub	sp, #40	; 0x28
 8007d6e:	af02      	add	r7, sp, #8
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	4613      	mov	r3, r2
 8007d76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	613b      	str	r3, [r7, #16]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	3350      	adds	r3, #80	; 0x50
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 f900 	bl	8009fa8 <pvPortMalloc>
 8007da8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d011      	beq.n	8007dd4 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	3350      	adds	r3, #80	; 0x50
 8007db8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dc2:	79fa      	ldrb	r2, [r7, #7]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f805 	bl	8007dde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
	}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e002      	b.n	8007e00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	69b8      	ldr	r0, [r7, #24]
 8007e10:	f7ff fed8 	bl	8007bc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e32:	2300      	movs	r3, #0
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xQueueGenericSend+0x32>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <xQueueGenericSend+0x40>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <xQueueGenericSend+0x44>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <xQueueGenericSend+0x46>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <xQueueGenericSend+0x60>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d103      	bne.n	8007e92 <xQueueGenericSend+0x6e>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <xQueueGenericSend+0x72>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <xQueueGenericSend+0x74>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	623b      	str	r3, [r7, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eb2:	f001 f9fb 	bl	80092ac <xTaskGetSchedulerState>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <xQueueGenericSend+0x9e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueGenericSend+0xa2>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueGenericSend+0xa4>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	61fb      	str	r3, [r7, #28]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ee2:	f001 ff3f 	bl	8009d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d302      	bcc.n	8007ef8 <xQueueGenericSend+0xd4>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d112      	bne.n	8007f1e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007efe:	f000 fa67 	bl	80083d0 <prvCopyDataToQueue>
 8007f02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f80f 	bl	8008f34 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f16:	f001 ff55 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e062      	b.n	8007fe4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f24:	f001 ff4e 	bl	8009dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e05b      	b.n	8007fe4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f32:	f107 0314 	add.w	r3, r7, #20
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f860 	bl	8008ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f40:	f001 ff40 	bl	8009dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f44:	f000 fdfe 	bl	8008b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f48:	f001 ff0c 	bl	8009d64 <vPortEnterCritical>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f52:	b25b      	sxtb	r3, r3
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d103      	bne.n	8007f62 <xQueueGenericSend+0x13e>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f68:	b25b      	sxtb	r3, r3
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d103      	bne.n	8007f78 <xQueueGenericSend+0x154>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	f001 ff24 	bl	8009dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f7c:	1d3a      	adds	r2, r7, #4
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 f84f 	bl	8009028 <xTaskCheckForTimeOut>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d123      	bne.n	8007fd8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 fb15 	bl	80085c0 <prvIsQueueFull>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d017      	beq.n	8007fcc <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ff75 	bl	8008e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fac:	f000 faa0 	bl	80084f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fb0:	f000 fdd6 	bl	8008b60 <xTaskResumeAll>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d193      	bne.n	8007ee2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007fba:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <xQueueGenericSend+0x1c8>)
 8007fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	e78a      	b.n	8007ee2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fce:	f000 fa8f 	bl	80084f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd2:	f000 fdc5 	bl	8008b60 <xTaskResumeAll>
 8007fd6:	e784      	b.n	8007ee2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fda:	f000 fa89 	bl	80084f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fde:	f000 fdbf 	bl	8008b60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fe2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3738      	adds	r7, #56	; 0x38
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b090      	sub	sp, #64	; 0x40
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d103      	bne.n	800802c <xQueueGenericSendFromISR+0x3c>
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <xQueueGenericSendFromISR+0x40>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <xQueueGenericSendFromISR+0x42>
 8008030:	2300      	movs	r3, #0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d103      	bne.n	800805a <xQueueGenericSendFromISR+0x6a>
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <xQueueGenericSendFromISR+0x6e>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <xQueueGenericSendFromISR+0x70>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	623b      	str	r3, [r7, #32]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800807a:	f001 ff55 	bl	8009f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800807e:	f3ef 8211 	mrs	r2, BASEPRI
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	61fa      	str	r2, [r7, #28]
 8008094:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008096:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d302      	bcc.n	80080ac <xQueueGenericSendFromISR+0xbc>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d12f      	bne.n	800810c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080c2:	f000 f985 	bl	80083d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d112      	bne.n	80080f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d016      	beq.n	8008106 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	3324      	adds	r3, #36	; 0x24
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 ff29 	bl	8008f34 <xTaskRemoveFromEventList>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00e      	beq.n	8008106 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e007      	b.n	8008106 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080fa:	3301      	adds	r3, #1
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	b25a      	sxtb	r2, r3
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008106:	2301      	movs	r3, #1
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800810a:	e001      	b.n	8008110 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800811a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800811c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800811e:	4618      	mov	r0, r3
 8008120:	3740      	adds	r7, #64	; 0x40
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08c      	sub	sp, #48	; 0x30
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <xQueueReceive+0x30>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	623b      	str	r3, [r7, #32]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <xQueueReceive+0x3e>
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xQueueReceive+0x42>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueReceive+0x44>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xQueueReceive+0x5e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	61fb      	str	r3, [r7, #28]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008186:	f001 f891 	bl	80092ac <xTaskGetSchedulerState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <xQueueReceive+0x6e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <xQueueReceive+0x72>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueReceive+0x74>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueReceive+0x8e>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	61bb      	str	r3, [r7, #24]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081b6:	f001 fdd5 	bl	8009d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d014      	beq.n	80081f0 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ca:	f000 f96b 	bl	80084a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	1e5a      	subs	r2, r3, #1
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	3310      	adds	r3, #16
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fea6 	bl	8008f34 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081e8:	f001 fdec 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e069      	b.n	80082c4 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081f6:	f001 fde5 	bl	8009dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e062      	b.n	80082c4 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fef7 	bl	8008ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008212:	f001 fdd7 	bl	8009dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008216:	f000 fc95 	bl	8008b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800821a:	f001 fda3 	bl	8009d64 <vPortEnterCritical>
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008224:	b25b      	sxtb	r3, r3
 8008226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822a:	d103      	bne.n	8008234 <xQueueReceive+0x10c>
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d103      	bne.n	800824a <xQueueReceive+0x122>
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800824a:	f001 fdbb 	bl	8009dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0310 	add.w	r3, r7, #16
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fee6 	bl	8009028 <xTaskCheckForTimeOut>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d123      	bne.n	80082aa <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008264:	f000 f996 	bl	8008594 <prvIsQueueEmpty>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fe0c 	bl	8008e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 f937 	bl	80084f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008282:	f000 fc6d 	bl	8008b60 <xTaskResumeAll>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d194      	bne.n	80081b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800828c:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <xQueueReceive+0x1a4>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	e78b      	b.n	80081b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800829e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a0:	f000 f926 	bl	80084f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082a4:	f000 fc5c 	bl	8008b60 <xTaskResumeAll>
 80082a8:	e785      	b.n	80081b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ac:	f000 f920 	bl	80084f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b0:	f000 fc56 	bl	8008b60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b6:	f000 f96d 	bl	8008594 <prvIsQueueEmpty>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f43f af7a 	beq.w	80081b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3730      	adds	r7, #48	; 0x30
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08e      	sub	sp, #56	; 0x38
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	623b      	str	r3, [r7, #32]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <xQueueReceiveFromISR+0x3a>
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <xQueueReceiveFromISR+0x3e>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <xQueueReceiveFromISR+0x40>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	61fb      	str	r3, [r7, #28]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800832a:	f001 fdfd 	bl	8009f28 <vPortValidateInterruptPriority>
	__asm volatile
 800832e:	f3ef 8211 	mrs	r2, BASEPRI
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	61ba      	str	r2, [r7, #24]
 8008344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02f      	beq.n	80083b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f000 f89e 	bl	80084a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	1e5a      	subs	r2, r3, #1
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d112      	bne.n	80083a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d016      	beq.n	80083b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	3310      	adds	r3, #16
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fdd4 	bl	8008f34 <xTaskRemoveFromEventList>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00e      	beq.n	80083b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e007      	b.n	80083b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a4:	3301      	adds	r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	b25a      	sxtb	r2, r3
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80083b0:	2301      	movs	r3, #1
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	e001      	b.n	80083ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f383 8811 	msr	BASEPRI, r3
}
 80083c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3738      	adds	r7, #56	; 0x38
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10d      	bne.n	800840a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d14d      	bne.n	8008492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 ff74 	bl	80092e8 <xTaskPriorityDisinherit>
 8008400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	e043      	b.n	8008492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d119      	bne.n	8008444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6858      	ldr	r0, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	461a      	mov	r2, r3
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	f002 fb07 	bl	800aa2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d32b      	bcc.n	8008492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	e026      	b.n	8008492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68d8      	ldr	r0, [r3, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	461a      	mov	r2, r3
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	f002 faed 	bl	800aa2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	425b      	negs	r3, r3
 800845e:	441a      	add	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d207      	bcs.n	8008480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	425b      	negs	r3, r3
 800847a:	441a      	add	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d105      	bne.n	8008492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3b01      	subs	r3, #1
 8008490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	441a      	add	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d303      	bcc.n	80084d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68d9      	ldr	r1, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	461a      	mov	r2, r3
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f002 faa3 	bl	800aa2e <memcpy>
	}
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f8:	f001 fc34 	bl	8009d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008504:	e011      	b.n	800852a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b00      	cmp	r3, #0
 800850c:	d012      	beq.n	8008534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3324      	adds	r3, #36	; 0x24
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fd0e 	bl	8008f34 <xTaskRemoveFromEventList>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800851e:	f000 fde5 	bl	80090ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	3b01      	subs	r3, #1
 8008526:	b2db      	uxtb	r3, r3
 8008528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852e:	2b00      	cmp	r3, #0
 8008530:	dce9      	bgt.n	8008506 <prvUnlockQueue+0x16>
 8008532:	e000      	b.n	8008536 <prvUnlockQueue+0x46>
					break;
 8008534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	22ff      	movs	r2, #255	; 0xff
 800853a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800853e:	f001 fc41 	bl	8009dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008542:	f001 fc0f 	bl	8009d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800854c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800854e:	e011      	b.n	8008574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d012      	beq.n	800857e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3310      	adds	r3, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fce9 	bl	8008f34 <xTaskRemoveFromEventList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008568:	f000 fdc0 	bl	80090ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	3b01      	subs	r3, #1
 8008570:	b2db      	uxtb	r3, r3
 8008572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	dce9      	bgt.n	8008550 <prvUnlockQueue+0x60>
 800857c:	e000      	b.n	8008580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800857e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	22ff      	movs	r2, #255	; 0xff
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008588:	f001 fc1c 	bl	8009dc4 <vPortExitCritical>
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800859c:	f001 fbe2 	bl	8009d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e001      	b.n	80085b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085b2:	f001 fc07 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 80085b6:	68fb      	ldr	r3, [r7, #12]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c8:	f001 fbcc 	bl	8009d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d102      	bne.n	80085de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e001      	b.n	80085e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085e2:	f001 fbef 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e014      	b.n	800862a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008600:	4a0f      	ldr	r2, [pc, #60]	; (8008640 <vQueueAddToRegistry+0x50>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800860c:	490c      	ldr	r1, [pc, #48]	; (8008640 <vQueueAddToRegistry+0x50>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008616:	4a0a      	ldr	r2, [pc, #40]	; (8008640 <vQueueAddToRegistry+0x50>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4413      	add	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008622:	e006      	b.n	8008632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b07      	cmp	r3, #7
 800862e:	d9e7      	bls.n	8008600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000d44 	.word	0x20000d44

08008644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008654:	f001 fb86 	bl	8009d64 <vPortEnterCritical>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800865e:	b25b      	sxtb	r3, r3
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d103      	bne.n	800866e <vQueueWaitForMessageRestricted+0x2a>
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008674:	b25b      	sxtb	r3, r3
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867a:	d103      	bne.n	8008684 <vQueueWaitForMessageRestricted+0x40>
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008684:	f001 fb9e 	bl	8009dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	3324      	adds	r3, #36	; 0x24
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fc1f 	bl	8008edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800869e:	6978      	ldr	r0, [r7, #20]
 80086a0:	f7ff ff26 	bl	80084f0 <prvUnlockQueue>
	}
 80086a4:	bf00      	nop
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08e      	sub	sp, #56	; 0x38
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	623b      	str	r3, [r7, #32]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	61fb      	str	r3, [r7, #28]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086f2:	23bc      	movs	r3, #188	; 0xbc
 80086f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2bbc      	cmp	r3, #188	; 0xbc
 80086fa:	d00a      	beq.n	8008712 <xTaskCreateStatic+0x66>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61bb      	str	r3, [r7, #24]
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008712:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01e      	beq.n	8008758 <xTaskCreateStatic+0xac>
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01b      	beq.n	8008758 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	2202      	movs	r2, #2
 800872e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008732:	2300      	movs	r3, #0
 8008734:	9303      	str	r3, [sp, #12]
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	9302      	str	r3, [sp, #8]
 800873a:	f107 0314 	add.w	r3, r7, #20
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f850 	bl	80087f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008752:	f000 f8f3 	bl	800893c <prvAddNewTaskToReadyList>
 8008756:	e001      	b.n	800875c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800875c:	697b      	ldr	r3, [r7, #20]
	}
 800875e:	4618      	mov	r0, r3
 8008760:	3728      	adds	r7, #40	; 0x28
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008766:	b580      	push	{r7, lr}
 8008768:	b08c      	sub	sp, #48	; 0x30
 800876a:	af04      	add	r7, sp, #16
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fc14 	bl	8009fa8 <pvPortMalloc>
 8008780:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00e      	beq.n	80087a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008788:	20bc      	movs	r0, #188	; 0xbc
 800878a:	f001 fc0d 	bl	8009fa8 <pvPortMalloc>
 800878e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
 800879c:	e005      	b.n	80087aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f001 fcce 	bl	800a140 <vPortFree>
 80087a4:	e001      	b.n	80087aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d017      	beq.n	80087e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087b8:	88fa      	ldrh	r2, [r7, #6]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9303      	str	r3, [sp, #12]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	9302      	str	r3, [sp, #8]
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 f80e 	bl	80087f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087d4:	69f8      	ldr	r0, [r7, #28]
 80087d6:	f000 f8b1 	bl	800893c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087da:	2301      	movs	r3, #1
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	e002      	b.n	80087e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087e6:	69bb      	ldr	r3, [r7, #24]
	}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	461a      	mov	r2, r3
 8008808:	21a5      	movs	r1, #165	; 0xa5
 800880a:	f002 f91e 	bl	800aa4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008818:	3b01      	subs	r3, #1
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	617b      	str	r3, [r7, #20]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01f      	beq.n	800888e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	e012      	b.n	800887a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	7819      	ldrb	r1, [r3, #0]
 800885c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	3334      	adds	r3, #52	; 0x34
 8008864:	460a      	mov	r2, r1
 8008866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b0f      	cmp	r3, #15
 800887e:	d9e9      	bls.n	8008854 <prvInitialiseNewTask+0x64>
 8008880:	e000      	b.n	8008884 <prvInitialiseNewTask+0x94>
			{
				break;
 8008882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800888c:	e003      	b.n	8008896 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	2b37      	cmp	r3, #55	; 0x37
 800889a:	d901      	bls.n	80088a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800889c:	2337      	movs	r3, #55	; 0x37
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	2200      	movs	r2, #0
 80088b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff f8f0 	bl	8007a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	3318      	adds	r3, #24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff f8eb 	bl	8007a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	3354      	adds	r3, #84	; 0x54
 80088f0:	2260      	movs	r2, #96	; 0x60
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 f8a8 	bl	800aa4a <memset>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	4a0c      	ldr	r2, [pc, #48]	; (8008930 <prvInitialiseNewTask+0x140>)
 80088fe:	659a      	str	r2, [r3, #88]	; 0x58
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	4a0c      	ldr	r2, [pc, #48]	; (8008934 <prvInitialiseNewTask+0x144>)
 8008904:	65da      	str	r2, [r3, #92]	; 0x5c
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	4a0b      	ldr	r2, [pc, #44]	; (8008938 <prvInitialiseNewTask+0x148>)
 800890a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	69b8      	ldr	r0, [r7, #24]
 8008912:	f001 f8f9 	bl	8009b08 <pxPortInitialiseStack>
 8008916:	4602      	mov	r2, r0
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008926:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008928:	bf00      	nop
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	0800e38c 	.word	0x0800e38c
 8008934:	0800e3ac 	.word	0x0800e3ac
 8008938:	0800e36c 	.word	0x0800e36c

0800893c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008944:	f001 fa0e 	bl	8009d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008948:	4b26      	ldr	r3, [pc, #152]	; (80089e4 <prvAddNewTaskToReadyList+0xa8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	4a25      	ldr	r2, [pc, #148]	; (80089e4 <prvAddNewTaskToReadyList+0xa8>)
 8008950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008952:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <prvAddNewTaskToReadyList+0xac>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800895a:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <prvAddNewTaskToReadyList+0xac>)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008960:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <prvAddNewTaskToReadyList+0xa8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d110      	bne.n	800898a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008968:	f000 fbde 	bl	8009128 <prvInitialiseTaskLists>
 800896c:	e00d      	b.n	800898a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800896e:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <prvAddNewTaskToReadyList+0xb0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008976:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <prvAddNewTaskToReadyList+0xac>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	429a      	cmp	r2, r3
 8008982:	d802      	bhi.n	800898a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008984:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <prvAddNewTaskToReadyList+0xac>)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <prvAddNewTaskToReadyList+0xb4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3301      	adds	r3, #1
 8008990:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <prvAddNewTaskToReadyList+0xb4>)
 8008992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008994:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <prvAddNewTaskToReadyList+0xb4>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <prvAddNewTaskToReadyList+0xb8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d903      	bls.n	80089b0 <prvAddNewTaskToReadyList+0x74>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a11      	ldr	r2, [pc, #68]	; (80089f4 <prvAddNewTaskToReadyList+0xb8>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4a0e      	ldr	r2, [pc, #56]	; (80089f8 <prvAddNewTaskToReadyList+0xbc>)
 80089be:	441a      	add	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7ff f875 	bl	8007ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089cc:	f001 f9fa 	bl	8009dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <prvAddNewTaskToReadyList+0xb0>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <prvAddNewTaskToReadyList+0xac>)
 80089da:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20001258 	.word	0x20001258
 80089e8:	20000d84 	.word	0x20000d84
 80089ec:	20001264 	.word	0x20001264
 80089f0:	20001274 	.word	0x20001274
 80089f4:	20001260 	.word	0x20001260
 80089f8:	20000d88 	.word	0x20000d88

080089fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d017      	beq.n	8008a3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <vTaskDelay+0x60>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <vTaskDelay+0x30>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60bb      	str	r3, [r7, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a2c:	f000 f88a 	bl	8008b44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a30:	2100      	movs	r1, #0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fcc6 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a38:	f000 f892 	bl	8008b60 <xTaskResumeAll>
 8008a3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d107      	bne.n	8008a54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <vTaskDelay+0x64>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20001280 	.word	0x20001280
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a72:	463a      	mov	r2, r7
 8008a74:	1d39      	adds	r1, r7, #4
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe ffba 	bl	80079f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	9202      	str	r2, [sp, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	460a      	mov	r2, r1
 8008a92:	4924      	ldr	r1, [pc, #144]	; (8008b24 <vTaskStartScheduler+0xc0>)
 8008a94:	4824      	ldr	r0, [pc, #144]	; (8008b28 <vTaskStartScheduler+0xc4>)
 8008a96:	f7ff fe09 	bl	80086ac <xTaskCreateStatic>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a23      	ldr	r2, [pc, #140]	; (8008b2c <vTaskStartScheduler+0xc8>)
 8008a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aa0:	4b22      	ldr	r3, [pc, #136]	; (8008b2c <vTaskStartScheduler+0xc8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e001      	b.n	8008ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d102      	bne.n	8008abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ab8:	f000 fcd8 	bl	800946c <xTimerCreateTimerTask>
 8008abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d11b      	bne.n	8008afc <vTaskStartScheduler+0x98>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	613b      	str	r3, [r7, #16]
}
 8008ad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ad8:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <vTaskStartScheduler+0xcc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3354      	adds	r3, #84	; 0x54
 8008ade:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <vTaskStartScheduler+0xd0>)
 8008ae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <vTaskStartScheduler+0xd4>)
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aea:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <vTaskStartScheduler+0xd8>)
 8008aec:	2201      	movs	r2, #1
 8008aee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008af0:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <vTaskStartScheduler+0xdc>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008af6:	f001 f893 	bl	8009c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008afa:	e00e      	b.n	8008b1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	d10a      	bne.n	8008b1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskStartScheduler+0xb4>
}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	0800d878 	.word	0x0800d878
 8008b28:	08009105 	.word	0x08009105
 8008b2c:	2000127c 	.word	0x2000127c
 8008b30:	20000d84 	.word	0x20000d84
 8008b34:	20000034 	.word	0x20000034
 8008b38:	20001278 	.word	0x20001278
 8008b3c:	20001264 	.word	0x20001264
 8008b40:	2000125c 	.word	0x2000125c

08008b44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <vTaskSuspendAll+0x18>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a03      	ldr	r2, [pc, #12]	; (8008b5c <vTaskSuspendAll+0x18>)
 8008b50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20001280 	.word	0x20001280

08008b60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b6e:	4b3c      	ldr	r3, [pc, #240]	; (8008c60 <xTaskResumeAll+0x100>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <xTaskResumeAll+0x2c>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	603b      	str	r3, [r7, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b8c:	f001 f8ea 	bl	8009d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b90:	4b33      	ldr	r3, [pc, #204]	; (8008c60 <xTaskResumeAll+0x100>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	4a32      	ldr	r2, [pc, #200]	; (8008c60 <xTaskResumeAll+0x100>)
 8008b98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9a:	4b31      	ldr	r3, [pc, #196]	; (8008c60 <xTaskResumeAll+0x100>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d156      	bne.n	8008c50 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba2:	4b30      	ldr	r3, [pc, #192]	; (8008c64 <xTaskResumeAll+0x104>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d052      	beq.n	8008c50 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008baa:	e02f      	b.n	8008c0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bac:	4b2e      	ldr	r3, [pc, #184]	; (8008c68 <xTaskResumeAll+0x108>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3318      	adds	r3, #24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe ffd9 	bl	8007b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe ffd4 	bl	8007b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <xTaskResumeAll+0x10c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d903      	bls.n	8008bdc <xTaskResumeAll+0x7c>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	4a24      	ldr	r2, [pc, #144]	; (8008c6c <xTaskResumeAll+0x10c>)
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4a21      	ldr	r2, [pc, #132]	; (8008c70 <xTaskResumeAll+0x110>)
 8008bea:	441a      	add	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fe ff5f 	bl	8007ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <xTaskResumeAll+0x114>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d302      	bcc.n	8008c0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c06:	4b1c      	ldr	r3, [pc, #112]	; (8008c78 <xTaskResumeAll+0x118>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c0c:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <xTaskResumeAll+0x108>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1cb      	bne.n	8008bac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1a:	f000 fb27 	bl	800926c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c1e:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2a:	f000 f839 	bl	8008ca0 <xTaskIncrementTick>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <xTaskResumeAll+0x118>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f1      	bne.n	8008c2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <xTaskResumeAll+0x11c>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <xTaskResumeAll+0x118>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c50:	f001 f8b8 	bl	8009dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c54:	687b      	ldr	r3, [r7, #4]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20001280 	.word	0x20001280
 8008c64:	20001258 	.word	0x20001258
 8008c68:	20001218 	.word	0x20001218
 8008c6c:	20001260 	.word	0x20001260
 8008c70:	20000d88 	.word	0x20000d88
 8008c74:	20000d84 	.word	0x20000d84
 8008c78:	2000126c 	.word	0x2000126c
 8008c7c:	20001268 	.word	0x20001268

08008c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <xTaskGetTickCount+0x1c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c8c:	687b      	ldr	r3, [r7, #4]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	2000125c 	.word	0x2000125c

08008ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b3f      	ldr	r3, [pc, #252]	; (8008da8 <xTaskIncrementTick+0x108>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d170      	bne.n	8008d94 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb2:	4b3e      	ldr	r3, [pc, #248]	; (8008dac <xTaskIncrementTick+0x10c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cba:	4a3c      	ldr	r2, [pc, #240]	; (8008dac <xTaskIncrementTick+0x10c>)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d120      	bne.n	8008d08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc6:	4b3a      	ldr	r3, [pc, #232]	; (8008db0 <xTaskIncrementTick+0x110>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00a      	beq.n	8008ce6 <xTaskIncrementTick+0x46>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	603b      	str	r3, [r7, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xTaskIncrementTick+0x44>
 8008ce6:	4b32      	ldr	r3, [pc, #200]	; (8008db0 <xTaskIncrementTick+0x110>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	4b31      	ldr	r3, [pc, #196]	; (8008db4 <xTaskIncrementTick+0x114>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a2f      	ldr	r2, [pc, #188]	; (8008db0 <xTaskIncrementTick+0x110>)
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	4a2f      	ldr	r2, [pc, #188]	; (8008db4 <xTaskIncrementTick+0x114>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <xTaskIncrementTick+0x118>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	4a2d      	ldr	r2, [pc, #180]	; (8008db8 <xTaskIncrementTick+0x118>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	f000 fab2 	bl	800926c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d08:	4b2c      	ldr	r3, [pc, #176]	; (8008dbc <xTaskIncrementTick+0x11c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d345      	bcc.n	8008d9e <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d12:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <xTaskIncrementTick+0x110>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1c:	4b27      	ldr	r3, [pc, #156]	; (8008dbc <xTaskIncrementTick+0x11c>)
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	601a      	str	r2, [r3, #0]
					break;
 8008d24:	e03b      	b.n	8008d9e <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <xTaskIncrementTick+0x110>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d203      	bcs.n	8008d46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d3e:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <xTaskIncrementTick+0x11c>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d44:	e02b      	b.n	8008d9e <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe ff10 	bl	8007b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3318      	adds	r3, #24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe ff07 	bl	8007b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <xTaskIncrementTick+0x120>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d903      	bls.n	8008d76 <xTaskIncrementTick+0xd6>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	4a13      	ldr	r2, [pc, #76]	; (8008dc0 <xTaskIncrementTick+0x120>)
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4a10      	ldr	r2, [pc, #64]	; (8008dc4 <xTaskIncrementTick+0x124>)
 8008d84:	441a      	add	r2, r3
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	f7fe fe92 	bl	8007ab6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d92:	e7be      	b.n	8008d12 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <xTaskIncrementTick+0x128>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	4a0b      	ldr	r2, [pc, #44]	; (8008dc8 <xTaskIncrementTick+0x128>)
 8008d9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d9e:	697b      	ldr	r3, [r7, #20]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20001280 	.word	0x20001280
 8008dac:	2000125c 	.word	0x2000125c
 8008db0:	20001210 	.word	0x20001210
 8008db4:	20001214 	.word	0x20001214
 8008db8:	20001270 	.word	0x20001270
 8008dbc:	20001278 	.word	0x20001278
 8008dc0:	20001260 	.word	0x20001260
 8008dc4:	20000d88 	.word	0x20000d88
 8008dc8:	20001268 	.word	0x20001268

08008dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <vTaskSwitchContext+0xb0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dda:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <vTaskSwitchContext+0xb4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008de0:	e046      	b.n	8008e70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <vTaskSwitchContext+0xb4>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de8:	4b26      	ldr	r3, [pc, #152]	; (8008e84 <vTaskSwitchContext+0xb8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e010      	b.n	8008e12 <vTaskSwitchContext+0x46>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <vTaskSwitchContext+0x40>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	607b      	str	r3, [r7, #4]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <vTaskSwitchContext+0x3e>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	491d      	ldr	r1, [pc, #116]	; (8008e88 <vTaskSwitchContext+0xbc>)
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0e4      	beq.n	8008df0 <vTaskSwitchContext+0x24>
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <vTaskSwitchContext+0xbc>)
 8008e32:	4413      	add	r3, r2
 8008e34:	60bb      	str	r3, [r7, #8]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3308      	adds	r3, #8
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d104      	bne.n	8008e56 <vTaskSwitchContext+0x8a>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	; (8008e8c <vTaskSwitchContext+0xc0>)
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <vTaskSwitchContext+0xb8>)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <vTaskSwitchContext+0xc0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3354      	adds	r3, #84	; 0x54
 8008e6c:	4a08      	ldr	r2, [pc, #32]	; (8008e90 <vTaskSwitchContext+0xc4>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	20001280 	.word	0x20001280
 8008e80:	2000126c 	.word	0x2000126c
 8008e84:	20001260 	.word	0x20001260
 8008e88:	20000d88 	.word	0x20000d88
 8008e8c:	20000d84 	.word	0x20000d84
 8008e90:	20000034 	.word	0x20000034

08008e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60fb      	str	r3, [r7, #12]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <vTaskPlaceOnEventList+0x44>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3318      	adds	r3, #24
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe fe1b 	bl	8007afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ec8:	2101      	movs	r1, #1
 8008eca:	6838      	ldr	r0, [r7, #0]
 8008ecc:	f000 fa7a 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000d84 	.word	0x20000d84

08008edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	617b      	str	r3, [r7, #20]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7fe fdd2 	bl	8007ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f000 fa4f 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
	}
 8008f26:	bf00      	nop
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000d84 	.word	0x20000d84

08008f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60fb      	str	r3, [r7, #12]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3318      	adds	r3, #24
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fe03 	bl	8007b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6a:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <xTaskRemoveFromEventList+0xb0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d11d      	bne.n	8008fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fdfa 	bl	8007b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <xTaskRemoveFromEventList+0xb4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <xTaskRemoveFromEventList+0x5c>
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a16      	ldr	r2, [pc, #88]	; (8008fe8 <xTaskRemoveFromEventList+0xb4>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <xTaskRemoveFromEventList+0xb8>)
 8008f9e:	441a      	add	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe fd85 	bl	8007ab6 <vListInsertEnd>
 8008fac:	e005      	b.n	8008fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3318      	adds	r3, #24
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	480e      	ldr	r0, [pc, #56]	; (8008ff0 <xTaskRemoveFromEventList+0xbc>)
 8008fb6:	f7fe fd7e 	bl	8007ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <xTaskRemoveFromEventList+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d905      	bls.n	8008fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <xTaskRemoveFromEventList+0xc4>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	e001      	b.n	8008fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20001280 	.word	0x20001280
 8008fe8:	20001260 	.word	0x20001260
 8008fec:	20000d88 	.word	0x20000d88
 8008ff0:	20001218 	.word	0x20001218
 8008ff4:	20000d84 	.word	0x20000d84
 8008ff8:	2000126c 	.word	0x2000126c

08008ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <vTaskInternalSetTimeOutState+0x24>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <vTaskInternalSetTimeOutState+0x28>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	605a      	str	r2, [r3, #4]
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	20001270 	.word	0x20001270
 8009024:	2000125c 	.word	0x2000125c

08009028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	613b      	str	r3, [r7, #16]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800906a:	f000 fe7b 	bl	8009d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800906e:	4b1d      	ldr	r3, [pc, #116]	; (80090e4 <xTaskCheckForTimeOut+0xbc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d102      	bne.n	800908e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	e023      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <xTaskCheckForTimeOut+0xc0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d007      	beq.n	80090aa <xTaskCheckForTimeOut+0x82>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	e015      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d20b      	bcs.n	80090cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff ff9b 	bl	8008ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	e004      	b.n	80090d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090d6:	f000 fe75 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	2000125c 	.word	0x2000125c
 80090e8:	20001270 	.word	0x20001270

080090ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090f0:	4b03      	ldr	r3, [pc, #12]	; (8009100 <vTaskMissedYield+0x14>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	601a      	str	r2, [r3, #0]
}
 80090f6:	bf00      	nop
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	2000126c 	.word	0x2000126c

08009104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800910c:	f000 f84c 	bl	80091a8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <prvIdleTask+0x20>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009120:	e7f4      	b.n	800910c <prvIdleTask+0x8>
 8009122:	bf00      	nop
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e00c      	b.n	800914e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4a12      	ldr	r2, [pc, #72]	; (8009188 <prvInitialiseTaskLists+0x60>)
 8009140:	4413      	add	r3, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fc8a 	bl	8007a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3301      	adds	r3, #1
 800914c:	607b      	str	r3, [r7, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b37      	cmp	r3, #55	; 0x37
 8009152:	d9ef      	bls.n	8009134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009154:	480d      	ldr	r0, [pc, #52]	; (800918c <prvInitialiseTaskLists+0x64>)
 8009156:	f7fe fc81 	bl	8007a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800915a:	480d      	ldr	r0, [pc, #52]	; (8009190 <prvInitialiseTaskLists+0x68>)
 800915c:	f7fe fc7e 	bl	8007a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009160:	480c      	ldr	r0, [pc, #48]	; (8009194 <prvInitialiseTaskLists+0x6c>)
 8009162:	f7fe fc7b 	bl	8007a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <prvInitialiseTaskLists+0x70>)
 8009168:	f7fe fc78 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800916c:	480b      	ldr	r0, [pc, #44]	; (800919c <prvInitialiseTaskLists+0x74>)
 800916e:	f7fe fc75 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvInitialiseTaskLists+0x78>)
 8009174:	4a05      	ldr	r2, [pc, #20]	; (800918c <prvInitialiseTaskLists+0x64>)
 8009176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <prvInitialiseTaskLists+0x7c>)
 800917a:	4a05      	ldr	r2, [pc, #20]	; (8009190 <prvInitialiseTaskLists+0x68>)
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000d88 	.word	0x20000d88
 800918c:	200011e8 	.word	0x200011e8
 8009190:	200011fc 	.word	0x200011fc
 8009194:	20001218 	.word	0x20001218
 8009198:	2000122c 	.word	0x2000122c
 800919c:	20001244 	.word	0x20001244
 80091a0:	20001210 	.word	0x20001210
 80091a4:	20001214 	.word	0x20001214

080091a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091ae:	e019      	b.n	80091e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091b0:	f000 fdd8 	bl	8009d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <prvCheckTasksWaitingTermination+0x50>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fcd5 	bl	8007b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <prvCheckTasksWaitingTermination+0x54>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4a0b      	ldr	r2, [pc, #44]	; (80091fc <prvCheckTasksWaitingTermination+0x54>)
 80091ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4a0a      	ldr	r2, [pc, #40]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091da:	f000 fdf3 	bl	8009dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f810 	bl	8009204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <prvCheckTasksWaitingTermination+0x58>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e1      	bne.n	80091b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	2000122c 	.word	0x2000122c
 80091fc:	20001258 	.word	0x20001258
 8009200:	20001240 	.word	0x20001240

08009204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3354      	adds	r3, #84	; 0x54
 8009210:	4618      	mov	r0, r3
 8009212:	f002 f92f 	bl	800b474 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800921c:	2b00      	cmp	r3, #0
 800921e:	d108      	bne.n	8009232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	4618      	mov	r0, r3
 8009226:	f000 ff8b 	bl	800a140 <vPortFree>
				vPortFree( pxTCB );
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 ff88 	bl	800a140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009230:	e018      	b.n	8009264 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009238:	2b01      	cmp	r3, #1
 800923a:	d103      	bne.n	8009244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 ff7f 	bl	800a140 <vPortFree>
	}
 8009242:	e00f      	b.n	8009264 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800924a:	2b02      	cmp	r3, #2
 800924c:	d00a      	beq.n	8009264 <prvDeleteTCB+0x60>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	60fb      	str	r3, [r7, #12]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <prvDeleteTCB+0x5e>
	}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009272:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <prvResetNextTaskUnblockTime+0x38>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <prvResetNextTaskUnblockTime+0x3c>)
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009284:	e008      	b.n	8009298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009286:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <prvResetNextTaskUnblockTime+0x38>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	4a04      	ldr	r2, [pc, #16]	; (80092a8 <prvResetNextTaskUnblockTime+0x3c>)
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20001210 	.word	0x20001210
 80092a8:	20001278 	.word	0x20001278

080092ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092b2:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <xTaskGetSchedulerState+0x34>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092ba:	2301      	movs	r3, #1
 80092bc:	607b      	str	r3, [r7, #4]
 80092be:	e008      	b.n	80092d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <xTaskGetSchedulerState+0x38>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092c8:	2302      	movs	r3, #2
 80092ca:	607b      	str	r3, [r7, #4]
 80092cc:	e001      	b.n	80092d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ce:	2300      	movs	r3, #0
 80092d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092d2:	687b      	ldr	r3, [r7, #4]
	}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20001264 	.word	0x20001264
 80092e4:	20001280 	.word	0x20001280

080092e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d056      	beq.n	80093ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092fe:	4b2e      	ldr	r3, [pc, #184]	; (80093b8 <xTaskPriorityDisinherit+0xd0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	d00a      	beq.n	800931e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009340:	1e5a      	subs	r2, r3, #1
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934e:	429a      	cmp	r2, r3
 8009350:	d02c      	beq.n	80093ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	d128      	bne.n	80093ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3304      	adds	r3, #4
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fc06 	bl	8007b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <xTaskPriorityDisinherit+0xd4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d903      	bls.n	800938c <xTaskPriorityDisinherit+0xa4>
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	4a0c      	ldr	r2, [pc, #48]	; (80093bc <xTaskPriorityDisinherit+0xd4>)
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <xTaskPriorityDisinherit+0xd8>)
 800939a:	441a      	add	r2, r3
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3304      	adds	r3, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f7fe fb87 	bl	8007ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093ac:	697b      	ldr	r3, [r7, #20]
	}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000d84 	.word	0x20000d84
 80093bc:	20001260 	.word	0x20001260
 80093c0:	20000d88 	.word	0x20000d88

080093c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ce:	4b21      	ldr	r3, [pc, #132]	; (8009454 <prvAddCurrentTaskToDelayedList+0x90>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d4:	4b20      	ldr	r3, [pc, #128]	; (8009458 <prvAddCurrentTaskToDelayedList+0x94>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fbc8 	bl	8007b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d10a      	bne.n	80093fe <prvAddCurrentTaskToDelayedList+0x3a>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ee:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4819      	ldr	r0, [pc, #100]	; (800945c <prvAddCurrentTaskToDelayedList+0x98>)
 80093f8:	f7fe fb5d 	bl	8007ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093fc:	e026      	b.n	800944c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4413      	add	r3, r2
 8009404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <prvAddCurrentTaskToDelayedList+0x94>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d209      	bcs.n	800942a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009416:	4b12      	ldr	r3, [pc, #72]	; (8009460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <prvAddCurrentTaskToDelayedList+0x94>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe fb6b 	bl	8007afe <vListInsert>
}
 8009428:	e010      	b.n	800944c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <prvAddCurrentTaskToDelayedList+0x94>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fe fb61 	bl	8007afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800943c:	4b0a      	ldr	r3, [pc, #40]	; (8009468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	429a      	cmp	r2, r3
 8009444:	d202      	bcs.n	800944c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009446:	4a08      	ldr	r2, [pc, #32]	; (8009468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6013      	str	r3, [r2, #0]
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2000125c 	.word	0x2000125c
 8009458:	20000d84 	.word	0x20000d84
 800945c:	20001244 	.word	0x20001244
 8009460:	20001214 	.word	0x20001214
 8009464:	20001210 	.word	0x20001210
 8009468:	20001278 	.word	0x20001278

0800946c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	; 0x28
 8009470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009476:	f000 fb07 	bl	8009a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800947a:	4b1c      	ldr	r3, [pc, #112]	; (80094ec <xTimerCreateTimerTask+0x80>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d021      	beq.n	80094c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800948a:	1d3a      	adds	r2, r7, #4
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fac7 	bl	8007a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	9202      	str	r2, [sp, #8]
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	2302      	movs	r3, #2
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	2300      	movs	r3, #0
 80094aa:	460a      	mov	r2, r1
 80094ac:	4910      	ldr	r1, [pc, #64]	; (80094f0 <xTimerCreateTimerTask+0x84>)
 80094ae:	4811      	ldr	r0, [pc, #68]	; (80094f4 <xTimerCreateTimerTask+0x88>)
 80094b0:	f7ff f8fc 	bl	80086ac <xTaskCreateStatic>
 80094b4:	4603      	mov	r3, r0
 80094b6:	4a10      	ldr	r2, [pc, #64]	; (80094f8 <xTimerCreateTimerTask+0x8c>)
 80094b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094ba:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <xTimerCreateTimerTask+0x8c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094c2:	2301      	movs	r3, #1
 80094c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	613b      	str	r3, [r7, #16]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094e2:	697b      	ldr	r3, [r7, #20]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200012b4 	.word	0x200012b4
 80094f0:	0800d880 	.word	0x0800d880
 80094f4:	08009631 	.word	0x08009631
 80094f8:	200012b8 	.word	0x200012b8

080094fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800950a:	2300      	movs	r3, #0
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	623b      	str	r3, [r7, #32]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800952a:	4b1a      	ldr	r3, [pc, #104]	; (8009594 <xTimerGenericCommand+0x98>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d02a      	beq.n	8009588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b05      	cmp	r3, #5
 8009542:	dc18      	bgt.n	8009576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009544:	f7ff feb2 	bl	80092ac <xTaskGetSchedulerState>
 8009548:	4603      	mov	r3, r0
 800954a:	2b02      	cmp	r3, #2
 800954c:	d109      	bne.n	8009562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <xTimerGenericCommand+0x98>)
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f107 0110 	add.w	r1, r7, #16
 8009556:	2300      	movs	r3, #0
 8009558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800955a:	f7fe fc63 	bl	8007e24 <xQueueGenericSend>
 800955e:	6278      	str	r0, [r7, #36]	; 0x24
 8009560:	e012      	b.n	8009588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <xTimerGenericCommand+0x98>)
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f107 0110 	add.w	r1, r7, #16
 800956a:	2300      	movs	r3, #0
 800956c:	2200      	movs	r2, #0
 800956e:	f7fe fc59 	bl	8007e24 <xQueueGenericSend>
 8009572:	6278      	str	r0, [r7, #36]	; 0x24
 8009574:	e008      	b.n	8009588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <xTimerGenericCommand+0x98>)
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f107 0110 	add.w	r1, r7, #16
 800957e:	2300      	movs	r3, #0
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	f7fe fd35 	bl	8007ff0 <xQueueGenericSendFromISR>
 8009586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800958a:	4618      	mov	r0, r3
 800958c:	3728      	adds	r7, #40	; 0x28
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	200012b4 	.word	0x200012b4

08009598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a2:	4b22      	ldr	r3, [pc, #136]	; (800962c <prvProcessExpiredTimer+0x94>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fadd 	bl	8007b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d022      	beq.n	800960a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	18d1      	adds	r1, r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	6978      	ldr	r0, [r7, #20]
 80095d2:	f000 f8d1 	bl	8009778 <prvInsertTimerInActiveList>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01f      	beq.n	800961c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095dc:	2300      	movs	r3, #0
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2300      	movs	r3, #0
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	2100      	movs	r1, #0
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f7ff ff88 	bl	80094fc <xTimerGenericCommand>
 80095ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d113      	bne.n	800961c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	60fb      	str	r3, [r7, #12]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	b2da      	uxtb	r2, r3
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	6978      	ldr	r0, [r7, #20]
 8009622:	4798      	blx	r3
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	200012ac 	.word	0x200012ac

08009630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f857 	bl	80096f0 <prvGetNextExpireTime>
 8009642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4619      	mov	r1, r3
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f803 	bl	8009654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800964e:	f000 f8d5 	bl	80097fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009652:	e7f1      	b.n	8009638 <prvTimerTask+0x8>

08009654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800965e:	f7ff fa71 	bl	8008b44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f866 	bl	8009738 <prvSampleTimeNow>
 800966c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d130      	bne.n	80096d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <prvProcessTimerOrBlockTask+0x3c>
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	429a      	cmp	r2, r3
 8009680:	d806      	bhi.n	8009690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009682:	f7ff fa6d 	bl	8008b60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ff85 	bl	8009598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800968e:	e024      	b.n	80096da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d008      	beq.n	80096a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009696:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <prvProcessTimerOrBlockTask+0x90>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <prvProcessTimerOrBlockTask+0x50>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e000      	b.n	80096a6 <prvProcessTimerOrBlockTask+0x52>
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <prvProcessTimerOrBlockTask+0x94>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe ffc5 	bl	8008644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096ba:	f7ff fa51 	bl	8008b60 <xTaskResumeAll>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <prvProcessTimerOrBlockTask+0x98>)
 80096c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	f3bf 8f6f 	isb	sy
}
 80096d4:	e001      	b.n	80096da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096d6:	f7ff fa43 	bl	8008b60 <xTaskResumeAll>
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200012b0 	.word	0x200012b0
 80096e8:	200012b4 	.word	0x200012b4
 80096ec:	e000ed04 	.word	0xe000ed04

080096f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <prvGetNextExpireTime+0x44>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <prvGetNextExpireTime+0x16>
 8009702:	2201      	movs	r2, #1
 8009704:	e000      	b.n	8009708 <prvGetNextExpireTime+0x18>
 8009706:	2200      	movs	r2, #0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <prvGetNextExpireTime+0x44>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e001      	b.n	8009724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009724:	68fb      	ldr	r3, [r7, #12]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200012ac 	.word	0x200012ac

08009738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009740:	f7ff fa9e 	bl	8008c80 <xTaskGetTickCount>
 8009744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009746:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <prvSampleTimeNow+0x3c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	429a      	cmp	r2, r3
 800974e:	d205      	bcs.n	800975c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009750:	f000 f936 	bl	80099c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e002      	b.n	8009762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009762:	4a04      	ldr	r2, [pc, #16]	; (8009774 <prvSampleTimeNow+0x3c>)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009768:	68fb      	ldr	r3, [r7, #12]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200012bc 	.word	0x200012bc

08009778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d812      	bhi.n	80097c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	1ad2      	subs	r2, r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d302      	bcc.n	80097b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e01b      	b.n	80097ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097b2:	4b10      	ldr	r3, [pc, #64]	; (80097f4 <prvInsertTimerInActiveList+0x7c>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fe f99e 	bl	8007afe <vListInsert>
 80097c2:	e012      	b.n	80097ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d206      	bcs.n	80097da <prvInsertTimerInActiveList+0x62>
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d302      	bcc.n	80097da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097d4:	2301      	movs	r3, #1
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e007      	b.n	80097ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvInsertTimerInActiveList+0x80>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f7fe f98a 	bl	8007afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097ea:	697b      	ldr	r3, [r7, #20]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	200012b0 	.word	0x200012b0
 80097f8:	200012ac 	.word	0x200012ac

080097fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08e      	sub	sp, #56	; 0x38
 8009800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009802:	e0ca      	b.n	800999a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	da18      	bge.n	800983c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800980a:	1d3b      	adds	r3, r7, #4
 800980c:	3304      	adds	r3, #4
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	61fb      	str	r3, [r7, #28]
}
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009832:	6850      	ldr	r0, [r2, #4]
 8009834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009836:	6892      	ldr	r2, [r2, #8]
 8009838:	4611      	mov	r1, r2
 800983a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f2c0 80aa 	blt.w	8009998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	3304      	adds	r3, #4
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f98b 	bl	8007b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800985a:	463b      	mov	r3, r7
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff ff6b 	bl	8009738 <prvSampleTimeNow>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b09      	cmp	r3, #9
 8009868:	f200 8097 	bhi.w	800999a <prvProcessReceivedCommands+0x19e>
 800986c:	a201      	add	r2, pc, #4	; (adr r2, 8009874 <prvProcessReceivedCommands+0x78>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	0800989d 	.word	0x0800989d
 8009878:	0800989d 	.word	0x0800989d
 800987c:	0800989d 	.word	0x0800989d
 8009880:	08009911 	.word	0x08009911
 8009884:	08009925 	.word	0x08009925
 8009888:	0800996f 	.word	0x0800996f
 800988c:	0800989d 	.word	0x0800989d
 8009890:	0800989d 	.word	0x0800989d
 8009894:	08009911 	.word	0x08009911
 8009898:	08009925 	.word	0x08009925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	18d1      	adds	r1, r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098bc:	f7ff ff5c 	bl	8009778 <prvInsertTimerInActiveList>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d069      	beq.n	800999a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d05e      	beq.n	800999a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	441a      	add	r2, r3
 80098e4:	2300      	movs	r3, #0
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	2100      	movs	r1, #0
 80098ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ee:	f7ff fe05 	bl	80094fc <xTimerGenericCommand>
 80098f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d14f      	bne.n	800999a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	61bb      	str	r3, [r7, #24]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009922:	e03a      	b.n	800999a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	617b      	str	r3, [r7, #20]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	18d1      	adds	r1, r2, r3
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009968:	f7ff ff06 	bl	8009778 <prvInsertTimerInActiveList>
					break;
 800996c:	e015      	b.n	800999a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800997c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997e:	f000 fbdf 	bl	800a140 <vPortFree>
 8009982:	e00a      	b.n	800999a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009996:	e000      	b.n	800999a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999a:	4b08      	ldr	r3, [pc, #32]	; (80099bc <prvProcessReceivedCommands+0x1c0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	1d39      	adds	r1, r7, #4
 80099a0:	2200      	movs	r2, #0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fbc0 	bl	8008128 <xQueueReceive>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f47f af2a 	bne.w	8009804 <prvProcessReceivedCommands+0x8>
	}
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	3730      	adds	r7, #48	; 0x30
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200012b4 	.word	0x200012b4

080099c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099c6:	e048      	b.n	8009a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099c8:	4b2d      	ldr	r3, [pc, #180]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d2:	4b2b      	ldr	r3, [pc, #172]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3304      	adds	r3, #4
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe f8c5 	bl	8007b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02e      	beq.n	8009a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4413      	add	r3, r2
 8009a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d90e      	bls.n	8009a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a1a:	4b19      	ldr	r3, [pc, #100]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7fe f86a 	bl	8007afe <vListInsert>
 8009a2a:	e016      	b.n	8009a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	2300      	movs	r3, #0
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	2100      	movs	r1, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7ff fd60 	bl	80094fc <xTimerGenericCommand>
 8009a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	603b      	str	r3, [r7, #0]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1b1      	bne.n	80099c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <prvSwitchTimerLists+0xc4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a04      	ldr	r2, [pc, #16]	; (8009a80 <prvSwitchTimerLists+0xc0>)
 8009a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a72:	4a04      	ldr	r2, [pc, #16]	; (8009a84 <prvSwitchTimerLists+0xc4>)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	6013      	str	r3, [r2, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200012ac 	.word	0x200012ac
 8009a84:	200012b0 	.word	0x200012b0

08009a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a8e:	f000 f969 	bl	8009d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <prvCheckForValidListAndQueue+0x60>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d120      	bne.n	8009adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a9a:	4814      	ldr	r0, [pc, #80]	; (8009aec <prvCheckForValidListAndQueue+0x64>)
 8009a9c:	f7fd ffde 	bl	8007a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009aa0:	4813      	ldr	r0, [pc, #76]	; (8009af0 <prvCheckForValidListAndQueue+0x68>)
 8009aa2:	f7fd ffdb 	bl	8007a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <prvCheckForValidListAndQueue+0x6c>)
 8009aa8:	4a10      	ldr	r2, [pc, #64]	; (8009aec <prvCheckForValidListAndQueue+0x64>)
 8009aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <prvCheckForValidListAndQueue+0x70>)
 8009aae:	4a10      	ldr	r2, [pc, #64]	; (8009af0 <prvCheckForValidListAndQueue+0x68>)
 8009ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4b11      	ldr	r3, [pc, #68]	; (8009afc <prvCheckForValidListAndQueue+0x74>)
 8009ab8:	4a11      	ldr	r2, [pc, #68]	; (8009b00 <prvCheckForValidListAndQueue+0x78>)
 8009aba:	2110      	movs	r1, #16
 8009abc:	200a      	movs	r0, #10
 8009abe:	f7fe f8dc 	bl	8007c7a <xQueueGenericCreateStatic>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <prvCheckForValidListAndQueue+0x60>)
 8009ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <prvCheckForValidListAndQueue+0x60>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <prvCheckForValidListAndQueue+0x60>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	490b      	ldr	r1, [pc, #44]	; (8009b04 <prvCheckForValidListAndQueue+0x7c>)
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fd8a 	bl	80085f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009adc:	f000 f972 	bl	8009dc4 <vPortExitCritical>
}
 8009ae0:	bf00      	nop
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200012b4 	.word	0x200012b4
 8009aec:	20001284 	.word	0x20001284
 8009af0:	20001298 	.word	0x20001298
 8009af4:	200012ac 	.word	0x200012ac
 8009af8:	200012b0 	.word	0x200012b0
 8009afc:	20001360 	.word	0x20001360
 8009b00:	200012c0 	.word	0x200012c0
 8009b04:	0800d888 	.word	0x0800d888

08009b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3b04      	subs	r3, #4
 8009b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3b04      	subs	r3, #4
 8009b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 0201 	bic.w	r2, r3, #1
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3b04      	subs	r3, #4
 8009b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b38:	4a0c      	ldr	r2, [pc, #48]	; (8009b6c <pxPortInitialiseStack+0x64>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3b14      	subs	r3, #20
 8009b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f06f 0202 	mvn.w	r2, #2
 8009b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3b20      	subs	r3, #32
 8009b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	08009b71 	.word	0x08009b71

08009b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <prvTaskExitError+0x54>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d00a      	beq.n	8009b9a <prvTaskExitError+0x2a>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <prvTaskExitError+0x28>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	60bb      	str	r3, [r7, #8]
}
 8009bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bae:	bf00      	nop
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0fc      	beq.n	8009bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	20000030 	.word	0x20000030
	...

08009bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <pxCurrentTCBConst2>)
 8009bd2:	6819      	ldr	r1, [r3, #0]
 8009bd4:	6808      	ldr	r0, [r1, #0]
 8009bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	f380 8809 	msr	PSP, r0
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f04f 0000 	mov.w	r0, #0
 8009be6:	f380 8811 	msr	BASEPRI, r0
 8009bea:	4770      	bx	lr
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst2>:
 8009bf0:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bf8:	4808      	ldr	r0, [pc, #32]	; (8009c1c <prvPortStartFirstTask+0x24>)
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	6800      	ldr	r0, [r0, #0]
 8009bfe:	f380 8808 	msr	MSP, r0
 8009c02:	f04f 0000 	mov.w	r0, #0
 8009c06:	f380 8814 	msr	CONTROL, r0
 8009c0a:	b662      	cpsie	i
 8009c0c:	b661      	cpsie	f
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	df00      	svc	0
 8009c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c1a:	bf00      	nop
 8009c1c:	e000ed08 	.word	0xe000ed08

08009c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c26:	4b46      	ldr	r3, [pc, #280]	; (8009d40 <xPortStartScheduler+0x120>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a46      	ldr	r2, [pc, #280]	; (8009d44 <xPortStartScheduler+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d10a      	bne.n	8009c46 <xPortStartScheduler+0x26>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	613b      	str	r3, [r7, #16]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c46:	4b3e      	ldr	r3, [pc, #248]	; (8009d40 <xPortStartScheduler+0x120>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a3f      	ldr	r2, [pc, #252]	; (8009d48 <xPortStartScheduler+0x128>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d10a      	bne.n	8009c66 <xPortStartScheduler+0x46>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60fb      	str	r3, [r7, #12]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c66:	4b39      	ldr	r3, [pc, #228]	; (8009d4c <xPortStartScheduler+0x12c>)
 8009c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	4b31      	ldr	r3, [pc, #196]	; (8009d50 <xPortStartScheduler+0x130>)
 8009c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c8e:	4b31      	ldr	r3, [pc, #196]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c90:	2207      	movs	r2, #7
 8009c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c94:	e009      	b.n	8009caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c96:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4a2d      	ldr	r2, [pc, #180]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	d0ef      	beq.n	8009c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cb6:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1c3 0307 	rsb	r3, r3, #7
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d00a      	beq.n	8009cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	60bb      	str	r3, [r7, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <xPortStartScheduler+0x134>)
 8009ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <xPortStartScheduler+0x134>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cea:	4a1a      	ldr	r2, [pc, #104]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cf6:	4b18      	ldr	r3, [pc, #96]	; (8009d58 <xPortStartScheduler+0x138>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a17      	ldr	r2, [pc, #92]	; (8009d58 <xPortStartScheduler+0x138>)
 8009cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <xPortStartScheduler+0x138>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a14      	ldr	r2, [pc, #80]	; (8009d58 <xPortStartScheduler+0x138>)
 8009d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d0e:	f000 f8dd 	bl	8009ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d12:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <xPortStartScheduler+0x13c>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d18:	f000 f8fc 	bl	8009f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d1c:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <xPortStartScheduler+0x140>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a0f      	ldr	r2, [pc, #60]	; (8009d60 <xPortStartScheduler+0x140>)
 8009d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d28:	f7ff ff66 	bl	8009bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d2c:	f7ff f84e 	bl	8008dcc <vTaskSwitchContext>
	prvTaskExitError();
 8009d30:	f7ff ff1e 	bl	8009b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	e000ed00 	.word	0xe000ed00
 8009d44:	410fc271 	.word	0x410fc271
 8009d48:	410fc270 	.word	0x410fc270
 8009d4c:	e000e400 	.word	0xe000e400
 8009d50:	200013b0 	.word	0x200013b0
 8009d54:	200013b4 	.word	0x200013b4
 8009d58:	e000ed20 	.word	0xe000ed20
 8009d5c:	20000030 	.word	0x20000030
 8009d60:	e000ef34 	.word	0xe000ef34

08009d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	607b      	str	r3, [r7, #4]
}
 8009d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3301      	adds	r3, #1
 8009d84:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d10f      	bne.n	8009db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <vPortEnterCritical+0x5c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	603b      	str	r3, [r7, #0]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <vPortEnterCritical+0x4a>
	}
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000030 	.word	0x20000030
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dca:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <vPortExitCritical+0x50>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10a      	bne.n	8009de8 <vPortExitCritical+0x24>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	607b      	str	r3, [r7, #4]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <vPortExitCritical+0x50>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <vPortExitCritical+0x50>)
 8009df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <vPortExitCritical+0x50>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <vPortExitCritical+0x42>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	f383 8811 	msr	BASEPRI, r3
}
 8009e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20000030 	.word	0x20000030
	...

08009e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e20:	f3ef 8009 	mrs	r0, PSP
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <pxCurrentTCBConst>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	f01e 0f10 	tst.w	lr, #16
 8009e30:	bf08      	it	eq
 8009e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	6010      	str	r0, [r2, #0]
 8009e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e44:	f380 8811 	msr	BASEPRI, r0
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f7fe ffbc 	bl	8008dcc <vTaskSwitchContext>
 8009e54:	f04f 0000 	mov.w	r0, #0
 8009e58:	f380 8811 	msr	BASEPRI, r0
 8009e5c:	bc09      	pop	{r0, r3}
 8009e5e:	6819      	ldr	r1, [r3, #0]
 8009e60:	6808      	ldr	r0, [r1, #0]
 8009e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e66:	f01e 0f10 	tst.w	lr, #16
 8009e6a:	bf08      	it	eq
 8009e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e70:	f380 8809 	msr	PSP, r0
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w

08009e80 <pxCurrentTCBConst>:
 8009e80:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop

08009e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ea2:	f7fe fefd 	bl	8008ca0 <xTaskIncrementTick>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <xPortSysTickHandler+0x40>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f383 8811 	msr	BASEPRI, r3
}
 8009ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vPortSetupTimerInterrupt+0x34>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <vPortSetupTimerInterrupt+0x38>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <vPortSetupTimerInterrupt+0x3c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <vPortSetupTimerInterrupt+0x40>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	099b      	lsrs	r3, r3, #6
 8009ee8:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <vPortSetupTimerInterrupt+0x44>)
 8009eea:	3b01      	subs	r3, #1
 8009eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eee:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <vPortSetupTimerInterrupt+0x34>)
 8009ef0:	2207      	movs	r2, #7
 8009ef2:	601a      	str	r2, [r3, #0]
}
 8009ef4:	bf00      	nop
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	e000e010 	.word	0xe000e010
 8009f04:	e000e018 	.word	0xe000e018
 8009f08:	20000024 	.word	0x20000024
 8009f0c:	10624dd3 	.word	0x10624dd3
 8009f10:	e000e014 	.word	0xe000e014

08009f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f24 <vPortEnableVFP+0x10>
 8009f18:	6801      	ldr	r1, [r0, #0]
 8009f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f1e:	6001      	str	r1, [r0, #0]
 8009f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f22:	bf00      	nop
 8009f24:	e000ed88 	.word	0xe000ed88

08009f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f2e:	f3ef 8305 	mrs	r3, IPSR
 8009f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b0f      	cmp	r3, #15
 8009f38:	d914      	bls.n	8009f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f3a:	4a17      	ldr	r2, [pc, #92]	; (8009f98 <vPortValidateInterruptPriority+0x70>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f44:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <vPortValidateInterruptPriority+0x74>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	7afa      	ldrb	r2, [r7, #11]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d20a      	bcs.n	8009f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <vPortValidateInterruptPriority+0x78>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <vPortValidateInterruptPriority+0x7c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d90a      	bls.n	8009f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	603b      	str	r3, [r7, #0]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <vPortValidateInterruptPriority+0x60>
	}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	e000e3f0 	.word	0xe000e3f0
 8009f9c:	200013b0 	.word	0x200013b0
 8009fa0:	e000ed0c 	.word	0xe000ed0c
 8009fa4:	200013b4 	.word	0x200013b4

08009fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fb4:	f7fe fdc6 	bl	8008b44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fb8:	4b5b      	ldr	r3, [pc, #364]	; (800a128 <pvPortMalloc+0x180>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fc0:	f000 f920 	bl	800a204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fc4:	4b59      	ldr	r3, [pc, #356]	; (800a12c <pvPortMalloc+0x184>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 8093 	bne.w	800a0f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01d      	beq.n	800a014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fd8:	2208      	movs	r2, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d014      	beq.n	800a014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <pvPortMalloc+0x6c>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	617b      	str	r3, [r7, #20]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d06e      	beq.n	800a0f8 <pvPortMalloc+0x150>
 800a01a:	4b45      	ldr	r3, [pc, #276]	; (800a130 <pvPortMalloc+0x188>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d869      	bhi.n	800a0f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a024:	4b43      	ldr	r3, [pc, #268]	; (800a134 <pvPortMalloc+0x18c>)
 800a026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a028:	4b42      	ldr	r3, [pc, #264]	; (800a134 <pvPortMalloc+0x18c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a02e:	e004      	b.n	800a03a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	429a      	cmp	r2, r3
 800a042:	d903      	bls.n	800a04c <pvPortMalloc+0xa4>
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1f1      	bne.n	800a030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a04c:	4b36      	ldr	r3, [pc, #216]	; (800a128 <pvPortMalloc+0x180>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a052:	429a      	cmp	r2, r3
 800a054:	d050      	beq.n	800a0f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2208      	movs	r2, #8
 800a05c:	4413      	add	r3, r2
 800a05e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	2308      	movs	r3, #8
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	429a      	cmp	r2, r3
 800a076:	d91f      	bls.n	800a0b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00a      	beq.n	800a0a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	613b      	str	r3, [r7, #16]
}
 800a09c:	bf00      	nop
 800a09e:	e7fe      	b.n	800a09e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	1ad2      	subs	r2, r2, r3
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0b2:	69b8      	ldr	r0, [r7, #24]
 800a0b4:	f000 f908 	bl	800a2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <pvPortMalloc+0x188>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	; (800a130 <pvPortMalloc+0x188>)
 800a0c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <pvPortMalloc+0x188>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b1b      	ldr	r3, [pc, #108]	; (800a138 <pvPortMalloc+0x190>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d203      	bcs.n	800a0da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0d2:	4b17      	ldr	r3, [pc, #92]	; (800a130 <pvPortMalloc+0x188>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a18      	ldr	r2, [pc, #96]	; (800a138 <pvPortMalloc+0x190>)
 800a0d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	4b13      	ldr	r3, [pc, #76]	; (800a12c <pvPortMalloc+0x184>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <pvPortMalloc+0x194>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	4a11      	ldr	r2, [pc, #68]	; (800a13c <pvPortMalloc+0x194>)
 800a0f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0f8:	f7fe fd32 	bl	8008b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <pvPortMalloc+0x174>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	60fb      	str	r3, [r7, #12]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <pvPortMalloc+0x172>
	return pvReturn;
 800a11c:	69fb      	ldr	r3, [r7, #28]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3728      	adds	r7, #40	; 0x28
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20004fc0 	.word	0x20004fc0
 800a12c:	20004fd4 	.word	0x20004fd4
 800a130:	20004fc4 	.word	0x20004fc4
 800a134:	20004fb8 	.word	0x20004fb8
 800a138:	20004fc8 	.word	0x20004fc8
 800a13c:	20004fcc 	.word	0x20004fcc

0800a140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d04d      	beq.n	800a1ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a152:	2308      	movs	r3, #8
 800a154:	425b      	negs	r3, r3
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4413      	add	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	4b24      	ldr	r3, [pc, #144]	; (800a1f8 <vPortFree+0xb8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4013      	ands	r3, r2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <vPortFree+0x44>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <vPortFree+0x62>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60bb      	str	r3, [r7, #8]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b14      	ldr	r3, [pc, #80]	; (800a1f8 <vPortFree+0xb8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01e      	beq.n	800a1ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11a      	bne.n	800a1ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <vPortFree+0xb8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	401a      	ands	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1c8:	f7fe fcbc 	bl	8008b44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	4b0a      	ldr	r3, [pc, #40]	; (800a1fc <vPortFree+0xbc>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4a09      	ldr	r2, [pc, #36]	; (800a1fc <vPortFree+0xbc>)
 800a1d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f000 f874 	bl	800a2c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <vPortFree+0xc0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	4a06      	ldr	r2, [pc, #24]	; (800a200 <vPortFree+0xc0>)
 800a1e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1ea:	f7fe fcb9 	bl	8008b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20004fd4 	.word	0x20004fd4
 800a1fc:	20004fc4 	.word	0x20004fc4
 800a200:	20004fd0 	.word	0x20004fd0

0800a204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a20a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a210:	4b27      	ldr	r3, [pc, #156]	; (800a2b0 <prvHeapInit+0xac>)
 800a212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3307      	adds	r3, #7
 800a222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	4a1f      	ldr	r2, [pc, #124]	; (800a2b0 <prvHeapInit+0xac>)
 800a234:	4413      	add	r3, r2
 800a236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a23c:	4a1d      	ldr	r2, [pc, #116]	; (800a2b4 <prvHeapInit+0xb0>)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a242:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <prvHeapInit+0xb0>)
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a250:	2208      	movs	r2, #8
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <prvHeapInit+0xb4>)
 800a264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <prvHeapInit+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a26e:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <prvHeapInit+0xb4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <prvHeapInit+0xb4>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a0a      	ldr	r2, [pc, #40]	; (800a2bc <prvHeapInit+0xb8>)
 800a292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <prvHeapInit+0xbc>)
 800a29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <prvHeapInit+0xc0>)
 800a29e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2a2:	601a      	str	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	200013b8 	.word	0x200013b8
 800a2b4:	20004fb8 	.word	0x20004fb8
 800a2b8:	20004fc0 	.word	0x20004fc0
 800a2bc:	20004fc8 	.word	0x20004fc8
 800a2c0:	20004fc4 	.word	0x20004fc4
 800a2c4:	20004fd4 	.word	0x20004fd4

0800a2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2d0:	4b28      	ldr	r3, [pc, #160]	; (800a374 <prvInsertBlockIntoFreeList+0xac>)
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e002      	b.n	800a2dc <prvInsertBlockIntoFreeList+0x14>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d8f7      	bhi.n	800a2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d108      	bne.n	800a30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	441a      	add	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	441a      	add	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d118      	bne.n	800a350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <prvInsertBlockIntoFreeList+0xb0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d00d      	beq.n	800a346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	441a      	add	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e008      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a346:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <prvInsertBlockIntoFreeList+0xb0>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e003      	b.n	800a358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d002      	beq.n	800a366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20004fb8 	.word	0x20004fb8
 800a378:	20004fc0 	.word	0x20004fc0

0800a37c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800a382:	2300      	movs	r3, #0
 800a384:	71fb      	strb	r3, [r7, #7]
 800a386:	e026      	b.n	800a3d6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	3b50      	subs	r3, #80	; 0x50
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2100      	movs	r1, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f82b 	bl	800a3ec <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800a396:	2100      	movs	r1, #0
 800a398:	2000      	movs	r0, #0
 800a39a:	f000 f827 	bl	800a3ec <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800a39e:	2100      	movs	r1, #0
 800a3a0:	2010      	movs	r0, #16
 800a3a2:	f000 f823 	bl	800a3ec <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	71bb      	strb	r3, [r7, #6]
 800a3aa:	e00d      	b.n	800a3c8 <OLED_Refresh_Gram+0x4c>
 800a3ac:	79ba      	ldrb	r2, [r7, #6]
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	490d      	ldr	r1, [pc, #52]	; (800a3e8 <OLED_Refresh_Gram+0x6c>)
 800a3b2:	00d2      	lsls	r2, r2, #3
 800a3b4:	440a      	add	r2, r1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f815 	bl	800a3ec <OLED_WR_Byte>
 800a3c2:	79bb      	ldrb	r3, [r7, #6]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	71bb      	strb	r3, [r7, #6]
 800a3c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	daed      	bge.n	800a3ac <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	71fb      	strb	r3, [r7, #7]
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	2b07      	cmp	r3, #7
 800a3da:	d9d5      	bls.n	800a388 <OLED_Refresh_Gram+0xc>
	}   
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20004fd8 	.word	0x20004fd8

0800a3ec <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	460a      	mov	r2, r1
 800a3f6:	71fb      	strb	r3, [r7, #7]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800a3fc:	79bb      	ldrb	r3, [r7, #6]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d006      	beq.n	800a410 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800a402:	2201      	movs	r2, #1
 800a404:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a408:	481c      	ldr	r0, [pc, #112]	; (800a47c <OLED_WR_Byte+0x90>)
 800a40a:	f7f9 f967 	bl	80036dc <HAL_GPIO_WritePin>
 800a40e:	e005      	b.n	800a41c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800a410:	2200      	movs	r2, #0
 800a412:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a416:	4819      	ldr	r0, [pc, #100]	; (800a47c <OLED_WR_Byte+0x90>)
 800a418:	f7f9 f960 	bl	80036dc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
 800a420:	e01e      	b.n	800a460 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800a422:	2200      	movs	r2, #0
 800a424:	2120      	movs	r1, #32
 800a426:	4815      	ldr	r0, [pc, #84]	; (800a47c <OLED_WR_Byte+0x90>)
 800a428:	f7f9 f958 	bl	80036dc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800a42c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a430:	2b00      	cmp	r3, #0
 800a432:	da05      	bge.n	800a440 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800a434:	2201      	movs	r2, #1
 800a436:	2140      	movs	r1, #64	; 0x40
 800a438:	4810      	ldr	r0, [pc, #64]	; (800a47c <OLED_WR_Byte+0x90>)
 800a43a:	f7f9 f94f 	bl	80036dc <HAL_GPIO_WritePin>
 800a43e:	e004      	b.n	800a44a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800a440:	2200      	movs	r2, #0
 800a442:	2140      	movs	r1, #64	; 0x40
 800a444:	480d      	ldr	r0, [pc, #52]	; (800a47c <OLED_WR_Byte+0x90>)
 800a446:	f7f9 f949 	bl	80036dc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a44a:	2201      	movs	r2, #1
 800a44c:	2120      	movs	r1, #32
 800a44e:	480b      	ldr	r0, [pc, #44]	; (800a47c <OLED_WR_Byte+0x90>)
 800a450:	f7f9 f944 	bl	80036dc <HAL_GPIO_WritePin>
		dat<<=1;   
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	3301      	adds	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b07      	cmp	r3, #7
 800a464:	d9dd      	bls.n	800a422 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800a466:	2201      	movs	r2, #1
 800a468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a46c:	4803      	ldr	r0, [pc, #12]	; (800a47c <OLED_WR_Byte+0x90>)
 800a46e:	f7f9 f935 	bl	80036dc <HAL_GPIO_WritePin>
} 
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	40021000 	.word	0x40021000

0800a480 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800a486:	2300      	movs	r3, #0
 800a488:	71fb      	strb	r3, [r7, #7]
 800a48a:	e014      	b.n	800a4b6 <OLED_Clear+0x36>
 800a48c:	2300      	movs	r3, #0
 800a48e:	71bb      	strb	r3, [r7, #6]
 800a490:	e00a      	b.n	800a4a8 <OLED_Clear+0x28>
 800a492:	79ba      	ldrb	r2, [r7, #6]
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	490c      	ldr	r1, [pc, #48]	; (800a4c8 <OLED_Clear+0x48>)
 800a498:	00d2      	lsls	r2, r2, #3
 800a49a:	440a      	add	r2, r1
 800a49c:	4413      	add	r3, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	79bb      	ldrb	r3, [r7, #6]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	71bb      	strb	r3, [r7, #6]
 800a4a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	daf0      	bge.n	800a492 <OLED_Clear+0x12>
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	71fb      	strb	r3, [r7, #7]
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	2b07      	cmp	r3, #7
 800a4ba:	d9e7      	bls.n	800a48c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800a4bc:	f7ff ff5e 	bl	800a37c <OLED_Refresh_Gram>
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20004fd8 	.word	0x20004fd8

0800a4cc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	71bb      	strb	r3, [r7, #6]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800a4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	db41      	blt.n	800a56e <OLED_DrawPoint+0xa2>
 800a4ea:	79bb      	ldrb	r3, [r7, #6]
 800a4ec:	2b3f      	cmp	r3, #63	; 0x3f
 800a4ee:	d83e      	bhi.n	800a56e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800a4f0:	79bb      	ldrb	r3, [r7, #6]
 800a4f2:	08db      	lsrs	r3, r3, #3
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f1c3 0307 	rsb	r3, r3, #7
 800a4fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800a4fc:	79bb      	ldrb	r3, [r7, #6]
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800a504:	7b7b      	ldrb	r3, [r7, #13]
 800a506:	f1c3 0307 	rsb	r3, r3, #7
 800a50a:	2201      	movs	r2, #1
 800a50c:	fa02 f303 	lsl.w	r3, r2, r3
 800a510:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800a512:	797b      	ldrb	r3, [r7, #5]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d012      	beq.n	800a53e <OLED_DrawPoint+0x72>
 800a518:	79fa      	ldrb	r2, [r7, #7]
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	4917      	ldr	r1, [pc, #92]	; (800a57c <OLED_DrawPoint+0xb0>)
 800a51e:	00d2      	lsls	r2, r2, #3
 800a520:	440a      	add	r2, r1
 800a522:	4413      	add	r3, r2
 800a524:	7818      	ldrb	r0, [r3, #0]
 800a526:	79fa      	ldrb	r2, [r7, #7]
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	7bf9      	ldrb	r1, [r7, #15]
 800a52c:	4301      	orrs	r1, r0
 800a52e:	b2c8      	uxtb	r0, r1
 800a530:	4912      	ldr	r1, [pc, #72]	; (800a57c <OLED_DrawPoint+0xb0>)
 800a532:	00d2      	lsls	r2, r2, #3
 800a534:	440a      	add	r2, r1
 800a536:	4413      	add	r3, r2
 800a538:	4602      	mov	r2, r0
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e018      	b.n	800a570 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	490e      	ldr	r1, [pc, #56]	; (800a57c <OLED_DrawPoint+0xb0>)
 800a544:	00d2      	lsls	r2, r2, #3
 800a546:	440a      	add	r2, r1
 800a548:	4413      	add	r3, r2
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b25a      	sxtb	r2, r3
 800a54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a552:	43db      	mvns	r3, r3
 800a554:	b25b      	sxtb	r3, r3
 800a556:	4013      	ands	r3, r2
 800a558:	b259      	sxtb	r1, r3
 800a55a:	79fa      	ldrb	r2, [r7, #7]
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	b2c8      	uxtb	r0, r1
 800a560:	4906      	ldr	r1, [pc, #24]	; (800a57c <OLED_DrawPoint+0xb0>)
 800a562:	00d2      	lsls	r2, r2, #3
 800a564:	440a      	add	r2, r1
 800a566:	4413      	add	r3, r2
 800a568:	4602      	mov	r2, r0
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e000      	b.n	800a570 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800a56e:	bf00      	nop
}
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20004fd8 	.word	0x20004fd8

0800a580 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	4604      	mov	r4, r0
 800a588:	4608      	mov	r0, r1
 800a58a:	4611      	mov	r1, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	4623      	mov	r3, r4
 800a590:	71fb      	strb	r3, [r7, #7]
 800a592:	4603      	mov	r3, r0
 800a594:	71bb      	strb	r3, [r7, #6]
 800a596:	460b      	mov	r3, r1
 800a598:	717b      	strb	r3, [r7, #5]
 800a59a:	4613      	mov	r3, r2
 800a59c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800a59e:	79bb      	ldrb	r3, [r7, #6]
 800a5a0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800a5a2:	797b      	ldrb	r3, [r7, #5]
 800a5a4:	3b20      	subs	r3, #32
 800a5a6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73bb      	strb	r3, [r7, #14]
 800a5ac:	e04d      	b.n	800a64a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800a5ae:	793b      	ldrb	r3, [r7, #4]
 800a5b0:	2b0c      	cmp	r3, #12
 800a5b2:	d10b      	bne.n	800a5cc <OLED_ShowChar+0x4c>
 800a5b4:	797a      	ldrb	r2, [r7, #5]
 800a5b6:	7bb9      	ldrb	r1, [r7, #14]
 800a5b8:	4828      	ldr	r0, [pc, #160]	; (800a65c <OLED_ShowChar+0xdc>)
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4403      	add	r3, r0
 800a5c4:	440b      	add	r3, r1
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	e007      	b.n	800a5dc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800a5cc:	797a      	ldrb	r2, [r7, #5]
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	4923      	ldr	r1, [pc, #140]	; (800a660 <OLED_ShowChar+0xe0>)
 800a5d2:	0112      	lsls	r2, r2, #4
 800a5d4:	440a      	add	r2, r1
 800a5d6:	4413      	add	r3, r2
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	737b      	strb	r3, [r7, #13]
 800a5e0:	e02d      	b.n	800a63e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800a5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da07      	bge.n	800a5fa <OLED_ShowChar+0x7a>
 800a5ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a5ee:	79b9      	ldrb	r1, [r7, #6]
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff ff6a 	bl	800a4cc <OLED_DrawPoint>
 800a5f8:	e00c      	b.n	800a614 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800a5fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bf0c      	ite	eq
 800a602:	2301      	moveq	r3, #1
 800a604:	2300      	movne	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	461a      	mov	r2, r3
 800a60a:	79b9      	ldrb	r1, [r7, #6]
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff ff5c 	bl	800a4cc <OLED_DrawPoint>
			temp<<=1;
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]
			y++;
 800a61a:	79bb      	ldrb	r3, [r7, #6]
 800a61c:	3301      	adds	r3, #1
 800a61e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800a620:	79ba      	ldrb	r2, [r7, #6]
 800a622:	7b3b      	ldrb	r3, [r7, #12]
 800a624:	1ad2      	subs	r2, r2, r3
 800a626:	793b      	ldrb	r3, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d105      	bne.n	800a638 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800a62c:	7b3b      	ldrb	r3, [r7, #12]
 800a62e:	71bb      	strb	r3, [r7, #6]
				x++;
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	3301      	adds	r3, #1
 800a634:	71fb      	strb	r3, [r7, #7]
				break;
 800a636:	e005      	b.n	800a644 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800a638:	7b7b      	ldrb	r3, [r7, #13]
 800a63a:	3301      	adds	r3, #1
 800a63c:	737b      	strb	r3, [r7, #13]
 800a63e:	7b7b      	ldrb	r3, [r7, #13]
 800a640:	2b07      	cmp	r3, #7
 800a642:	d9ce      	bls.n	800a5e2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	3301      	adds	r3, #1
 800a648:	73bb      	strb	r3, [r7, #14]
 800a64a:	7bba      	ldrb	r2, [r7, #14]
 800a64c:	793b      	ldrb	r3, [r7, #4]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d3ad      	bcc.n	800a5ae <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	0800d908 	.word	0x0800d908
 800a660:	0800dd7c 	.word	0x0800dd7c

0800a664 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af02      	add	r7, sp, #8
 800a66a:	4603      	mov	r3, r0
 800a66c:	603a      	str	r2, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
 800a670:	460b      	mov	r3, r1
 800a672:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800a674:	e01f      	b.n	800a6b6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	2b7a      	cmp	r3, #122	; 0x7a
 800a67a:	d904      	bls.n	800a686 <OLED_ShowString+0x22>
 800a67c:	2300      	movs	r3, #0
 800a67e:	71fb      	strb	r3, [r7, #7]
 800a680:	79bb      	ldrb	r3, [r7, #6]
 800a682:	3310      	adds	r3, #16
 800a684:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800a686:	79bb      	ldrb	r3, [r7, #6]
 800a688:	2b3a      	cmp	r3, #58	; 0x3a
 800a68a:	d905      	bls.n	800a698 <OLED_ShowString+0x34>
 800a68c:	2300      	movs	r3, #0
 800a68e:	71fb      	strb	r3, [r7, #7]
 800a690:	79fb      	ldrb	r3, [r7, #7]
 800a692:	71bb      	strb	r3, [r7, #6]
 800a694:	f7ff fef4 	bl	800a480 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	79b9      	ldrb	r1, [r7, #6]
 800a69e:	79f8      	ldrb	r0, [r7, #7]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	f7ff ff6b 	bl	800a580 <OLED_ShowChar>
        x+=8;
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	71fb      	strb	r3, [r7, #7]
        p++;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1db      	bne.n	800a676 <OLED_ShowString+0x12>
    }  
}	 
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <OLED_Init>:

void OLED_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800a6cc:	f7f9 fffa 	bl	80046c4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800a6d0:	4b41      	ldr	r3, [pc, #260]	; (800a7d8 <OLED_Init+0x110>)
 800a6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d4:	4a40      	ldr	r2, [pc, #256]	; (800a7d8 <OLED_Init+0x110>)
 800a6d6:	f023 0301 	bic.w	r3, r3, #1
 800a6da:	6713      	str	r3, [r2, #112]	; 0x70
 800a6dc:	4b3e      	ldr	r3, [pc, #248]	; (800a7d8 <OLED_Init+0x110>)
 800a6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e0:	4a3d      	ldr	r2, [pc, #244]	; (800a7d8 <OLED_Init+0x110>)
 800a6e2:	f023 0304 	bic.w	r3, r3, #4
 800a6e6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800a6e8:	f7fa f800 	bl	80046ec <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2180      	movs	r1, #128	; 0x80
 800a6f0:	483a      	ldr	r0, [pc, #232]	; (800a7dc <OLED_Init+0x114>)
 800a6f2:	f7f8 fff3 	bl	80036dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a6f6:	2064      	movs	r0, #100	; 0x64
 800a6f8:	f7f8 fcbc 	bl	8003074 <HAL_Delay>
	OLED_RST_Set();
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	2180      	movs	r1, #128	; 0x80
 800a700:	4836      	ldr	r0, [pc, #216]	; (800a7dc <OLED_Init+0x114>)
 800a702:	f7f8 ffeb 	bl	80036dc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800a706:	2100      	movs	r1, #0
 800a708:	20ae      	movs	r0, #174	; 0xae
 800a70a:	f7ff fe6f 	bl	800a3ec <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800a70e:	2100      	movs	r1, #0
 800a710:	20d5      	movs	r0, #213	; 0xd5
 800a712:	f7ff fe6b 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800a716:	2100      	movs	r1, #0
 800a718:	2050      	movs	r0, #80	; 0x50
 800a71a:	f7ff fe67 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800a71e:	2100      	movs	r1, #0
 800a720:	20a8      	movs	r0, #168	; 0xa8
 800a722:	f7ff fe63 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800a726:	2100      	movs	r1, #0
 800a728:	203f      	movs	r0, #63	; 0x3f
 800a72a:	f7ff fe5f 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800a72e:	2100      	movs	r1, #0
 800a730:	20d3      	movs	r0, #211	; 0xd3
 800a732:	f7ff fe5b 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800a736:	2100      	movs	r1, #0
 800a738:	2000      	movs	r0, #0
 800a73a:	f7ff fe57 	bl	800a3ec <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800a73e:	2100      	movs	r1, #0
 800a740:	2040      	movs	r0, #64	; 0x40
 800a742:	f7ff fe53 	bl	800a3ec <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800a746:	2100      	movs	r1, #0
 800a748:	208d      	movs	r0, #141	; 0x8d
 800a74a:	f7ff fe4f 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800a74e:	2100      	movs	r1, #0
 800a750:	2014      	movs	r0, #20
 800a752:	f7ff fe4b 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800a756:	2100      	movs	r1, #0
 800a758:	2020      	movs	r0, #32
 800a75a:	f7ff fe47 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800a75e:	2100      	movs	r1, #0
 800a760:	2002      	movs	r0, #2
 800a762:	f7ff fe43 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800a766:	2100      	movs	r1, #0
 800a768:	20a1      	movs	r0, #161	; 0xa1
 800a76a:	f7ff fe3f 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800a76e:	2100      	movs	r1, #0
 800a770:	20c0      	movs	r0, #192	; 0xc0
 800a772:	f7ff fe3b 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800a776:	2100      	movs	r1, #0
 800a778:	20da      	movs	r0, #218	; 0xda
 800a77a:	f7ff fe37 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800a77e:	2100      	movs	r1, #0
 800a780:	2012      	movs	r0, #18
 800a782:	f7ff fe33 	bl	800a3ec <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800a786:	2100      	movs	r1, #0
 800a788:	2081      	movs	r0, #129	; 0x81
 800a78a:	f7ff fe2f 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800a78e:	2100      	movs	r1, #0
 800a790:	20ef      	movs	r0, #239	; 0xef
 800a792:	f7ff fe2b 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800a796:	2100      	movs	r1, #0
 800a798:	20d9      	movs	r0, #217	; 0xd9
 800a79a:	f7ff fe27 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800a79e:	2100      	movs	r1, #0
 800a7a0:	20f1      	movs	r0, #241	; 0xf1
 800a7a2:	f7ff fe23 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	20db      	movs	r0, #219	; 0xdb
 800a7aa:	f7ff fe1f 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	2030      	movs	r0, #48	; 0x30
 800a7b2:	f7ff fe1b 	bl	800a3ec <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	20a4      	movs	r0, #164	; 0xa4
 800a7ba:	f7ff fe17 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800a7be:	2100      	movs	r1, #0
 800a7c0:	20a6      	movs	r0, #166	; 0xa6
 800a7c2:	f7ff fe13 	bl	800a3ec <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	20af      	movs	r0, #175	; 0xaf
 800a7ca:	f7ff fe0f 	bl	800a3ec <OLED_WR_Byte>
	OLED_Clear(); 
 800a7ce:	f7ff fe57 	bl	800a480 <OLED_Clear>
 800a7d2:	bf00      	nop
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40023800 	.word	0x40023800
 800a7dc:	40021000 	.word	0x40021000

0800a7e0 <atoi>:
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	f000 bf98 	b.w	800b718 <strtol>

0800a7e8 <__errno>:
 800a7e8:	4b01      	ldr	r3, [pc, #4]	; (800a7f0 <__errno+0x8>)
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20000034 	.word	0x20000034

0800a7f4 <std>:
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a802:	6083      	str	r3, [r0, #8]
 800a804:	8181      	strh	r1, [r0, #12]
 800a806:	6643      	str	r3, [r0, #100]	; 0x64
 800a808:	81c2      	strh	r2, [r0, #14]
 800a80a:	6183      	str	r3, [r0, #24]
 800a80c:	4619      	mov	r1, r3
 800a80e:	2208      	movs	r2, #8
 800a810:	305c      	adds	r0, #92	; 0x5c
 800a812:	f000 f91a 	bl	800aa4a <memset>
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <std+0x38>)
 800a818:	6263      	str	r3, [r4, #36]	; 0x24
 800a81a:	4b05      	ldr	r3, [pc, #20]	; (800a830 <std+0x3c>)
 800a81c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <std+0x40>)
 800a820:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <std+0x44>)
 800a824:	6224      	str	r4, [r4, #32]
 800a826:	6323      	str	r3, [r4, #48]	; 0x30
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	bf00      	nop
 800a82c:	0800b58d 	.word	0x0800b58d
 800a830:	0800b5af 	.word	0x0800b5af
 800a834:	0800b5e7 	.word	0x0800b5e7
 800a838:	0800b60b 	.word	0x0800b60b

0800a83c <_cleanup_r>:
 800a83c:	4901      	ldr	r1, [pc, #4]	; (800a844 <_cleanup_r+0x8>)
 800a83e:	f000 b8af 	b.w	800a9a0 <_fwalk_reent>
 800a842:	bf00      	nop
 800a844:	0800c571 	.word	0x0800c571

0800a848 <__sfmoreglue>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	2268      	movs	r2, #104	; 0x68
 800a84c:	1e4d      	subs	r5, r1, #1
 800a84e:	4355      	muls	r5, r2
 800a850:	460e      	mov	r6, r1
 800a852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a856:	f000 f921 	bl	800aa9c <_malloc_r>
 800a85a:	4604      	mov	r4, r0
 800a85c:	b140      	cbz	r0, 800a870 <__sfmoreglue+0x28>
 800a85e:	2100      	movs	r1, #0
 800a860:	e9c0 1600 	strd	r1, r6, [r0]
 800a864:	300c      	adds	r0, #12
 800a866:	60a0      	str	r0, [r4, #8]
 800a868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a86c:	f000 f8ed 	bl	800aa4a <memset>
 800a870:	4620      	mov	r0, r4
 800a872:	bd70      	pop	{r4, r5, r6, pc}

0800a874 <__sfp_lock_acquire>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__sfp_lock_acquire+0x8>)
 800a876:	f000 b8d8 	b.w	800aa2a <__retarget_lock_acquire_recursive>
 800a87a:	bf00      	nop
 800a87c:	200053d9 	.word	0x200053d9

0800a880 <__sfp_lock_release>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__sfp_lock_release+0x8>)
 800a882:	f000 b8d3 	b.w	800aa2c <__retarget_lock_release_recursive>
 800a886:	bf00      	nop
 800a888:	200053d9 	.word	0x200053d9

0800a88c <__sinit_lock_acquire>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__sinit_lock_acquire+0x8>)
 800a88e:	f000 b8cc 	b.w	800aa2a <__retarget_lock_acquire_recursive>
 800a892:	bf00      	nop
 800a894:	200053da 	.word	0x200053da

0800a898 <__sinit_lock_release>:
 800a898:	4801      	ldr	r0, [pc, #4]	; (800a8a0 <__sinit_lock_release+0x8>)
 800a89a:	f000 b8c7 	b.w	800aa2c <__retarget_lock_release_recursive>
 800a89e:	bf00      	nop
 800a8a0:	200053da 	.word	0x200053da

0800a8a4 <__sinit>:
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	f7ff fff0 	bl	800a88c <__sinit_lock_acquire>
 800a8ac:	69a3      	ldr	r3, [r4, #24]
 800a8ae:	b11b      	cbz	r3, 800a8b8 <__sinit+0x14>
 800a8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b4:	f7ff bff0 	b.w	800a898 <__sinit_lock_release>
 800a8b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a8be:	4b13      	ldr	r3, [pc, #76]	; (800a90c <__sinit+0x68>)
 800a8c0:	4a13      	ldr	r2, [pc, #76]	; (800a910 <__sinit+0x6c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8c6:	42a3      	cmp	r3, r4
 800a8c8:	bf04      	itt	eq
 800a8ca:	2301      	moveq	r3, #1
 800a8cc:	61a3      	streq	r3, [r4, #24]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 f820 	bl	800a914 <__sfp>
 800a8d4:	6060      	str	r0, [r4, #4]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 f81c 	bl	800a914 <__sfp>
 800a8dc:	60a0      	str	r0, [r4, #8]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f818 	bl	800a914 <__sfp>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	60e0      	str	r0, [r4, #12]
 800a8e8:	2104      	movs	r1, #4
 800a8ea:	6860      	ldr	r0, [r4, #4]
 800a8ec:	f7ff ff82 	bl	800a7f4 <std>
 800a8f0:	68a0      	ldr	r0, [r4, #8]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	2109      	movs	r1, #9
 800a8f6:	f7ff ff7d 	bl	800a7f4 <std>
 800a8fa:	68e0      	ldr	r0, [r4, #12]
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	2112      	movs	r1, #18
 800a900:	f7ff ff78 	bl	800a7f4 <std>
 800a904:	2301      	movs	r3, #1
 800a906:	61a3      	str	r3, [r4, #24]
 800a908:	e7d2      	b.n	800a8b0 <__sinit+0xc>
 800a90a:	bf00      	nop
 800a90c:	0800e3cc 	.word	0x0800e3cc
 800a910:	0800a83d 	.word	0x0800a83d

0800a914 <__sfp>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	4607      	mov	r7, r0
 800a918:	f7ff ffac 	bl	800a874 <__sfp_lock_acquire>
 800a91c:	4b1e      	ldr	r3, [pc, #120]	; (800a998 <__sfp+0x84>)
 800a91e:	681e      	ldr	r6, [r3, #0]
 800a920:	69b3      	ldr	r3, [r6, #24]
 800a922:	b913      	cbnz	r3, 800a92a <__sfp+0x16>
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ffbd 	bl	800a8a4 <__sinit>
 800a92a:	3648      	adds	r6, #72	; 0x48
 800a92c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a930:	3b01      	subs	r3, #1
 800a932:	d503      	bpl.n	800a93c <__sfp+0x28>
 800a934:	6833      	ldr	r3, [r6, #0]
 800a936:	b30b      	cbz	r3, 800a97c <__sfp+0x68>
 800a938:	6836      	ldr	r6, [r6, #0]
 800a93a:	e7f7      	b.n	800a92c <__sfp+0x18>
 800a93c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a940:	b9d5      	cbnz	r5, 800a978 <__sfp+0x64>
 800a942:	4b16      	ldr	r3, [pc, #88]	; (800a99c <__sfp+0x88>)
 800a944:	60e3      	str	r3, [r4, #12]
 800a946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a94a:	6665      	str	r5, [r4, #100]	; 0x64
 800a94c:	f000 f86c 	bl	800aa28 <__retarget_lock_init_recursive>
 800a950:	f7ff ff96 	bl	800a880 <__sfp_lock_release>
 800a954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a95c:	6025      	str	r5, [r4, #0]
 800a95e:	61a5      	str	r5, [r4, #24]
 800a960:	2208      	movs	r2, #8
 800a962:	4629      	mov	r1, r5
 800a964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a968:	f000 f86f 	bl	800aa4a <memset>
 800a96c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a974:	4620      	mov	r0, r4
 800a976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a978:	3468      	adds	r4, #104	; 0x68
 800a97a:	e7d9      	b.n	800a930 <__sfp+0x1c>
 800a97c:	2104      	movs	r1, #4
 800a97e:	4638      	mov	r0, r7
 800a980:	f7ff ff62 	bl	800a848 <__sfmoreglue>
 800a984:	4604      	mov	r4, r0
 800a986:	6030      	str	r0, [r6, #0]
 800a988:	2800      	cmp	r0, #0
 800a98a:	d1d5      	bne.n	800a938 <__sfp+0x24>
 800a98c:	f7ff ff78 	bl	800a880 <__sfp_lock_release>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	e7ee      	b.n	800a974 <__sfp+0x60>
 800a996:	bf00      	nop
 800a998:	0800e3cc 	.word	0x0800e3cc
 800a99c:	ffff0001 	.word	0xffff0001

0800a9a0 <_fwalk_reent>:
 800a9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	4688      	mov	r8, r1
 800a9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a9b6:	d505      	bpl.n	800a9c4 <_fwalk_reent+0x24>
 800a9b8:	6824      	ldr	r4, [r4, #0]
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	d1f7      	bne.n	800a9ae <_fwalk_reent+0xe>
 800a9be:	4638      	mov	r0, r7
 800a9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c4:	89ab      	ldrh	r3, [r5, #12]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d907      	bls.n	800a9da <_fwalk_reent+0x3a>
 800a9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	d003      	beq.n	800a9da <_fwalk_reent+0x3a>
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	47c0      	blx	r8
 800a9d8:	4307      	orrs	r7, r0
 800a9da:	3568      	adds	r5, #104	; 0x68
 800a9dc:	e7e9      	b.n	800a9b2 <_fwalk_reent+0x12>
	...

0800a9e0 <__libc_init_array>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	4d0d      	ldr	r5, [pc, #52]	; (800aa18 <__libc_init_array+0x38>)
 800a9e4:	4c0d      	ldr	r4, [pc, #52]	; (800aa1c <__libc_init_array+0x3c>)
 800a9e6:	1b64      	subs	r4, r4, r5
 800a9e8:	10a4      	asrs	r4, r4, #2
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	42a6      	cmp	r6, r4
 800a9ee:	d109      	bne.n	800aa04 <__libc_init_array+0x24>
 800a9f0:	4d0b      	ldr	r5, [pc, #44]	; (800aa20 <__libc_init_array+0x40>)
 800a9f2:	4c0c      	ldr	r4, [pc, #48]	; (800aa24 <__libc_init_array+0x44>)
 800a9f4:	f002 ff02 	bl	800d7fc <_init>
 800a9f8:	1b64      	subs	r4, r4, r5
 800a9fa:	10a4      	asrs	r4, r4, #2
 800a9fc:	2600      	movs	r6, #0
 800a9fe:	42a6      	cmp	r6, r4
 800aa00:	d105      	bne.n	800aa0e <__libc_init_array+0x2e>
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa08:	4798      	blx	r3
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	e7ee      	b.n	800a9ec <__libc_init_array+0xc>
 800aa0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa12:	4798      	blx	r3
 800aa14:	3601      	adds	r6, #1
 800aa16:	e7f2      	b.n	800a9fe <__libc_init_array+0x1e>
 800aa18:	0800e754 	.word	0x0800e754
 800aa1c:	0800e754 	.word	0x0800e754
 800aa20:	0800e754 	.word	0x0800e754
 800aa24:	0800e758 	.word	0x0800e758

0800aa28 <__retarget_lock_init_recursive>:
 800aa28:	4770      	bx	lr

0800aa2a <__retarget_lock_acquire_recursive>:
 800aa2a:	4770      	bx	lr

0800aa2c <__retarget_lock_release_recursive>:
 800aa2c:	4770      	bx	lr

0800aa2e <memcpy>:
 800aa2e:	440a      	add	r2, r1
 800aa30:	4291      	cmp	r1, r2
 800aa32:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa36:	d100      	bne.n	800aa3a <memcpy+0xc>
 800aa38:	4770      	bx	lr
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa44:	4291      	cmp	r1, r2
 800aa46:	d1f9      	bne.n	800aa3c <memcpy+0xe>
 800aa48:	bd10      	pop	{r4, pc}

0800aa4a <memset>:
 800aa4a:	4402      	add	r2, r0
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d100      	bne.n	800aa54 <memset+0xa>
 800aa52:	4770      	bx	lr
 800aa54:	f803 1b01 	strb.w	r1, [r3], #1
 800aa58:	e7f9      	b.n	800aa4e <memset+0x4>
	...

0800aa5c <sbrk_aligned>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4e0e      	ldr	r6, [pc, #56]	; (800aa98 <sbrk_aligned+0x3c>)
 800aa60:	460c      	mov	r4, r1
 800aa62:	6831      	ldr	r1, [r6, #0]
 800aa64:	4605      	mov	r5, r0
 800aa66:	b911      	cbnz	r1, 800aa6e <sbrk_aligned+0x12>
 800aa68:	f000 fd60 	bl	800b52c <_sbrk_r>
 800aa6c:	6030      	str	r0, [r6, #0]
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 fd5b 	bl	800b52c <_sbrk_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d00a      	beq.n	800aa90 <sbrk_aligned+0x34>
 800aa7a:	1cc4      	adds	r4, r0, #3
 800aa7c:	f024 0403 	bic.w	r4, r4, #3
 800aa80:	42a0      	cmp	r0, r4
 800aa82:	d007      	beq.n	800aa94 <sbrk_aligned+0x38>
 800aa84:	1a21      	subs	r1, r4, r0
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 fd50 	bl	800b52c <_sbrk_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d101      	bne.n	800aa94 <sbrk_aligned+0x38>
 800aa90:	f04f 34ff 	mov.w	r4, #4294967295
 800aa94:	4620      	mov	r0, r4
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	200053e0 	.word	0x200053e0

0800aa9c <_malloc_r>:
 800aa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa0:	1ccd      	adds	r5, r1, #3
 800aaa2:	f025 0503 	bic.w	r5, r5, #3
 800aaa6:	3508      	adds	r5, #8
 800aaa8:	2d0c      	cmp	r5, #12
 800aaaa:	bf38      	it	cc
 800aaac:	250c      	movcc	r5, #12
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	4607      	mov	r7, r0
 800aab2:	db01      	blt.n	800aab8 <_malloc_r+0x1c>
 800aab4:	42a9      	cmp	r1, r5
 800aab6:	d905      	bls.n	800aac4 <_malloc_r+0x28>
 800aab8:	230c      	movs	r3, #12
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	2600      	movs	r6, #0
 800aabe:	4630      	mov	r0, r6
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac4:	4e2e      	ldr	r6, [pc, #184]	; (800ab80 <_malloc_r+0xe4>)
 800aac6:	f001 fdad 	bl	800c624 <__malloc_lock>
 800aaca:	6833      	ldr	r3, [r6, #0]
 800aacc:	461c      	mov	r4, r3
 800aace:	bb34      	cbnz	r4, 800ab1e <_malloc_r+0x82>
 800aad0:	4629      	mov	r1, r5
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7ff ffc2 	bl	800aa5c <sbrk_aligned>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	4604      	mov	r4, r0
 800aadc:	d14d      	bne.n	800ab7a <_malloc_r+0xde>
 800aade:	6834      	ldr	r4, [r6, #0]
 800aae0:	4626      	mov	r6, r4
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d140      	bne.n	800ab68 <_malloc_r+0xcc>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	4631      	mov	r1, r6
 800aaea:	4638      	mov	r0, r7
 800aaec:	eb04 0803 	add.w	r8, r4, r3
 800aaf0:	f000 fd1c 	bl	800b52c <_sbrk_r>
 800aaf4:	4580      	cmp	r8, r0
 800aaf6:	d13a      	bne.n	800ab6e <_malloc_r+0xd2>
 800aaf8:	6821      	ldr	r1, [r4, #0]
 800aafa:	3503      	adds	r5, #3
 800aafc:	1a6d      	subs	r5, r5, r1
 800aafe:	f025 0503 	bic.w	r5, r5, #3
 800ab02:	3508      	adds	r5, #8
 800ab04:	2d0c      	cmp	r5, #12
 800ab06:	bf38      	it	cc
 800ab08:	250c      	movcc	r5, #12
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7ff ffa5 	bl	800aa5c <sbrk_aligned>
 800ab12:	3001      	adds	r0, #1
 800ab14:	d02b      	beq.n	800ab6e <_malloc_r+0xd2>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	442b      	add	r3, r5
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	e00e      	b.n	800ab3c <_malloc_r+0xa0>
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	1b52      	subs	r2, r2, r5
 800ab22:	d41e      	bmi.n	800ab62 <_malloc_r+0xc6>
 800ab24:	2a0b      	cmp	r2, #11
 800ab26:	d916      	bls.n	800ab56 <_malloc_r+0xba>
 800ab28:	1961      	adds	r1, r4, r5
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	6025      	str	r5, [r4, #0]
 800ab2e:	bf18      	it	ne
 800ab30:	6059      	strne	r1, [r3, #4]
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	bf08      	it	eq
 800ab36:	6031      	streq	r1, [r6, #0]
 800ab38:	5162      	str	r2, [r4, r5]
 800ab3a:	604b      	str	r3, [r1, #4]
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f104 060b 	add.w	r6, r4, #11
 800ab42:	f001 fd75 	bl	800c630 <__malloc_unlock>
 800ab46:	f026 0607 	bic.w	r6, r6, #7
 800ab4a:	1d23      	adds	r3, r4, #4
 800ab4c:	1af2      	subs	r2, r6, r3
 800ab4e:	d0b6      	beq.n	800aabe <_malloc_r+0x22>
 800ab50:	1b9b      	subs	r3, r3, r6
 800ab52:	50a3      	str	r3, [r4, r2]
 800ab54:	e7b3      	b.n	800aabe <_malloc_r+0x22>
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	bf0c      	ite	eq
 800ab5c:	6032      	streq	r2, [r6, #0]
 800ab5e:	605a      	strne	r2, [r3, #4]
 800ab60:	e7ec      	b.n	800ab3c <_malloc_r+0xa0>
 800ab62:	4623      	mov	r3, r4
 800ab64:	6864      	ldr	r4, [r4, #4]
 800ab66:	e7b2      	b.n	800aace <_malloc_r+0x32>
 800ab68:	4634      	mov	r4, r6
 800ab6a:	6876      	ldr	r6, [r6, #4]
 800ab6c:	e7b9      	b.n	800aae2 <_malloc_r+0x46>
 800ab6e:	230c      	movs	r3, #12
 800ab70:	603b      	str	r3, [r7, #0]
 800ab72:	4638      	mov	r0, r7
 800ab74:	f001 fd5c 	bl	800c630 <__malloc_unlock>
 800ab78:	e7a1      	b.n	800aabe <_malloc_r+0x22>
 800ab7a:	6025      	str	r5, [r4, #0]
 800ab7c:	e7de      	b.n	800ab3c <_malloc_r+0xa0>
 800ab7e:	bf00      	nop
 800ab80:	200053dc 	.word	0x200053dc

0800ab84 <__cvt>:
 800ab84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	ec55 4b10 	vmov	r4, r5, d0
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	460e      	mov	r6, r1
 800ab90:	4619      	mov	r1, r3
 800ab92:	462b      	mov	r3, r5
 800ab94:	bfbb      	ittet	lt
 800ab96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab9a:	461d      	movlt	r5, r3
 800ab9c:	2300      	movge	r3, #0
 800ab9e:	232d      	movlt	r3, #45	; 0x2d
 800aba0:	700b      	strb	r3, [r1, #0]
 800aba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aba8:	4691      	mov	r9, r2
 800abaa:	f023 0820 	bic.w	r8, r3, #32
 800abae:	bfbc      	itt	lt
 800abb0:	4622      	movlt	r2, r4
 800abb2:	4614      	movlt	r4, r2
 800abb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abb8:	d005      	beq.n	800abc6 <__cvt+0x42>
 800abba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800abbe:	d100      	bne.n	800abc2 <__cvt+0x3e>
 800abc0:	3601      	adds	r6, #1
 800abc2:	2102      	movs	r1, #2
 800abc4:	e000      	b.n	800abc8 <__cvt+0x44>
 800abc6:	2103      	movs	r1, #3
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	ab02      	add	r3, sp, #8
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	ec45 4b10 	vmov	d0, r4, r5
 800abd4:	4653      	mov	r3, sl
 800abd6:	4632      	mov	r2, r6
 800abd8:	f000 fe56 	bl	800b888 <_dtoa_r>
 800abdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abe0:	4607      	mov	r7, r0
 800abe2:	d102      	bne.n	800abea <__cvt+0x66>
 800abe4:	f019 0f01 	tst.w	r9, #1
 800abe8:	d022      	beq.n	800ac30 <__cvt+0xac>
 800abea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abee:	eb07 0906 	add.w	r9, r7, r6
 800abf2:	d110      	bne.n	800ac16 <__cvt+0x92>
 800abf4:	783b      	ldrb	r3, [r7, #0]
 800abf6:	2b30      	cmp	r3, #48	; 0x30
 800abf8:	d10a      	bne.n	800ac10 <__cvt+0x8c>
 800abfa:	2200      	movs	r2, #0
 800abfc:	2300      	movs	r3, #0
 800abfe:	4620      	mov	r0, r4
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac06:	b918      	cbnz	r0, 800ac10 <__cvt+0x8c>
 800ac08:	f1c6 0601 	rsb	r6, r6, #1
 800ac0c:	f8ca 6000 	str.w	r6, [sl]
 800ac10:	f8da 3000 	ldr.w	r3, [sl]
 800ac14:	4499      	add	r9, r3
 800ac16:	2200      	movs	r2, #0
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	f7f5 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac22:	b108      	cbz	r0, 800ac28 <__cvt+0xa4>
 800ac24:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac28:	2230      	movs	r2, #48	; 0x30
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	454b      	cmp	r3, r9
 800ac2e:	d307      	bcc.n	800ac40 <__cvt+0xbc>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac34:	1bdb      	subs	r3, r3, r7
 800ac36:	4638      	mov	r0, r7
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	b004      	add	sp, #16
 800ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac40:	1c59      	adds	r1, r3, #1
 800ac42:	9103      	str	r1, [sp, #12]
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	e7f0      	b.n	800ac2a <__cvt+0xa6>

0800ac48 <__exponent>:
 800ac48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	bfb8      	it	lt
 800ac50:	4249      	neglt	r1, r1
 800ac52:	f803 2b02 	strb.w	r2, [r3], #2
 800ac56:	bfb4      	ite	lt
 800ac58:	222d      	movlt	r2, #45	; 0x2d
 800ac5a:	222b      	movge	r2, #43	; 0x2b
 800ac5c:	2909      	cmp	r1, #9
 800ac5e:	7042      	strb	r2, [r0, #1]
 800ac60:	dd2a      	ble.n	800acb8 <__exponent+0x70>
 800ac62:	f10d 0407 	add.w	r4, sp, #7
 800ac66:	46a4      	mov	ip, r4
 800ac68:	270a      	movs	r7, #10
 800ac6a:	46a6      	mov	lr, r4
 800ac6c:	460a      	mov	r2, r1
 800ac6e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac72:	fb07 1516 	mls	r5, r7, r6, r1
 800ac76:	3530      	adds	r5, #48	; 0x30
 800ac78:	2a63      	cmp	r2, #99	; 0x63
 800ac7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac82:	4631      	mov	r1, r6
 800ac84:	dcf1      	bgt.n	800ac6a <__exponent+0x22>
 800ac86:	3130      	adds	r1, #48	; 0x30
 800ac88:	f1ae 0502 	sub.w	r5, lr, #2
 800ac8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac90:	1c44      	adds	r4, r0, #1
 800ac92:	4629      	mov	r1, r5
 800ac94:	4561      	cmp	r1, ip
 800ac96:	d30a      	bcc.n	800acae <__exponent+0x66>
 800ac98:	f10d 0209 	add.w	r2, sp, #9
 800ac9c:	eba2 020e 	sub.w	r2, r2, lr
 800aca0:	4565      	cmp	r5, ip
 800aca2:	bf88      	it	hi
 800aca4:	2200      	movhi	r2, #0
 800aca6:	4413      	add	r3, r2
 800aca8:	1a18      	subs	r0, r3, r0
 800acaa:	b003      	add	sp, #12
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800acb6:	e7ed      	b.n	800ac94 <__exponent+0x4c>
 800acb8:	2330      	movs	r3, #48	; 0x30
 800acba:	3130      	adds	r1, #48	; 0x30
 800acbc:	7083      	strb	r3, [r0, #2]
 800acbe:	70c1      	strb	r1, [r0, #3]
 800acc0:	1d03      	adds	r3, r0, #4
 800acc2:	e7f1      	b.n	800aca8 <__exponent+0x60>

0800acc4 <_printf_float>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	ed2d 8b02 	vpush	{d8}
 800accc:	b08d      	sub	sp, #52	; 0x34
 800acce:	460c      	mov	r4, r1
 800acd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800acd4:	4616      	mov	r6, r2
 800acd6:	461f      	mov	r7, r3
 800acd8:	4605      	mov	r5, r0
 800acda:	f001 fc85 	bl	800c5e8 <_localeconv_r>
 800acde:	f8d0 a000 	ldr.w	sl, [r0]
 800ace2:	4650      	mov	r0, sl
 800ace4:	f7f5 fa74 	bl	80001d0 <strlen>
 800ace8:	2300      	movs	r3, #0
 800acea:	930a      	str	r3, [sp, #40]	; 0x28
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	f8d8 3000 	ldr.w	r3, [r8]
 800acf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800acf8:	3307      	adds	r3, #7
 800acfa:	f023 0307 	bic.w	r3, r3, #7
 800acfe:	f103 0208 	add.w	r2, r3, #8
 800ad02:	f8c8 2000 	str.w	r2, [r8]
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ad12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad1c:	ee08 0a10 	vmov	s16, r0
 800ad20:	4b9f      	ldr	r3, [pc, #636]	; (800afa0 <_printf_float+0x2dc>)
 800ad22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad26:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2a:	f7f5 feff 	bl	8000b2c <__aeabi_dcmpun>
 800ad2e:	bb88      	cbnz	r0, 800ad94 <_printf_float+0xd0>
 800ad30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad34:	4b9a      	ldr	r3, [pc, #616]	; (800afa0 <_printf_float+0x2dc>)
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3a:	f7f5 fed9 	bl	8000af0 <__aeabi_dcmple>
 800ad3e:	bb48      	cbnz	r0, 800ad94 <_printf_float+0xd0>
 800ad40:	2200      	movs	r2, #0
 800ad42:	2300      	movs	r3, #0
 800ad44:	4640      	mov	r0, r8
 800ad46:	4649      	mov	r1, r9
 800ad48:	f7f5 fec8 	bl	8000adc <__aeabi_dcmplt>
 800ad4c:	b110      	cbz	r0, 800ad54 <_printf_float+0x90>
 800ad4e:	232d      	movs	r3, #45	; 0x2d
 800ad50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad54:	4b93      	ldr	r3, [pc, #588]	; (800afa4 <_printf_float+0x2e0>)
 800ad56:	4894      	ldr	r0, [pc, #592]	; (800afa8 <_printf_float+0x2e4>)
 800ad58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad5c:	bf94      	ite	ls
 800ad5e:	4698      	movls	r8, r3
 800ad60:	4680      	movhi	r8, r0
 800ad62:	2303      	movs	r3, #3
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	9b05      	ldr	r3, [sp, #20]
 800ad68:	f023 0204 	bic.w	r2, r3, #4
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	f04f 0900 	mov.w	r9, #0
 800ad72:	9700      	str	r7, [sp, #0]
 800ad74:	4633      	mov	r3, r6
 800ad76:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f000 f9d8 	bl	800b130 <_printf_common>
 800ad80:	3001      	adds	r0, #1
 800ad82:	f040 8090 	bne.w	800aea6 <_printf_float+0x1e2>
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	b00d      	add	sp, #52	; 0x34
 800ad8c:	ecbd 8b02 	vpop	{d8}
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	4640      	mov	r0, r8
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	f7f5 fec6 	bl	8000b2c <__aeabi_dcmpun>
 800ada0:	b140      	cbz	r0, 800adb4 <_printf_float+0xf0>
 800ada2:	464b      	mov	r3, r9
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfbc      	itt	lt
 800ada8:	232d      	movlt	r3, #45	; 0x2d
 800adaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800adae:	487f      	ldr	r0, [pc, #508]	; (800afac <_printf_float+0x2e8>)
 800adb0:	4b7f      	ldr	r3, [pc, #508]	; (800afb0 <_printf_float+0x2ec>)
 800adb2:	e7d1      	b.n	800ad58 <_printf_float+0x94>
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800adba:	9206      	str	r2, [sp, #24]
 800adbc:	1c5a      	adds	r2, r3, #1
 800adbe:	d13f      	bne.n	800ae40 <_printf_float+0x17c>
 800adc0:	2306      	movs	r3, #6
 800adc2:	6063      	str	r3, [r4, #4]
 800adc4:	9b05      	ldr	r3, [sp, #20]
 800adc6:	6861      	ldr	r1, [r4, #4]
 800adc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800adcc:	2300      	movs	r3, #0
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	ab0a      	add	r3, sp, #40	; 0x28
 800add2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800add6:	ab09      	add	r3, sp, #36	; 0x24
 800add8:	ec49 8b10 	vmov	d0, r8, r9
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	6022      	str	r2, [r4, #0]
 800ade0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ade4:	4628      	mov	r0, r5
 800ade6:	f7ff fecd 	bl	800ab84 <__cvt>
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adee:	2b47      	cmp	r3, #71	; 0x47
 800adf0:	4680      	mov	r8, r0
 800adf2:	d108      	bne.n	800ae06 <_printf_float+0x142>
 800adf4:	1cc8      	adds	r0, r1, #3
 800adf6:	db02      	blt.n	800adfe <_printf_float+0x13a>
 800adf8:	6863      	ldr	r3, [r4, #4]
 800adfa:	4299      	cmp	r1, r3
 800adfc:	dd41      	ble.n	800ae82 <_printf_float+0x1be>
 800adfe:	f1ab 0b02 	sub.w	fp, fp, #2
 800ae02:	fa5f fb8b 	uxtb.w	fp, fp
 800ae06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae0a:	d820      	bhi.n	800ae4e <_printf_float+0x18a>
 800ae0c:	3901      	subs	r1, #1
 800ae0e:	465a      	mov	r2, fp
 800ae10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae14:	9109      	str	r1, [sp, #36]	; 0x24
 800ae16:	f7ff ff17 	bl	800ac48 <__exponent>
 800ae1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae1c:	1813      	adds	r3, r2, r0
 800ae1e:	2a01      	cmp	r2, #1
 800ae20:	4681      	mov	r9, r0
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	dc02      	bgt.n	800ae2c <_printf_float+0x168>
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	07d2      	lsls	r2, r2, #31
 800ae2a:	d501      	bpl.n	800ae30 <_printf_float+0x16c>
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d09c      	beq.n	800ad72 <_printf_float+0xae>
 800ae38:	232d      	movs	r3, #45	; 0x2d
 800ae3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae3e:	e798      	b.n	800ad72 <_printf_float+0xae>
 800ae40:	9a06      	ldr	r2, [sp, #24]
 800ae42:	2a47      	cmp	r2, #71	; 0x47
 800ae44:	d1be      	bne.n	800adc4 <_printf_float+0x100>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1bc      	bne.n	800adc4 <_printf_float+0x100>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e7b9      	b.n	800adc2 <_printf_float+0xfe>
 800ae4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae52:	d118      	bne.n	800ae86 <_printf_float+0x1c2>
 800ae54:	2900      	cmp	r1, #0
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	dd0b      	ble.n	800ae72 <_printf_float+0x1ae>
 800ae5a:	6121      	str	r1, [r4, #16]
 800ae5c:	b913      	cbnz	r3, 800ae64 <_printf_float+0x1a0>
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	07d0      	lsls	r0, r2, #31
 800ae62:	d502      	bpl.n	800ae6a <_printf_float+0x1a6>
 800ae64:	3301      	adds	r3, #1
 800ae66:	440b      	add	r3, r1
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae6c:	f04f 0900 	mov.w	r9, #0
 800ae70:	e7de      	b.n	800ae30 <_printf_float+0x16c>
 800ae72:	b913      	cbnz	r3, 800ae7a <_printf_float+0x1b6>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	07d2      	lsls	r2, r2, #31
 800ae78:	d501      	bpl.n	800ae7e <_printf_float+0x1ba>
 800ae7a:	3302      	adds	r3, #2
 800ae7c:	e7f4      	b.n	800ae68 <_printf_float+0x1a4>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e7f2      	b.n	800ae68 <_printf_float+0x1a4>
 800ae82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae88:	4299      	cmp	r1, r3
 800ae8a:	db05      	blt.n	800ae98 <_printf_float+0x1d4>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	6121      	str	r1, [r4, #16]
 800ae90:	07d8      	lsls	r0, r3, #31
 800ae92:	d5ea      	bpl.n	800ae6a <_printf_float+0x1a6>
 800ae94:	1c4b      	adds	r3, r1, #1
 800ae96:	e7e7      	b.n	800ae68 <_printf_float+0x1a4>
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	bfd4      	ite	le
 800ae9c:	f1c1 0202 	rsble	r2, r1, #2
 800aea0:	2201      	movgt	r2, #1
 800aea2:	4413      	add	r3, r2
 800aea4:	e7e0      	b.n	800ae68 <_printf_float+0x1a4>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	055a      	lsls	r2, r3, #21
 800aeaa:	d407      	bmi.n	800aebc <_printf_float+0x1f8>
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	4642      	mov	r2, r8
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d12c      	bne.n	800af14 <_printf_float+0x250>
 800aeba:	e764      	b.n	800ad86 <_printf_float+0xc2>
 800aebc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aec0:	f240 80e0 	bls.w	800b084 <_printf_float+0x3c0>
 800aec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aec8:	2200      	movs	r2, #0
 800aeca:	2300      	movs	r3, #0
 800aecc:	f7f5 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d034      	beq.n	800af3e <_printf_float+0x27a>
 800aed4:	4a37      	ldr	r2, [pc, #220]	; (800afb4 <_printf_float+0x2f0>)
 800aed6:	2301      	movs	r3, #1
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	f43f af51 	beq.w	800ad86 <_printf_float+0xc2>
 800aee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aee8:	429a      	cmp	r2, r3
 800aeea:	db02      	blt.n	800aef2 <_printf_float+0x22e>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07d8      	lsls	r0, r3, #31
 800aef0:	d510      	bpl.n	800af14 <_printf_float+0x250>
 800aef2:	ee18 3a10 	vmov	r3, s16
 800aef6:	4652      	mov	r2, sl
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	f43f af41 	beq.w	800ad86 <_printf_float+0xc2>
 800af04:	f04f 0800 	mov.w	r8, #0
 800af08:	f104 091a 	add.w	r9, r4, #26
 800af0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0e:	3b01      	subs	r3, #1
 800af10:	4543      	cmp	r3, r8
 800af12:	dc09      	bgt.n	800af28 <_printf_float+0x264>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	079b      	lsls	r3, r3, #30
 800af18:	f100 8105 	bmi.w	800b126 <_printf_float+0x462>
 800af1c:	68e0      	ldr	r0, [r4, #12]
 800af1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af20:	4298      	cmp	r0, r3
 800af22:	bfb8      	it	lt
 800af24:	4618      	movlt	r0, r3
 800af26:	e730      	b.n	800ad8a <_printf_float+0xc6>
 800af28:	2301      	movs	r3, #1
 800af2a:	464a      	mov	r2, r9
 800af2c:	4631      	mov	r1, r6
 800af2e:	4628      	mov	r0, r5
 800af30:	47b8      	blx	r7
 800af32:	3001      	adds	r0, #1
 800af34:	f43f af27 	beq.w	800ad86 <_printf_float+0xc2>
 800af38:	f108 0801 	add.w	r8, r8, #1
 800af3c:	e7e6      	b.n	800af0c <_printf_float+0x248>
 800af3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc39      	bgt.n	800afb8 <_printf_float+0x2f4>
 800af44:	4a1b      	ldr	r2, [pc, #108]	; (800afb4 <_printf_float+0x2f0>)
 800af46:	2301      	movs	r3, #1
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f af19 	beq.w	800ad86 <_printf_float+0xc2>
 800af54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af58:	4313      	orrs	r3, r2
 800af5a:	d102      	bne.n	800af62 <_printf_float+0x29e>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	07d9      	lsls	r1, r3, #31
 800af60:	d5d8      	bpl.n	800af14 <_printf_float+0x250>
 800af62:	ee18 3a10 	vmov	r3, s16
 800af66:	4652      	mov	r2, sl
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	47b8      	blx	r7
 800af6e:	3001      	adds	r0, #1
 800af70:	f43f af09 	beq.w	800ad86 <_printf_float+0xc2>
 800af74:	f04f 0900 	mov.w	r9, #0
 800af78:	f104 0a1a 	add.w	sl, r4, #26
 800af7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7e:	425b      	negs	r3, r3
 800af80:	454b      	cmp	r3, r9
 800af82:	dc01      	bgt.n	800af88 <_printf_float+0x2c4>
 800af84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af86:	e792      	b.n	800aeae <_printf_float+0x1ea>
 800af88:	2301      	movs	r3, #1
 800af8a:	4652      	mov	r2, sl
 800af8c:	4631      	mov	r1, r6
 800af8e:	4628      	mov	r0, r5
 800af90:	47b8      	blx	r7
 800af92:	3001      	adds	r0, #1
 800af94:	f43f aef7 	beq.w	800ad86 <_printf_float+0xc2>
 800af98:	f109 0901 	add.w	r9, r9, #1
 800af9c:	e7ee      	b.n	800af7c <_printf_float+0x2b8>
 800af9e:	bf00      	nop
 800afa0:	7fefffff 	.word	0x7fefffff
 800afa4:	0800e3d0 	.word	0x0800e3d0
 800afa8:	0800e3d4 	.word	0x0800e3d4
 800afac:	0800e3dc 	.word	0x0800e3dc
 800afb0:	0800e3d8 	.word	0x0800e3d8
 800afb4:	0800e3e0 	.word	0x0800e3e0
 800afb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bfa8      	it	ge
 800afc0:	461a      	movge	r2, r3
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	4691      	mov	r9, r2
 800afc6:	dc37      	bgt.n	800b038 <_printf_float+0x374>
 800afc8:	f04f 0b00 	mov.w	fp, #0
 800afcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afd0:	f104 021a 	add.w	r2, r4, #26
 800afd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afd6:	9305      	str	r3, [sp, #20]
 800afd8:	eba3 0309 	sub.w	r3, r3, r9
 800afdc:	455b      	cmp	r3, fp
 800afde:	dc33      	bgt.n	800b048 <_printf_float+0x384>
 800afe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afe4:	429a      	cmp	r2, r3
 800afe6:	db3b      	blt.n	800b060 <_printf_float+0x39c>
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	07da      	lsls	r2, r3, #31
 800afec:	d438      	bmi.n	800b060 <_printf_float+0x39c>
 800afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff0:	9a05      	ldr	r2, [sp, #20]
 800aff2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aff4:	1a9a      	subs	r2, r3, r2
 800aff6:	eba3 0901 	sub.w	r9, r3, r1
 800affa:	4591      	cmp	r9, r2
 800affc:	bfa8      	it	ge
 800affe:	4691      	movge	r9, r2
 800b000:	f1b9 0f00 	cmp.w	r9, #0
 800b004:	dc35      	bgt.n	800b072 <_printf_float+0x3ae>
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b00e:	f104 0a1a 	add.w	sl, r4, #26
 800b012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	eba3 0309 	sub.w	r3, r3, r9
 800b01c:	4543      	cmp	r3, r8
 800b01e:	f77f af79 	ble.w	800af14 <_printf_float+0x250>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	f43f aeaa 	beq.w	800ad86 <_printf_float+0xc2>
 800b032:	f108 0801 	add.w	r8, r8, #1
 800b036:	e7ec      	b.n	800b012 <_printf_float+0x34e>
 800b038:	4613      	mov	r3, r2
 800b03a:	4631      	mov	r1, r6
 800b03c:	4642      	mov	r2, r8
 800b03e:	4628      	mov	r0, r5
 800b040:	47b8      	blx	r7
 800b042:	3001      	adds	r0, #1
 800b044:	d1c0      	bne.n	800afc8 <_printf_float+0x304>
 800b046:	e69e      	b.n	800ad86 <_printf_float+0xc2>
 800b048:	2301      	movs	r3, #1
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	9205      	str	r2, [sp, #20]
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f ae97 	beq.w	800ad86 <_printf_float+0xc2>
 800b058:	9a05      	ldr	r2, [sp, #20]
 800b05a:	f10b 0b01 	add.w	fp, fp, #1
 800b05e:	e7b9      	b.n	800afd4 <_printf_float+0x310>
 800b060:	ee18 3a10 	vmov	r3, s16
 800b064:	4652      	mov	r2, sl
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	d1be      	bne.n	800afee <_printf_float+0x32a>
 800b070:	e689      	b.n	800ad86 <_printf_float+0xc2>
 800b072:	9a05      	ldr	r2, [sp, #20]
 800b074:	464b      	mov	r3, r9
 800b076:	4442      	add	r2, r8
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	d1c1      	bne.n	800b006 <_printf_float+0x342>
 800b082:	e680      	b.n	800ad86 <_printf_float+0xc2>
 800b084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b086:	2a01      	cmp	r2, #1
 800b088:	dc01      	bgt.n	800b08e <_printf_float+0x3ca>
 800b08a:	07db      	lsls	r3, r3, #31
 800b08c:	d538      	bpl.n	800b100 <_printf_float+0x43c>
 800b08e:	2301      	movs	r3, #1
 800b090:	4642      	mov	r2, r8
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	47b8      	blx	r7
 800b098:	3001      	adds	r0, #1
 800b09a:	f43f ae74 	beq.w	800ad86 <_printf_float+0xc2>
 800b09e:	ee18 3a10 	vmov	r3, s16
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f ae6b 	beq.w	800ad86 <_printf_float+0xc2>
 800b0b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f7f5 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0bc:	b9d8      	cbnz	r0, 800b0f6 <_printf_float+0x432>
 800b0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c0:	f108 0201 	add.w	r2, r8, #1
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d10e      	bne.n	800b0ee <_printf_float+0x42a>
 800b0d0:	e659      	b.n	800ad86 <_printf_float+0xc2>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f ae52 	beq.w	800ad86 <_printf_float+0xc2>
 800b0e2:	f108 0801 	add.w	r8, r8, #1
 800b0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	4543      	cmp	r3, r8
 800b0ec:	dcf1      	bgt.n	800b0d2 <_printf_float+0x40e>
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0f4:	e6dc      	b.n	800aeb0 <_printf_float+0x1ec>
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	f104 0a1a 	add.w	sl, r4, #26
 800b0fe:	e7f2      	b.n	800b0e6 <_printf_float+0x422>
 800b100:	2301      	movs	r3, #1
 800b102:	4642      	mov	r2, r8
 800b104:	e7df      	b.n	800b0c6 <_printf_float+0x402>
 800b106:	2301      	movs	r3, #1
 800b108:	464a      	mov	r2, r9
 800b10a:	4631      	mov	r1, r6
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b8      	blx	r7
 800b110:	3001      	adds	r0, #1
 800b112:	f43f ae38 	beq.w	800ad86 <_printf_float+0xc2>
 800b116:	f108 0801 	add.w	r8, r8, #1
 800b11a:	68e3      	ldr	r3, [r4, #12]
 800b11c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b11e:	1a5b      	subs	r3, r3, r1
 800b120:	4543      	cmp	r3, r8
 800b122:	dcf0      	bgt.n	800b106 <_printf_float+0x442>
 800b124:	e6fa      	b.n	800af1c <_printf_float+0x258>
 800b126:	f04f 0800 	mov.w	r8, #0
 800b12a:	f104 0919 	add.w	r9, r4, #25
 800b12e:	e7f4      	b.n	800b11a <_printf_float+0x456>

0800b130 <_printf_common>:
 800b130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b134:	4616      	mov	r6, r2
 800b136:	4699      	mov	r9, r3
 800b138:	688a      	ldr	r2, [r1, #8]
 800b13a:	690b      	ldr	r3, [r1, #16]
 800b13c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b140:	4293      	cmp	r3, r2
 800b142:	bfb8      	it	lt
 800b144:	4613      	movlt	r3, r2
 800b146:	6033      	str	r3, [r6, #0]
 800b148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b14c:	4607      	mov	r7, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b10a      	cbz	r2, 800b156 <_printf_common+0x26>
 800b152:	3301      	adds	r3, #1
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	0699      	lsls	r1, r3, #26
 800b15a:	bf42      	ittt	mi
 800b15c:	6833      	ldrmi	r3, [r6, #0]
 800b15e:	3302      	addmi	r3, #2
 800b160:	6033      	strmi	r3, [r6, #0]
 800b162:	6825      	ldr	r5, [r4, #0]
 800b164:	f015 0506 	ands.w	r5, r5, #6
 800b168:	d106      	bne.n	800b178 <_printf_common+0x48>
 800b16a:	f104 0a19 	add.w	sl, r4, #25
 800b16e:	68e3      	ldr	r3, [r4, #12]
 800b170:	6832      	ldr	r2, [r6, #0]
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	42ab      	cmp	r3, r5
 800b176:	dc26      	bgt.n	800b1c6 <_printf_common+0x96>
 800b178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b17c:	1e13      	subs	r3, r2, #0
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	bf18      	it	ne
 800b182:	2301      	movne	r3, #1
 800b184:	0692      	lsls	r2, r2, #26
 800b186:	d42b      	bmi.n	800b1e0 <_printf_common+0xb0>
 800b188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b18c:	4649      	mov	r1, r9
 800b18e:	4638      	mov	r0, r7
 800b190:	47c0      	blx	r8
 800b192:	3001      	adds	r0, #1
 800b194:	d01e      	beq.n	800b1d4 <_printf_common+0xa4>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	68e5      	ldr	r5, [r4, #12]
 800b19a:	6832      	ldr	r2, [r6, #0]
 800b19c:	f003 0306 	and.w	r3, r3, #6
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	bf08      	it	eq
 800b1a4:	1aad      	subeq	r5, r5, r2
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	6922      	ldr	r2, [r4, #16]
 800b1aa:	bf0c      	ite	eq
 800b1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b0:	2500      	movne	r5, #0
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	bfc4      	itt	gt
 800b1b6:	1a9b      	subgt	r3, r3, r2
 800b1b8:	18ed      	addgt	r5, r5, r3
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	341a      	adds	r4, #26
 800b1be:	42b5      	cmp	r5, r6
 800b1c0:	d11a      	bne.n	800b1f8 <_printf_common+0xc8>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e008      	b.n	800b1d8 <_printf_common+0xa8>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	47c0      	blx	r8
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d103      	bne.n	800b1dc <_printf_common+0xac>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1dc:	3501      	adds	r5, #1
 800b1de:	e7c6      	b.n	800b16e <_printf_common+0x3e>
 800b1e0:	18e1      	adds	r1, r4, r3
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	2030      	movs	r0, #48	; 0x30
 800b1e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ea:	4422      	add	r2, r4
 800b1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1f4:	3302      	adds	r3, #2
 800b1f6:	e7c7      	b.n	800b188 <_printf_common+0x58>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c0      	blx	r8
 800b202:	3001      	adds	r0, #1
 800b204:	d0e6      	beq.n	800b1d4 <_printf_common+0xa4>
 800b206:	3601      	adds	r6, #1
 800b208:	e7d9      	b.n	800b1be <_printf_common+0x8e>
	...

0800b20c <_printf_i>:
 800b20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b210:	7e0f      	ldrb	r7, [r1, #24]
 800b212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b214:	2f78      	cmp	r7, #120	; 0x78
 800b216:	4691      	mov	r9, r2
 800b218:	4680      	mov	r8, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	469a      	mov	sl, r3
 800b21e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b222:	d807      	bhi.n	800b234 <_printf_i+0x28>
 800b224:	2f62      	cmp	r7, #98	; 0x62
 800b226:	d80a      	bhi.n	800b23e <_printf_i+0x32>
 800b228:	2f00      	cmp	r7, #0
 800b22a:	f000 80d8 	beq.w	800b3de <_printf_i+0x1d2>
 800b22e:	2f58      	cmp	r7, #88	; 0x58
 800b230:	f000 80a3 	beq.w	800b37a <_printf_i+0x16e>
 800b234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b23c:	e03a      	b.n	800b2b4 <_printf_i+0xa8>
 800b23e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b242:	2b15      	cmp	r3, #21
 800b244:	d8f6      	bhi.n	800b234 <_printf_i+0x28>
 800b246:	a101      	add	r1, pc, #4	; (adr r1, 800b24c <_printf_i+0x40>)
 800b248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	0800b2b9 	.word	0x0800b2b9
 800b254:	0800b235 	.word	0x0800b235
 800b258:	0800b235 	.word	0x0800b235
 800b25c:	0800b235 	.word	0x0800b235
 800b260:	0800b235 	.word	0x0800b235
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b235 	.word	0x0800b235
 800b26c:	0800b235 	.word	0x0800b235
 800b270:	0800b235 	.word	0x0800b235
 800b274:	0800b235 	.word	0x0800b235
 800b278:	0800b3c5 	.word	0x0800b3c5
 800b27c:	0800b2e9 	.word	0x0800b2e9
 800b280:	0800b3a7 	.word	0x0800b3a7
 800b284:	0800b235 	.word	0x0800b235
 800b288:	0800b235 	.word	0x0800b235
 800b28c:	0800b3e7 	.word	0x0800b3e7
 800b290:	0800b235 	.word	0x0800b235
 800b294:	0800b2e9 	.word	0x0800b2e9
 800b298:	0800b235 	.word	0x0800b235
 800b29c:	0800b235 	.word	0x0800b235
 800b2a0:	0800b3af 	.word	0x0800b3af
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	1d1a      	adds	r2, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	602a      	str	r2, [r5, #0]
 800b2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0a3      	b.n	800b400 <_printf_i+0x1f4>
 800b2b8:	6820      	ldr	r0, [r4, #0]
 800b2ba:	6829      	ldr	r1, [r5, #0]
 800b2bc:	0606      	lsls	r6, r0, #24
 800b2be:	f101 0304 	add.w	r3, r1, #4
 800b2c2:	d50a      	bpl.n	800b2da <_printf_i+0xce>
 800b2c4:	680e      	ldr	r6, [r1, #0]
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	2e00      	cmp	r6, #0
 800b2ca:	da03      	bge.n	800b2d4 <_printf_i+0xc8>
 800b2cc:	232d      	movs	r3, #45	; 0x2d
 800b2ce:	4276      	negs	r6, r6
 800b2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d4:	485e      	ldr	r0, [pc, #376]	; (800b450 <_printf_i+0x244>)
 800b2d6:	230a      	movs	r3, #10
 800b2d8:	e019      	b.n	800b30e <_printf_i+0x102>
 800b2da:	680e      	ldr	r6, [r1, #0]
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2e2:	bf18      	it	ne
 800b2e4:	b236      	sxthne	r6, r6
 800b2e6:	e7ef      	b.n	800b2c8 <_printf_i+0xbc>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	6820      	ldr	r0, [r4, #0]
 800b2ec:	1d19      	adds	r1, r3, #4
 800b2ee:	6029      	str	r1, [r5, #0]
 800b2f0:	0601      	lsls	r1, r0, #24
 800b2f2:	d501      	bpl.n	800b2f8 <_printf_i+0xec>
 800b2f4:	681e      	ldr	r6, [r3, #0]
 800b2f6:	e002      	b.n	800b2fe <_printf_i+0xf2>
 800b2f8:	0646      	lsls	r6, r0, #25
 800b2fa:	d5fb      	bpl.n	800b2f4 <_printf_i+0xe8>
 800b2fc:	881e      	ldrh	r6, [r3, #0]
 800b2fe:	4854      	ldr	r0, [pc, #336]	; (800b450 <_printf_i+0x244>)
 800b300:	2f6f      	cmp	r7, #111	; 0x6f
 800b302:	bf0c      	ite	eq
 800b304:	2308      	moveq	r3, #8
 800b306:	230a      	movne	r3, #10
 800b308:	2100      	movs	r1, #0
 800b30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b30e:	6865      	ldr	r5, [r4, #4]
 800b310:	60a5      	str	r5, [r4, #8]
 800b312:	2d00      	cmp	r5, #0
 800b314:	bfa2      	ittt	ge
 800b316:	6821      	ldrge	r1, [r4, #0]
 800b318:	f021 0104 	bicge.w	r1, r1, #4
 800b31c:	6021      	strge	r1, [r4, #0]
 800b31e:	b90e      	cbnz	r6, 800b324 <_printf_i+0x118>
 800b320:	2d00      	cmp	r5, #0
 800b322:	d04d      	beq.n	800b3c0 <_printf_i+0x1b4>
 800b324:	4615      	mov	r5, r2
 800b326:	fbb6 f1f3 	udiv	r1, r6, r3
 800b32a:	fb03 6711 	mls	r7, r3, r1, r6
 800b32e:	5dc7      	ldrb	r7, [r0, r7]
 800b330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b334:	4637      	mov	r7, r6
 800b336:	42bb      	cmp	r3, r7
 800b338:	460e      	mov	r6, r1
 800b33a:	d9f4      	bls.n	800b326 <_printf_i+0x11a>
 800b33c:	2b08      	cmp	r3, #8
 800b33e:	d10b      	bne.n	800b358 <_printf_i+0x14c>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	07de      	lsls	r6, r3, #31
 800b344:	d508      	bpl.n	800b358 <_printf_i+0x14c>
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	6861      	ldr	r1, [r4, #4]
 800b34a:	4299      	cmp	r1, r3
 800b34c:	bfde      	ittt	le
 800b34e:	2330      	movle	r3, #48	; 0x30
 800b350:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b354:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b358:	1b52      	subs	r2, r2, r5
 800b35a:	6122      	str	r2, [r4, #16]
 800b35c:	f8cd a000 	str.w	sl, [sp]
 800b360:	464b      	mov	r3, r9
 800b362:	aa03      	add	r2, sp, #12
 800b364:	4621      	mov	r1, r4
 800b366:	4640      	mov	r0, r8
 800b368:	f7ff fee2 	bl	800b130 <_printf_common>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d14c      	bne.n	800b40a <_printf_i+0x1fe>
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	b004      	add	sp, #16
 800b376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37a:	4835      	ldr	r0, [pc, #212]	; (800b450 <_printf_i+0x244>)
 800b37c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b380:	6829      	ldr	r1, [r5, #0]
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f851 6b04 	ldr.w	r6, [r1], #4
 800b388:	6029      	str	r1, [r5, #0]
 800b38a:	061d      	lsls	r5, r3, #24
 800b38c:	d514      	bpl.n	800b3b8 <_printf_i+0x1ac>
 800b38e:	07df      	lsls	r7, r3, #31
 800b390:	bf44      	itt	mi
 800b392:	f043 0320 	orrmi.w	r3, r3, #32
 800b396:	6023      	strmi	r3, [r4, #0]
 800b398:	b91e      	cbnz	r6, 800b3a2 <_printf_i+0x196>
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	f023 0320 	bic.w	r3, r3, #32
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	e7b0      	b.n	800b308 <_printf_i+0xfc>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	f043 0320 	orr.w	r3, r3, #32
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	2378      	movs	r3, #120	; 0x78
 800b3b0:	4828      	ldr	r0, [pc, #160]	; (800b454 <_printf_i+0x248>)
 800b3b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3b6:	e7e3      	b.n	800b380 <_printf_i+0x174>
 800b3b8:	0659      	lsls	r1, r3, #25
 800b3ba:	bf48      	it	mi
 800b3bc:	b2b6      	uxthmi	r6, r6
 800b3be:	e7e6      	b.n	800b38e <_printf_i+0x182>
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	e7bb      	b.n	800b33c <_printf_i+0x130>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	6826      	ldr	r6, [r4, #0]
 800b3c8:	6961      	ldr	r1, [r4, #20]
 800b3ca:	1d18      	adds	r0, r3, #4
 800b3cc:	6028      	str	r0, [r5, #0]
 800b3ce:	0635      	lsls	r5, r6, #24
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_i+0x1cc>
 800b3d4:	6019      	str	r1, [r3, #0]
 800b3d6:	e002      	b.n	800b3de <_printf_i+0x1d2>
 800b3d8:	0670      	lsls	r0, r6, #25
 800b3da:	d5fb      	bpl.n	800b3d4 <_printf_i+0x1c8>
 800b3dc:	8019      	strh	r1, [r3, #0]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	e7ba      	b.n	800b35c <_printf_i+0x150>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	1d1a      	adds	r2, r3, #4
 800b3ea:	602a      	str	r2, [r5, #0]
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	6862      	ldr	r2, [r4, #4]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7f4 fef4 	bl	80001e0 <memchr>
 800b3f8:	b108      	cbz	r0, 800b3fe <_printf_i+0x1f2>
 800b3fa:	1b40      	subs	r0, r0, r5
 800b3fc:	6060      	str	r0, [r4, #4]
 800b3fe:	6863      	ldr	r3, [r4, #4]
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	2300      	movs	r3, #0
 800b404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b408:	e7a8      	b.n	800b35c <_printf_i+0x150>
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d0ab      	beq.n	800b370 <_printf_i+0x164>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	079b      	lsls	r3, r3, #30
 800b41c:	d413      	bmi.n	800b446 <_printf_i+0x23a>
 800b41e:	68e0      	ldr	r0, [r4, #12]
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	4298      	cmp	r0, r3
 800b424:	bfb8      	it	lt
 800b426:	4618      	movlt	r0, r3
 800b428:	e7a4      	b.n	800b374 <_printf_i+0x168>
 800b42a:	2301      	movs	r3, #1
 800b42c:	4632      	mov	r2, r6
 800b42e:	4649      	mov	r1, r9
 800b430:	4640      	mov	r0, r8
 800b432:	47d0      	blx	sl
 800b434:	3001      	adds	r0, #1
 800b436:	d09b      	beq.n	800b370 <_printf_i+0x164>
 800b438:	3501      	adds	r5, #1
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	9903      	ldr	r1, [sp, #12]
 800b43e:	1a5b      	subs	r3, r3, r1
 800b440:	42ab      	cmp	r3, r5
 800b442:	dcf2      	bgt.n	800b42a <_printf_i+0x21e>
 800b444:	e7eb      	b.n	800b41e <_printf_i+0x212>
 800b446:	2500      	movs	r5, #0
 800b448:	f104 0619 	add.w	r6, r4, #25
 800b44c:	e7f5      	b.n	800b43a <_printf_i+0x22e>
 800b44e:	bf00      	nop
 800b450:	0800e3e2 	.word	0x0800e3e2
 800b454:	0800e3f3 	.word	0x0800e3f3

0800b458 <cleanup_glue>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	6809      	ldr	r1, [r1, #0]
 800b45e:	4605      	mov	r5, r0
 800b460:	b109      	cbz	r1, 800b466 <cleanup_glue+0xe>
 800b462:	f7ff fff9 	bl	800b458 <cleanup_glue>
 800b466:	4621      	mov	r1, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46e:	f001 bc7f 	b.w	800cd70 <_free_r>
	...

0800b474 <_reclaim_reent>:
 800b474:	4b2c      	ldr	r3, [pc, #176]	; (800b528 <_reclaim_reent+0xb4>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4283      	cmp	r3, r0
 800b47a:	b570      	push	{r4, r5, r6, lr}
 800b47c:	4604      	mov	r4, r0
 800b47e:	d051      	beq.n	800b524 <_reclaim_reent+0xb0>
 800b480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b482:	b143      	cbz	r3, 800b496 <_reclaim_reent+0x22>
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d14a      	bne.n	800b520 <_reclaim_reent+0xac>
 800b48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48c:	6819      	ldr	r1, [r3, #0]
 800b48e:	b111      	cbz	r1, 800b496 <_reclaim_reent+0x22>
 800b490:	4620      	mov	r0, r4
 800b492:	f001 fc6d 	bl	800cd70 <_free_r>
 800b496:	6961      	ldr	r1, [r4, #20]
 800b498:	b111      	cbz	r1, 800b4a0 <_reclaim_reent+0x2c>
 800b49a:	4620      	mov	r0, r4
 800b49c:	f001 fc68 	bl	800cd70 <_free_r>
 800b4a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4a2:	b111      	cbz	r1, 800b4aa <_reclaim_reent+0x36>
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f001 fc63 	bl	800cd70 <_free_r>
 800b4aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b4ac:	b111      	cbz	r1, 800b4b4 <_reclaim_reent+0x40>
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 fc5e 	bl	800cd70 <_free_r>
 800b4b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4b6:	b111      	cbz	r1, 800b4be <_reclaim_reent+0x4a>
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f001 fc59 	bl	800cd70 <_free_r>
 800b4be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b4c0:	b111      	cbz	r1, 800b4c8 <_reclaim_reent+0x54>
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f001 fc54 	bl	800cd70 <_free_r>
 800b4c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4ca:	b111      	cbz	r1, 800b4d2 <_reclaim_reent+0x5e>
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f001 fc4f 	bl	800cd70 <_free_r>
 800b4d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b4d4:	b111      	cbz	r1, 800b4dc <_reclaim_reent+0x68>
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f001 fc4a 	bl	800cd70 <_free_r>
 800b4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4de:	b111      	cbz	r1, 800b4e6 <_reclaim_reent+0x72>
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f001 fc45 	bl	800cd70 <_free_r>
 800b4e6:	69a3      	ldr	r3, [r4, #24]
 800b4e8:	b1e3      	cbz	r3, 800b524 <_reclaim_reent+0xb0>
 800b4ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4798      	blx	r3
 800b4f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b4f2:	b1b9      	cbz	r1, 800b524 <_reclaim_reent+0xb0>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4fa:	f7ff bfad 	b.w	800b458 <cleanup_glue>
 800b4fe:	5949      	ldr	r1, [r1, r5]
 800b500:	b941      	cbnz	r1, 800b514 <_reclaim_reent+0xa0>
 800b502:	3504      	adds	r5, #4
 800b504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b506:	2d80      	cmp	r5, #128	; 0x80
 800b508:	68d9      	ldr	r1, [r3, #12]
 800b50a:	d1f8      	bne.n	800b4fe <_reclaim_reent+0x8a>
 800b50c:	4620      	mov	r0, r4
 800b50e:	f001 fc2f 	bl	800cd70 <_free_r>
 800b512:	e7ba      	b.n	800b48a <_reclaim_reent+0x16>
 800b514:	680e      	ldr	r6, [r1, #0]
 800b516:	4620      	mov	r0, r4
 800b518:	f001 fc2a 	bl	800cd70 <_free_r>
 800b51c:	4631      	mov	r1, r6
 800b51e:	e7ef      	b.n	800b500 <_reclaim_reent+0x8c>
 800b520:	2500      	movs	r5, #0
 800b522:	e7ef      	b.n	800b504 <_reclaim_reent+0x90>
 800b524:	bd70      	pop	{r4, r5, r6, pc}
 800b526:	bf00      	nop
 800b528:	20000034 	.word	0x20000034

0800b52c <_sbrk_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d06      	ldr	r5, [pc, #24]	; (800b548 <_sbrk_r+0x1c>)
 800b530:	2300      	movs	r3, #0
 800b532:	4604      	mov	r4, r0
 800b534:	4608      	mov	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7f7 fce8 	bl	8002f0c <_sbrk>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_sbrk_r+0x1a>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_sbrk_r+0x1a>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	200053e4 	.word	0x200053e4

0800b54c <siprintf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b500      	push	{lr}
 800b550:	b09c      	sub	sp, #112	; 0x70
 800b552:	ab1d      	add	r3, sp, #116	; 0x74
 800b554:	9002      	str	r0, [sp, #8]
 800b556:	9006      	str	r0, [sp, #24]
 800b558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b55c:	4809      	ldr	r0, [pc, #36]	; (800b584 <siprintf+0x38>)
 800b55e:	9107      	str	r1, [sp, #28]
 800b560:	9104      	str	r1, [sp, #16]
 800b562:	4909      	ldr	r1, [pc, #36]	; (800b588 <siprintf+0x3c>)
 800b564:	f853 2b04 	ldr.w	r2, [r3], #4
 800b568:	9105      	str	r1, [sp, #20]
 800b56a:	6800      	ldr	r0, [r0, #0]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	a902      	add	r1, sp, #8
 800b570:	f001 fca6 	bl	800cec0 <_svfiprintf_r>
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	b01c      	add	sp, #112	; 0x70
 800b57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b580:	b003      	add	sp, #12
 800b582:	4770      	bx	lr
 800b584:	20000034 	.word	0x20000034
 800b588:	ffff0208 	.word	0xffff0208

0800b58c <__sread>:
 800b58c:	b510      	push	{r4, lr}
 800b58e:	460c      	mov	r4, r1
 800b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b594:	f001 fd94 	bl	800d0c0 <_read_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	bfab      	itete	ge
 800b59c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59e:	89a3      	ldrhlt	r3, [r4, #12]
 800b5a0:	181b      	addge	r3, r3, r0
 800b5a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a6:	bfac      	ite	ge
 800b5a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5aa:	81a3      	strhlt	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__swrite>:
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	05db      	lsls	r3, r3, #23
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4616      	mov	r6, r2
 800b5be:	d505      	bpl.n	800b5cc <__swrite+0x1e>
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f001 f812 	bl	800c5f0 <_lseek_r>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	f000 b8a3 	b.w	800b72c <_write_r>

0800b5e6 <__sseek>:
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 ffff 	bl	800c5f0 <_lseek_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	bf15      	itete	ne
 800b5f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strheq	r3, [r4, #12]
 800b604:	bf18      	it	ne
 800b606:	81a3      	strhne	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__sclose>:
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 b89f 	b.w	800b750 <_close_r>
	...

0800b614 <_strtol_l.constprop.0>:
 800b614:	2b01      	cmp	r3, #1
 800b616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61a:	d001      	beq.n	800b620 <_strtol_l.constprop.0+0xc>
 800b61c:	2b24      	cmp	r3, #36	; 0x24
 800b61e:	d906      	bls.n	800b62e <_strtol_l.constprop.0+0x1a>
 800b620:	f7ff f8e2 	bl	800a7e8 <__errno>
 800b624:	2316      	movs	r3, #22
 800b626:	6003      	str	r3, [r0, #0]
 800b628:	2000      	movs	r0, #0
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b714 <_strtol_l.constprop.0+0x100>
 800b632:	460d      	mov	r5, r1
 800b634:	462e      	mov	r6, r5
 800b636:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b63a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b63e:	f017 0708 	ands.w	r7, r7, #8
 800b642:	d1f7      	bne.n	800b634 <_strtol_l.constprop.0+0x20>
 800b644:	2c2d      	cmp	r4, #45	; 0x2d
 800b646:	d132      	bne.n	800b6ae <_strtol_l.constprop.0+0x9a>
 800b648:	782c      	ldrb	r4, [r5, #0]
 800b64a:	2701      	movs	r7, #1
 800b64c:	1cb5      	adds	r5, r6, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d05b      	beq.n	800b70a <_strtol_l.constprop.0+0xf6>
 800b652:	2b10      	cmp	r3, #16
 800b654:	d109      	bne.n	800b66a <_strtol_l.constprop.0+0x56>
 800b656:	2c30      	cmp	r4, #48	; 0x30
 800b658:	d107      	bne.n	800b66a <_strtol_l.constprop.0+0x56>
 800b65a:	782c      	ldrb	r4, [r5, #0]
 800b65c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b660:	2c58      	cmp	r4, #88	; 0x58
 800b662:	d14d      	bne.n	800b700 <_strtol_l.constprop.0+0xec>
 800b664:	786c      	ldrb	r4, [r5, #1]
 800b666:	2310      	movs	r3, #16
 800b668:	3502      	adds	r5, #2
 800b66a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b66e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b672:	f04f 0c00 	mov.w	ip, #0
 800b676:	fbb8 f9f3 	udiv	r9, r8, r3
 800b67a:	4666      	mov	r6, ip
 800b67c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b680:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b684:	f1be 0f09 	cmp.w	lr, #9
 800b688:	d816      	bhi.n	800b6b8 <_strtol_l.constprop.0+0xa4>
 800b68a:	4674      	mov	r4, lr
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	dd24      	ble.n	800b6da <_strtol_l.constprop.0+0xc6>
 800b690:	f1bc 0f00 	cmp.w	ip, #0
 800b694:	db1e      	blt.n	800b6d4 <_strtol_l.constprop.0+0xc0>
 800b696:	45b1      	cmp	r9, r6
 800b698:	d31c      	bcc.n	800b6d4 <_strtol_l.constprop.0+0xc0>
 800b69a:	d101      	bne.n	800b6a0 <_strtol_l.constprop.0+0x8c>
 800b69c:	45a2      	cmp	sl, r4
 800b69e:	db19      	blt.n	800b6d4 <_strtol_l.constprop.0+0xc0>
 800b6a0:	fb06 4603 	mla	r6, r6, r3, r4
 800b6a4:	f04f 0c01 	mov.w	ip, #1
 800b6a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6ac:	e7e8      	b.n	800b680 <_strtol_l.constprop.0+0x6c>
 800b6ae:	2c2b      	cmp	r4, #43	; 0x2b
 800b6b0:	bf04      	itt	eq
 800b6b2:	782c      	ldrbeq	r4, [r5, #0]
 800b6b4:	1cb5      	addeq	r5, r6, #2
 800b6b6:	e7ca      	b.n	800b64e <_strtol_l.constprop.0+0x3a>
 800b6b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b6bc:	f1be 0f19 	cmp.w	lr, #25
 800b6c0:	d801      	bhi.n	800b6c6 <_strtol_l.constprop.0+0xb2>
 800b6c2:	3c37      	subs	r4, #55	; 0x37
 800b6c4:	e7e2      	b.n	800b68c <_strtol_l.constprop.0+0x78>
 800b6c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b6ca:	f1be 0f19 	cmp.w	lr, #25
 800b6ce:	d804      	bhi.n	800b6da <_strtol_l.constprop.0+0xc6>
 800b6d0:	3c57      	subs	r4, #87	; 0x57
 800b6d2:	e7db      	b.n	800b68c <_strtol_l.constprop.0+0x78>
 800b6d4:	f04f 3cff 	mov.w	ip, #4294967295
 800b6d8:	e7e6      	b.n	800b6a8 <_strtol_l.constprop.0+0x94>
 800b6da:	f1bc 0f00 	cmp.w	ip, #0
 800b6de:	da05      	bge.n	800b6ec <_strtol_l.constprop.0+0xd8>
 800b6e0:	2322      	movs	r3, #34	; 0x22
 800b6e2:	6003      	str	r3, [r0, #0]
 800b6e4:	4646      	mov	r6, r8
 800b6e6:	b942      	cbnz	r2, 800b6fa <_strtol_l.constprop.0+0xe6>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	e79e      	b.n	800b62a <_strtol_l.constprop.0+0x16>
 800b6ec:	b107      	cbz	r7, 800b6f0 <_strtol_l.constprop.0+0xdc>
 800b6ee:	4276      	negs	r6, r6
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	d0f9      	beq.n	800b6e8 <_strtol_l.constprop.0+0xd4>
 800b6f4:	f1bc 0f00 	cmp.w	ip, #0
 800b6f8:	d000      	beq.n	800b6fc <_strtol_l.constprop.0+0xe8>
 800b6fa:	1e69      	subs	r1, r5, #1
 800b6fc:	6011      	str	r1, [r2, #0]
 800b6fe:	e7f3      	b.n	800b6e8 <_strtol_l.constprop.0+0xd4>
 800b700:	2430      	movs	r4, #48	; 0x30
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1b1      	bne.n	800b66a <_strtol_l.constprop.0+0x56>
 800b706:	2308      	movs	r3, #8
 800b708:	e7af      	b.n	800b66a <_strtol_l.constprop.0+0x56>
 800b70a:	2c30      	cmp	r4, #48	; 0x30
 800b70c:	d0a5      	beq.n	800b65a <_strtol_l.constprop.0+0x46>
 800b70e:	230a      	movs	r3, #10
 800b710:	e7ab      	b.n	800b66a <_strtol_l.constprop.0+0x56>
 800b712:	bf00      	nop
 800b714:	0800e405 	.word	0x0800e405

0800b718 <strtol>:
 800b718:	4613      	mov	r3, r2
 800b71a:	460a      	mov	r2, r1
 800b71c:	4601      	mov	r1, r0
 800b71e:	4802      	ldr	r0, [pc, #8]	; (800b728 <strtol+0x10>)
 800b720:	6800      	ldr	r0, [r0, #0]
 800b722:	f7ff bf77 	b.w	800b614 <_strtol_l.constprop.0>
 800b726:	bf00      	nop
 800b728:	20000034 	.word	0x20000034

0800b72c <_write_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_write_r+0x20>)
 800b730:	4604      	mov	r4, r0
 800b732:	4608      	mov	r0, r1
 800b734:	4611      	mov	r1, r2
 800b736:	2200      	movs	r2, #0
 800b738:	602a      	str	r2, [r5, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	f7f7 fb95 	bl	8002e6a <_write>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_write_r+0x1e>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_write_r+0x1e>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	200053e4 	.word	0x200053e4

0800b750 <_close_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_close_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f7 fba1 	bl	8002ea2 <_close>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_close_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_close_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	200053e4 	.word	0x200053e4

0800b770 <quorem>:
 800b770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	6903      	ldr	r3, [r0, #16]
 800b776:	690c      	ldr	r4, [r1, #16]
 800b778:	42a3      	cmp	r3, r4
 800b77a:	4607      	mov	r7, r0
 800b77c:	f2c0 8081 	blt.w	800b882 <quorem+0x112>
 800b780:	3c01      	subs	r4, #1
 800b782:	f101 0814 	add.w	r8, r1, #20
 800b786:	f100 0514 	add.w	r5, r0, #20
 800b78a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b798:	3301      	adds	r3, #1
 800b79a:	429a      	cmp	r2, r3
 800b79c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7a8:	d331      	bcc.n	800b80e <quorem+0x9e>
 800b7aa:	f04f 0e00 	mov.w	lr, #0
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	46ac      	mov	ip, r5
 800b7b2:	46f2      	mov	sl, lr
 800b7b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7b8:	b293      	uxth	r3, r2
 800b7ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b7be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b7c8:	f8dc a000 	ldr.w	sl, [ip]
 800b7cc:	0c12      	lsrs	r2, r2, #16
 800b7ce:	fa13 f38a 	uxtah	r3, r3, sl
 800b7d2:	fb06 e202 	mla	r2, r6, r2, lr
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	9b00      	ldr	r3, [sp, #0]
 800b7da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7de:	b292      	uxth	r2, r2
 800b7e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7ec:	4581      	cmp	r9, r0
 800b7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b7f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7fa:	d2db      	bcs.n	800b7b4 <quorem+0x44>
 800b7fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b800:	b92b      	cbnz	r3, 800b80e <quorem+0x9e>
 800b802:	9b01      	ldr	r3, [sp, #4]
 800b804:	3b04      	subs	r3, #4
 800b806:	429d      	cmp	r5, r3
 800b808:	461a      	mov	r2, r3
 800b80a:	d32e      	bcc.n	800b86a <quorem+0xfa>
 800b80c:	613c      	str	r4, [r7, #16]
 800b80e:	4638      	mov	r0, r7
 800b810:	f001 f996 	bl	800cb40 <__mcmp>
 800b814:	2800      	cmp	r0, #0
 800b816:	db24      	blt.n	800b862 <quorem+0xf2>
 800b818:	3601      	adds	r6, #1
 800b81a:	4628      	mov	r0, r5
 800b81c:	f04f 0c00 	mov.w	ip, #0
 800b820:	f858 2b04 	ldr.w	r2, [r8], #4
 800b824:	f8d0 e000 	ldr.w	lr, [r0]
 800b828:	b293      	uxth	r3, r2
 800b82a:	ebac 0303 	sub.w	r3, ip, r3
 800b82e:	0c12      	lsrs	r2, r2, #16
 800b830:	fa13 f38e 	uxtah	r3, r3, lr
 800b834:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b842:	45c1      	cmp	r9, r8
 800b844:	f840 3b04 	str.w	r3, [r0], #4
 800b848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b84c:	d2e8      	bcs.n	800b820 <quorem+0xb0>
 800b84e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b856:	b922      	cbnz	r2, 800b862 <quorem+0xf2>
 800b858:	3b04      	subs	r3, #4
 800b85a:	429d      	cmp	r5, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	d30a      	bcc.n	800b876 <quorem+0x106>
 800b860:	613c      	str	r4, [r7, #16]
 800b862:	4630      	mov	r0, r6
 800b864:	b003      	add	sp, #12
 800b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86a:	6812      	ldr	r2, [r2, #0]
 800b86c:	3b04      	subs	r3, #4
 800b86e:	2a00      	cmp	r2, #0
 800b870:	d1cc      	bne.n	800b80c <quorem+0x9c>
 800b872:	3c01      	subs	r4, #1
 800b874:	e7c7      	b.n	800b806 <quorem+0x96>
 800b876:	6812      	ldr	r2, [r2, #0]
 800b878:	3b04      	subs	r3, #4
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	d1f0      	bne.n	800b860 <quorem+0xf0>
 800b87e:	3c01      	subs	r4, #1
 800b880:	e7eb      	b.n	800b85a <quorem+0xea>
 800b882:	2000      	movs	r0, #0
 800b884:	e7ee      	b.n	800b864 <quorem+0xf4>
	...

0800b888 <_dtoa_r>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	ed2d 8b04 	vpush	{d8-d9}
 800b890:	ec57 6b10 	vmov	r6, r7, d0
 800b894:	b093      	sub	sp, #76	; 0x4c
 800b896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b898:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b89c:	9106      	str	r1, [sp, #24]
 800b89e:	ee10 aa10 	vmov	sl, s0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b8a8:	46bb      	mov	fp, r7
 800b8aa:	b975      	cbnz	r5, 800b8ca <_dtoa_r+0x42>
 800b8ac:	2010      	movs	r0, #16
 800b8ae:	f000 feb1 	bl	800c614 <malloc>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	6260      	str	r0, [r4, #36]	; 0x24
 800b8b6:	b920      	cbnz	r0, 800b8c2 <_dtoa_r+0x3a>
 800b8b8:	4ba7      	ldr	r3, [pc, #668]	; (800bb58 <_dtoa_r+0x2d0>)
 800b8ba:	21ea      	movs	r1, #234	; 0xea
 800b8bc:	48a7      	ldr	r0, [pc, #668]	; (800bb5c <_dtoa_r+0x2d4>)
 800b8be:	f001 fc11 	bl	800d0e4 <__assert_func>
 800b8c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8c6:	6005      	str	r5, [r0, #0]
 800b8c8:	60c5      	str	r5, [r0, #12]
 800b8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8cc:	6819      	ldr	r1, [r3, #0]
 800b8ce:	b151      	cbz	r1, 800b8e6 <_dtoa_r+0x5e>
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	604a      	str	r2, [r1, #4]
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	4093      	lsls	r3, r2
 800b8d8:	608b      	str	r3, [r1, #8]
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 feee 	bl	800c6bc <_Bfree>
 800b8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	1e3b      	subs	r3, r7, #0
 800b8e8:	bfaa      	itet	ge
 800b8ea:	2300      	movge	r3, #0
 800b8ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8f0:	f8c8 3000 	strge.w	r3, [r8]
 800b8f4:	4b9a      	ldr	r3, [pc, #616]	; (800bb60 <_dtoa_r+0x2d8>)
 800b8f6:	bfbc      	itt	lt
 800b8f8:	2201      	movlt	r2, #1
 800b8fa:	f8c8 2000 	strlt.w	r2, [r8]
 800b8fe:	ea33 030b 	bics.w	r3, r3, fp
 800b902:	d11b      	bne.n	800b93c <_dtoa_r+0xb4>
 800b904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b906:	f242 730f 	movw	r3, #9999	; 0x270f
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b910:	4333      	orrs	r3, r6
 800b912:	f000 8592 	beq.w	800c43a <_dtoa_r+0xbb2>
 800b916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b918:	b963      	cbnz	r3, 800b934 <_dtoa_r+0xac>
 800b91a:	4b92      	ldr	r3, [pc, #584]	; (800bb64 <_dtoa_r+0x2dc>)
 800b91c:	e022      	b.n	800b964 <_dtoa_r+0xdc>
 800b91e:	4b92      	ldr	r3, [pc, #584]	; (800bb68 <_dtoa_r+0x2e0>)
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	3308      	adds	r3, #8
 800b924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	9801      	ldr	r0, [sp, #4]
 800b92a:	b013      	add	sp, #76	; 0x4c
 800b92c:	ecbd 8b04 	vpop	{d8-d9}
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	4b8b      	ldr	r3, [pc, #556]	; (800bb64 <_dtoa_r+0x2dc>)
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	3303      	adds	r3, #3
 800b93a:	e7f3      	b.n	800b924 <_dtoa_r+0x9c>
 800b93c:	2200      	movs	r2, #0
 800b93e:	2300      	movs	r3, #0
 800b940:	4650      	mov	r0, sl
 800b942:	4659      	mov	r1, fp
 800b944:	f7f5 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b948:	ec4b ab19 	vmov	d9, sl, fp
 800b94c:	4680      	mov	r8, r0
 800b94e:	b158      	cbz	r0, 800b968 <_dtoa_r+0xe0>
 800b950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b952:	2301      	movs	r3, #1
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 856b 	beq.w	800c434 <_dtoa_r+0xbac>
 800b95e:	4883      	ldr	r0, [pc, #524]	; (800bb6c <_dtoa_r+0x2e4>)
 800b960:	6018      	str	r0, [r3, #0]
 800b962:	1e43      	subs	r3, r0, #1
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	e7df      	b.n	800b928 <_dtoa_r+0xa0>
 800b968:	ec4b ab10 	vmov	d0, sl, fp
 800b96c:	aa10      	add	r2, sp, #64	; 0x40
 800b96e:	a911      	add	r1, sp, #68	; 0x44
 800b970:	4620      	mov	r0, r4
 800b972:	f001 f98b 	bl	800cc8c <__d2b>
 800b976:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b97a:	ee08 0a10 	vmov	s16, r0
 800b97e:	2d00      	cmp	r5, #0
 800b980:	f000 8084 	beq.w	800ba8c <_dtoa_r+0x204>
 800b984:	ee19 3a90 	vmov	r3, s19
 800b988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b98c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b990:	4656      	mov	r6, sl
 800b992:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b99a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b99e:	4b74      	ldr	r3, [pc, #464]	; (800bb70 <_dtoa_r+0x2e8>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	f7f4 fc6f 	bl	8000288 <__aeabi_dsub>
 800b9aa:	a365      	add	r3, pc, #404	; (adr r3, 800bb40 <_dtoa_r+0x2b8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	a364      	add	r3, pc, #400	; (adr r3, 800bb48 <_dtoa_r+0x2c0>)
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	f7f4 fc67 	bl	800028c <__adddf3>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	460f      	mov	r7, r1
 800b9c4:	f7f4 fdae 	bl	8000524 <__aeabi_i2d>
 800b9c8:	a361      	add	r3, pc, #388	; (adr r3, 800bb50 <_dtoa_r+0x2c8>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fe13 	bl	80005f8 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f4 fc57 	bl	800028c <__adddf3>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	f7f5 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	9000      	str	r0, [sp, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	f7f5 f874 	bl	8000adc <__aeabi_dcmplt>
 800b9f4:	b150      	cbz	r0, 800ba0c <_dtoa_r+0x184>
 800b9f6:	9800      	ldr	r0, [sp, #0]
 800b9f8:	f7f4 fd94 	bl	8000524 <__aeabi_i2d>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	f7f5 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba04:	b910      	cbnz	r0, 800ba0c <_dtoa_r+0x184>
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	d85a      	bhi.n	800bac8 <_dtoa_r+0x240>
 800ba12:	9a00      	ldr	r2, [sp, #0]
 800ba14:	4b57      	ldr	r3, [pc, #348]	; (800bb74 <_dtoa_r+0x2ec>)
 800ba16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	ec51 0b19 	vmov	r0, r1, d9
 800ba22:	f7f5 f85b 	bl	8000adc <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d050      	beq.n	800bacc <_dtoa_r+0x244>
 800ba2a:	9b00      	ldr	r3, [sp, #0]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2300      	movs	r3, #0
 800ba32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba36:	1b5d      	subs	r5, r3, r5
 800ba38:	1e6b      	subs	r3, r5, #1
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	bf45      	ittet	mi
 800ba3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba42:	9304      	strmi	r3, [sp, #16]
 800ba44:	2300      	movpl	r3, #0
 800ba46:	2300      	movmi	r3, #0
 800ba48:	bf4c      	ite	mi
 800ba4a:	9305      	strmi	r3, [sp, #20]
 800ba4c:	9304      	strpl	r3, [sp, #16]
 800ba4e:	9b00      	ldr	r3, [sp, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	db3d      	blt.n	800bad0 <_dtoa_r+0x248>
 800ba54:	9b05      	ldr	r3, [sp, #20]
 800ba56:	9a00      	ldr	r2, [sp, #0]
 800ba58:	920a      	str	r2, [sp, #40]	; 0x28
 800ba5a:	4413      	add	r3, r2
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9307      	str	r3, [sp, #28]
 800ba62:	9b06      	ldr	r3, [sp, #24]
 800ba64:	2b09      	cmp	r3, #9
 800ba66:	f200 8089 	bhi.w	800bb7c <_dtoa_r+0x2f4>
 800ba6a:	2b05      	cmp	r3, #5
 800ba6c:	bfc4      	itt	gt
 800ba6e:	3b04      	subgt	r3, #4
 800ba70:	9306      	strgt	r3, [sp, #24]
 800ba72:	9b06      	ldr	r3, [sp, #24]
 800ba74:	f1a3 0302 	sub.w	r3, r3, #2
 800ba78:	bfcc      	ite	gt
 800ba7a:	2500      	movgt	r5, #0
 800ba7c:	2501      	movle	r5, #1
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	f200 8087 	bhi.w	800bb92 <_dtoa_r+0x30a>
 800ba84:	e8df f003 	tbb	[pc, r3]
 800ba88:	59383a2d 	.word	0x59383a2d
 800ba8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba90:	441d      	add	r5, r3
 800ba92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	bfc1      	itttt	gt
 800ba9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800baa2:	fa0b f303 	lslgt.w	r3, fp, r3
 800baa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800baaa:	bfda      	itte	le
 800baac:	f1c3 0320 	rsble	r3, r3, #32
 800bab0:	fa06 f003 	lslle.w	r0, r6, r3
 800bab4:	4318      	orrgt	r0, r3
 800bab6:	f7f4 fd25 	bl	8000504 <__aeabi_ui2d>
 800baba:	2301      	movs	r3, #1
 800babc:	4606      	mov	r6, r0
 800babe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bac2:	3d01      	subs	r5, #1
 800bac4:	930e      	str	r3, [sp, #56]	; 0x38
 800bac6:	e76a      	b.n	800b99e <_dtoa_r+0x116>
 800bac8:	2301      	movs	r3, #1
 800baca:	e7b2      	b.n	800ba32 <_dtoa_r+0x1aa>
 800bacc:	900b      	str	r0, [sp, #44]	; 0x2c
 800bace:	e7b1      	b.n	800ba34 <_dtoa_r+0x1ac>
 800bad0:	9b04      	ldr	r3, [sp, #16]
 800bad2:	9a00      	ldr	r2, [sp, #0]
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	4253      	negs	r3, r2
 800bada:	9307      	str	r3, [sp, #28]
 800badc:	2300      	movs	r3, #0
 800bade:	930a      	str	r3, [sp, #40]	; 0x28
 800bae0:	e7bf      	b.n	800ba62 <_dtoa_r+0x1da>
 800bae2:	2300      	movs	r3, #0
 800bae4:	9308      	str	r3, [sp, #32]
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dc55      	bgt.n	800bb98 <_dtoa_r+0x310>
 800baec:	2301      	movs	r3, #1
 800baee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baf2:	461a      	mov	r2, r3
 800baf4:	9209      	str	r2, [sp, #36]	; 0x24
 800baf6:	e00c      	b.n	800bb12 <_dtoa_r+0x28a>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e7f3      	b.n	800bae4 <_dtoa_r+0x25c>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb00:	9308      	str	r3, [sp, #32]
 800bb02:	9b00      	ldr	r3, [sp, #0]
 800bb04:	4413      	add	r3, r2
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	9303      	str	r3, [sp, #12]
 800bb0e:	bfb8      	it	lt
 800bb10:	2301      	movlt	r3, #1
 800bb12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb14:	2200      	movs	r2, #0
 800bb16:	6042      	str	r2, [r0, #4]
 800bb18:	2204      	movs	r2, #4
 800bb1a:	f102 0614 	add.w	r6, r2, #20
 800bb1e:	429e      	cmp	r6, r3
 800bb20:	6841      	ldr	r1, [r0, #4]
 800bb22:	d93d      	bls.n	800bba0 <_dtoa_r+0x318>
 800bb24:	4620      	mov	r0, r4
 800bb26:	f000 fd89 	bl	800c63c <_Balloc>
 800bb2a:	9001      	str	r0, [sp, #4]
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d13b      	bne.n	800bba8 <_dtoa_r+0x320>
 800bb30:	4b11      	ldr	r3, [pc, #68]	; (800bb78 <_dtoa_r+0x2f0>)
 800bb32:	4602      	mov	r2, r0
 800bb34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb38:	e6c0      	b.n	800b8bc <_dtoa_r+0x34>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e7df      	b.n	800bafe <_dtoa_r+0x276>
 800bb3e:	bf00      	nop
 800bb40:	636f4361 	.word	0x636f4361
 800bb44:	3fd287a7 	.word	0x3fd287a7
 800bb48:	8b60c8b3 	.word	0x8b60c8b3
 800bb4c:	3fc68a28 	.word	0x3fc68a28
 800bb50:	509f79fb 	.word	0x509f79fb
 800bb54:	3fd34413 	.word	0x3fd34413
 800bb58:	0800e512 	.word	0x0800e512
 800bb5c:	0800e529 	.word	0x0800e529
 800bb60:	7ff00000 	.word	0x7ff00000
 800bb64:	0800e50e 	.word	0x0800e50e
 800bb68:	0800e505 	.word	0x0800e505
 800bb6c:	0800e3e1 	.word	0x0800e3e1
 800bb70:	3ff80000 	.word	0x3ff80000
 800bb74:	0800e620 	.word	0x0800e620
 800bb78:	0800e584 	.word	0x0800e584
 800bb7c:	2501      	movs	r5, #1
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9306      	str	r3, [sp, #24]
 800bb82:	9508      	str	r5, [sp, #32]
 800bb84:	f04f 33ff 	mov.w	r3, #4294967295
 800bb88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2312      	movs	r3, #18
 800bb90:	e7b0      	b.n	800baf4 <_dtoa_r+0x26c>
 800bb92:	2301      	movs	r3, #1
 800bb94:	9308      	str	r3, [sp, #32]
 800bb96:	e7f5      	b.n	800bb84 <_dtoa_r+0x2fc>
 800bb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb9e:	e7b8      	b.n	800bb12 <_dtoa_r+0x28a>
 800bba0:	3101      	adds	r1, #1
 800bba2:	6041      	str	r1, [r0, #4]
 800bba4:	0052      	lsls	r2, r2, #1
 800bba6:	e7b8      	b.n	800bb1a <_dtoa_r+0x292>
 800bba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbaa:	9a01      	ldr	r2, [sp, #4]
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	2b0e      	cmp	r3, #14
 800bbb2:	f200 809d 	bhi.w	800bcf0 <_dtoa_r+0x468>
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	f000 809a 	beq.w	800bcf0 <_dtoa_r+0x468>
 800bbbc:	9b00      	ldr	r3, [sp, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dd32      	ble.n	800bc28 <_dtoa_r+0x3a0>
 800bbc2:	4ab7      	ldr	r2, [pc, #732]	; (800bea0 <_dtoa_r+0x618>)
 800bbc4:	f003 030f 	and.w	r3, r3, #15
 800bbc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	05d8      	lsls	r0, r3, #23
 800bbd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bbd8:	d516      	bpl.n	800bc08 <_dtoa_r+0x380>
 800bbda:	4bb2      	ldr	r3, [pc, #712]	; (800bea4 <_dtoa_r+0x61c>)
 800bbdc:	ec51 0b19 	vmov	r0, r1, d9
 800bbe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbe4:	f7f4 fe32 	bl	800084c <__aeabi_ddiv>
 800bbe8:	f007 070f 	and.w	r7, r7, #15
 800bbec:	4682      	mov	sl, r0
 800bbee:	468b      	mov	fp, r1
 800bbf0:	2503      	movs	r5, #3
 800bbf2:	4eac      	ldr	r6, [pc, #688]	; (800bea4 <_dtoa_r+0x61c>)
 800bbf4:	b957      	cbnz	r7, 800bc0c <_dtoa_r+0x384>
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	f7f4 fe25 	bl	800084c <__aeabi_ddiv>
 800bc02:	4682      	mov	sl, r0
 800bc04:	468b      	mov	fp, r1
 800bc06:	e028      	b.n	800bc5a <_dtoa_r+0x3d2>
 800bc08:	2502      	movs	r5, #2
 800bc0a:	e7f2      	b.n	800bbf2 <_dtoa_r+0x36a>
 800bc0c:	07f9      	lsls	r1, r7, #31
 800bc0e:	d508      	bpl.n	800bc22 <_dtoa_r+0x39a>
 800bc10:	4640      	mov	r0, r8
 800bc12:	4649      	mov	r1, r9
 800bc14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc18:	f7f4 fcee 	bl	80005f8 <__aeabi_dmul>
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4689      	mov	r9, r1
 800bc22:	107f      	asrs	r7, r7, #1
 800bc24:	3608      	adds	r6, #8
 800bc26:	e7e5      	b.n	800bbf4 <_dtoa_r+0x36c>
 800bc28:	f000 809b 	beq.w	800bd62 <_dtoa_r+0x4da>
 800bc2c:	9b00      	ldr	r3, [sp, #0]
 800bc2e:	4f9d      	ldr	r7, [pc, #628]	; (800bea4 <_dtoa_r+0x61c>)
 800bc30:	425e      	negs	r6, r3
 800bc32:	4b9b      	ldr	r3, [pc, #620]	; (800bea0 <_dtoa_r+0x618>)
 800bc34:	f006 020f 	and.w	r2, r6, #15
 800bc38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	ec51 0b19 	vmov	r0, r1, d9
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	1136      	asrs	r6, r6, #4
 800bc4a:	4682      	mov	sl, r0
 800bc4c:	468b      	mov	fp, r1
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2502      	movs	r5, #2
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	d17a      	bne.n	800bd4c <_dtoa_r+0x4c4>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1d3      	bne.n	800bc02 <_dtoa_r+0x37a>
 800bc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 8082 	beq.w	800bd66 <_dtoa_r+0x4de>
 800bc62:	4b91      	ldr	r3, [pc, #580]	; (800bea8 <_dtoa_r+0x620>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	4650      	mov	r0, sl
 800bc68:	4659      	mov	r1, fp
 800bc6a:	f7f4 ff37 	bl	8000adc <__aeabi_dcmplt>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d079      	beq.n	800bd66 <_dtoa_r+0x4de>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d076      	beq.n	800bd66 <_dtoa_r+0x4de>
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dd36      	ble.n	800bcec <_dtoa_r+0x464>
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	4650      	mov	r0, sl
 800bc82:	4659      	mov	r1, fp
 800bc84:	1e5f      	subs	r7, r3, #1
 800bc86:	2200      	movs	r2, #0
 800bc88:	4b88      	ldr	r3, [pc, #544]	; (800beac <_dtoa_r+0x624>)
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	9e02      	ldr	r6, [sp, #8]
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	3501      	adds	r5, #1
 800bc96:	4628      	mov	r0, r5
 800bc98:	f7f4 fc44 	bl	8000524 <__aeabi_i2d>
 800bc9c:	4652      	mov	r2, sl
 800bc9e:	465b      	mov	r3, fp
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	4b82      	ldr	r3, [pc, #520]	; (800beb0 <_dtoa_r+0x628>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	f7f4 faf0 	bl	800028c <__adddf3>
 800bcac:	46d0      	mov	r8, sl
 800bcae:	46d9      	mov	r9, fp
 800bcb0:	4682      	mov	sl, r0
 800bcb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bcb6:	2e00      	cmp	r6, #0
 800bcb8:	d158      	bne.n	800bd6c <_dtoa_r+0x4e4>
 800bcba:	4b7e      	ldr	r3, [pc, #504]	; (800beb4 <_dtoa_r+0x62c>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	f7f4 fae1 	bl	8000288 <__aeabi_dsub>
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	465b      	mov	r3, fp
 800bcca:	4680      	mov	r8, r0
 800bccc:	4689      	mov	r9, r1
 800bcce:	f7f4 ff23 	bl	8000b18 <__aeabi_dcmpgt>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	f040 8295 	bne.w	800c202 <_dtoa_r+0x97a>
 800bcd8:	4652      	mov	r2, sl
 800bcda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fefb 	bl	8000adc <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f040 8289 	bne.w	800c1fe <_dtoa_r+0x976>
 800bcec:	ec5b ab19 	vmov	sl, fp, d9
 800bcf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f2c0 8148 	blt.w	800bf88 <_dtoa_r+0x700>
 800bcf8:	9a00      	ldr	r2, [sp, #0]
 800bcfa:	2a0e      	cmp	r2, #14
 800bcfc:	f300 8144 	bgt.w	800bf88 <_dtoa_r+0x700>
 800bd00:	4b67      	ldr	r3, [pc, #412]	; (800bea0 <_dtoa_r+0x618>)
 800bd02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f280 80d5 	bge.w	800bebc <_dtoa_r+0x634>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f300 80d1 	bgt.w	800bebc <_dtoa_r+0x634>
 800bd1a:	f040 826f 	bne.w	800c1fc <_dtoa_r+0x974>
 800bd1e:	4b65      	ldr	r3, [pc, #404]	; (800beb4 <_dtoa_r+0x62c>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	f7f4 fee9 	bl	8000b04 <__aeabi_dcmpge>
 800bd32:	9e03      	ldr	r6, [sp, #12]
 800bd34:	4637      	mov	r7, r6
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f040 8245 	bne.w	800c1c6 <_dtoa_r+0x93e>
 800bd3c:	9d01      	ldr	r5, [sp, #4]
 800bd3e:	2331      	movs	r3, #49	; 0x31
 800bd40:	f805 3b01 	strb.w	r3, [r5], #1
 800bd44:	9b00      	ldr	r3, [sp, #0]
 800bd46:	3301      	adds	r3, #1
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	e240      	b.n	800c1ce <_dtoa_r+0x946>
 800bd4c:	07f2      	lsls	r2, r6, #31
 800bd4e:	d505      	bpl.n	800bd5c <_dtoa_r+0x4d4>
 800bd50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	3501      	adds	r5, #1
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	1076      	asrs	r6, r6, #1
 800bd5e:	3708      	adds	r7, #8
 800bd60:	e777      	b.n	800bc52 <_dtoa_r+0x3ca>
 800bd62:	2502      	movs	r5, #2
 800bd64:	e779      	b.n	800bc5a <_dtoa_r+0x3d2>
 800bd66:	9f00      	ldr	r7, [sp, #0]
 800bd68:	9e03      	ldr	r6, [sp, #12]
 800bd6a:	e794      	b.n	800bc96 <_dtoa_r+0x40e>
 800bd6c:	9901      	ldr	r1, [sp, #4]
 800bd6e:	4b4c      	ldr	r3, [pc, #304]	; (800bea0 <_dtoa_r+0x618>)
 800bd70:	4431      	add	r1, r6
 800bd72:	910d      	str	r1, [sp, #52]	; 0x34
 800bd74:	9908      	ldr	r1, [sp, #32]
 800bd76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	d043      	beq.n	800be0a <_dtoa_r+0x582>
 800bd82:	494d      	ldr	r1, [pc, #308]	; (800beb8 <_dtoa_r+0x630>)
 800bd84:	2000      	movs	r0, #0
 800bd86:	f7f4 fd61 	bl	800084c <__aeabi_ddiv>
 800bd8a:	4652      	mov	r2, sl
 800bd8c:	465b      	mov	r3, fp
 800bd8e:	f7f4 fa7b 	bl	8000288 <__aeabi_dsub>
 800bd92:	9d01      	ldr	r5, [sp, #4]
 800bd94:	4682      	mov	sl, r0
 800bd96:	468b      	mov	fp, r1
 800bd98:	4649      	mov	r1, r9
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	f7f4 fedc 	bl	8000b58 <__aeabi_d2iz>
 800bda0:	4606      	mov	r6, r0
 800bda2:	f7f4 fbbf 	bl	8000524 <__aeabi_i2d>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fa6b 	bl	8000288 <__aeabi_dsub>
 800bdb2:	3630      	adds	r6, #48	; 0x30
 800bdb4:	f805 6b01 	strb.w	r6, [r5], #1
 800bdb8:	4652      	mov	r2, sl
 800bdba:	465b      	mov	r3, fp
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	f7f4 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d163      	bne.n	800be90 <_dtoa_r+0x608>
 800bdc8:	4642      	mov	r2, r8
 800bdca:	464b      	mov	r3, r9
 800bdcc:	4936      	ldr	r1, [pc, #216]	; (800bea8 <_dtoa_r+0x620>)
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f7f4 fa5a 	bl	8000288 <__aeabi_dsub>
 800bdd4:	4652      	mov	r2, sl
 800bdd6:	465b      	mov	r3, fp
 800bdd8:	f7f4 fe80 	bl	8000adc <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f040 80b5 	bne.w	800bf4c <_dtoa_r+0x6c4>
 800bde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde4:	429d      	cmp	r5, r3
 800bde6:	d081      	beq.n	800bcec <_dtoa_r+0x464>
 800bde8:	4b30      	ldr	r3, [pc, #192]	; (800beac <_dtoa_r+0x624>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	4650      	mov	r0, sl
 800bdee:	4659      	mov	r1, fp
 800bdf0:	f7f4 fc02 	bl	80005f8 <__aeabi_dmul>
 800bdf4:	4b2d      	ldr	r3, [pc, #180]	; (800beac <_dtoa_r+0x624>)
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	468b      	mov	fp, r1
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	2200      	movs	r2, #0
 800be00:	f7f4 fbfa 	bl	80005f8 <__aeabi_dmul>
 800be04:	4680      	mov	r8, r0
 800be06:	4689      	mov	r9, r1
 800be08:	e7c6      	b.n	800bd98 <_dtoa_r+0x510>
 800be0a:	4650      	mov	r0, sl
 800be0c:	4659      	mov	r1, fp
 800be0e:	f7f4 fbf3 	bl	80005f8 <__aeabi_dmul>
 800be12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be14:	9d01      	ldr	r5, [sp, #4]
 800be16:	930f      	str	r3, [sp, #60]	; 0x3c
 800be18:	4682      	mov	sl, r0
 800be1a:	468b      	mov	fp, r1
 800be1c:	4649      	mov	r1, r9
 800be1e:	4640      	mov	r0, r8
 800be20:	f7f4 fe9a 	bl	8000b58 <__aeabi_d2iz>
 800be24:	4606      	mov	r6, r0
 800be26:	f7f4 fb7d 	bl	8000524 <__aeabi_i2d>
 800be2a:	3630      	adds	r6, #48	; 0x30
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4640      	mov	r0, r8
 800be32:	4649      	mov	r1, r9
 800be34:	f7f4 fa28 	bl	8000288 <__aeabi_dsub>
 800be38:	f805 6b01 	strb.w	r6, [r5], #1
 800be3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be3e:	429d      	cmp	r5, r3
 800be40:	4680      	mov	r8, r0
 800be42:	4689      	mov	r9, r1
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	d124      	bne.n	800be94 <_dtoa_r+0x60c>
 800be4a:	4b1b      	ldr	r3, [pc, #108]	; (800beb8 <_dtoa_r+0x630>)
 800be4c:	4650      	mov	r0, sl
 800be4e:	4659      	mov	r1, fp
 800be50:	f7f4 fa1c 	bl	800028c <__adddf3>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fe5c 	bl	8000b18 <__aeabi_dcmpgt>
 800be60:	2800      	cmp	r0, #0
 800be62:	d173      	bne.n	800bf4c <_dtoa_r+0x6c4>
 800be64:	4652      	mov	r2, sl
 800be66:	465b      	mov	r3, fp
 800be68:	4913      	ldr	r1, [pc, #76]	; (800beb8 <_dtoa_r+0x630>)
 800be6a:	2000      	movs	r0, #0
 800be6c:	f7f4 fa0c 	bl	8000288 <__aeabi_dsub>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4640      	mov	r0, r8
 800be76:	4649      	mov	r1, r9
 800be78:	f7f4 fe30 	bl	8000adc <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f43f af35 	beq.w	800bcec <_dtoa_r+0x464>
 800be82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be84:	1e6b      	subs	r3, r5, #1
 800be86:	930f      	str	r3, [sp, #60]	; 0x3c
 800be88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be8c:	2b30      	cmp	r3, #48	; 0x30
 800be8e:	d0f8      	beq.n	800be82 <_dtoa_r+0x5fa>
 800be90:	9700      	str	r7, [sp, #0]
 800be92:	e049      	b.n	800bf28 <_dtoa_r+0x6a0>
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <_dtoa_r+0x624>)
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	4680      	mov	r8, r0
 800be9c:	4689      	mov	r9, r1
 800be9e:	e7bd      	b.n	800be1c <_dtoa_r+0x594>
 800bea0:	0800e620 	.word	0x0800e620
 800bea4:	0800e5f8 	.word	0x0800e5f8
 800bea8:	3ff00000 	.word	0x3ff00000
 800beac:	40240000 	.word	0x40240000
 800beb0:	401c0000 	.word	0x401c0000
 800beb4:	40140000 	.word	0x40140000
 800beb8:	3fe00000 	.word	0x3fe00000
 800bebc:	9d01      	ldr	r5, [sp, #4]
 800bebe:	4656      	mov	r6, sl
 800bec0:	465f      	mov	r7, fp
 800bec2:	4642      	mov	r2, r8
 800bec4:	464b      	mov	r3, r9
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	f7f4 fcbf 	bl	800084c <__aeabi_ddiv>
 800bece:	f7f4 fe43 	bl	8000b58 <__aeabi_d2iz>
 800bed2:	4682      	mov	sl, r0
 800bed4:	f7f4 fb26 	bl	8000524 <__aeabi_i2d>
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	f7f4 fb8c 	bl	80005f8 <__aeabi_dmul>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4630      	mov	r0, r6
 800bee6:	4639      	mov	r1, r7
 800bee8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800beec:	f7f4 f9cc 	bl	8000288 <__aeabi_dsub>
 800bef0:	f805 6b01 	strb.w	r6, [r5], #1
 800bef4:	9e01      	ldr	r6, [sp, #4]
 800bef6:	9f03      	ldr	r7, [sp, #12]
 800bef8:	1bae      	subs	r6, r5, r6
 800befa:	42b7      	cmp	r7, r6
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	d135      	bne.n	800bf6e <_dtoa_r+0x6e6>
 800bf02:	f7f4 f9c3 	bl	800028c <__adddf3>
 800bf06:	4642      	mov	r2, r8
 800bf08:	464b      	mov	r3, r9
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	f7f4 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 800bf12:	b9d0      	cbnz	r0, 800bf4a <_dtoa_r+0x6c2>
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	4630      	mov	r0, r6
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf20:	b110      	cbz	r0, 800bf28 <_dtoa_r+0x6a0>
 800bf22:	f01a 0f01 	tst.w	sl, #1
 800bf26:	d110      	bne.n	800bf4a <_dtoa_r+0x6c2>
 800bf28:	4620      	mov	r0, r4
 800bf2a:	ee18 1a10 	vmov	r1, s16
 800bf2e:	f000 fbc5 	bl	800c6bc <_Bfree>
 800bf32:	2300      	movs	r3, #0
 800bf34:	9800      	ldr	r0, [sp, #0]
 800bf36:	702b      	strb	r3, [r5, #0]
 800bf38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	6018      	str	r0, [r3, #0]
 800bf3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f43f acf1 	beq.w	800b928 <_dtoa_r+0xa0>
 800bf46:	601d      	str	r5, [r3, #0]
 800bf48:	e4ee      	b.n	800b928 <_dtoa_r+0xa0>
 800bf4a:	9f00      	ldr	r7, [sp, #0]
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	461d      	mov	r5, r3
 800bf50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf54:	2a39      	cmp	r2, #57	; 0x39
 800bf56:	d106      	bne.n	800bf66 <_dtoa_r+0x6de>
 800bf58:	9a01      	ldr	r2, [sp, #4]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d1f7      	bne.n	800bf4e <_dtoa_r+0x6c6>
 800bf5e:	9901      	ldr	r1, [sp, #4]
 800bf60:	2230      	movs	r2, #48	; 0x30
 800bf62:	3701      	adds	r7, #1
 800bf64:	700a      	strb	r2, [r1, #0]
 800bf66:	781a      	ldrb	r2, [r3, #0]
 800bf68:	3201      	adds	r2, #1
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	e790      	b.n	800be90 <_dtoa_r+0x608>
 800bf6e:	4ba6      	ldr	r3, [pc, #664]	; (800c208 <_dtoa_r+0x980>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb41 	bl	80005f8 <__aeabi_dmul>
 800bf76:	2200      	movs	r2, #0
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	f7f4 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d09d      	beq.n	800bec2 <_dtoa_r+0x63a>
 800bf86:	e7cf      	b.n	800bf28 <_dtoa_r+0x6a0>
 800bf88:	9a08      	ldr	r2, [sp, #32]
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	f000 80d7 	beq.w	800c13e <_dtoa_r+0x8b6>
 800bf90:	9a06      	ldr	r2, [sp, #24]
 800bf92:	2a01      	cmp	r2, #1
 800bf94:	f300 80ba 	bgt.w	800c10c <_dtoa_r+0x884>
 800bf98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf9a:	2a00      	cmp	r2, #0
 800bf9c:	f000 80b2 	beq.w	800c104 <_dtoa_r+0x87c>
 800bfa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfa4:	9e07      	ldr	r6, [sp, #28]
 800bfa6:	9d04      	ldr	r5, [sp, #16]
 800bfa8:	9a04      	ldr	r2, [sp, #16]
 800bfaa:	441a      	add	r2, r3
 800bfac:	9204      	str	r2, [sp, #16]
 800bfae:	9a05      	ldr	r2, [sp, #20]
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	441a      	add	r2, r3
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	9205      	str	r2, [sp, #20]
 800bfb8:	f000 fc38 	bl	800c82c <__i2b>
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	dd0c      	ble.n	800bfdc <_dtoa_r+0x754>
 800bfc2:	9b05      	ldr	r3, [sp, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd09      	ble.n	800bfdc <_dtoa_r+0x754>
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	9a04      	ldr	r2, [sp, #16]
 800bfcc:	bfa8      	it	ge
 800bfce:	462b      	movge	r3, r5
 800bfd0:	1ad2      	subs	r2, r2, r3
 800bfd2:	9204      	str	r2, [sp, #16]
 800bfd4:	9a05      	ldr	r2, [sp, #20]
 800bfd6:	1aed      	subs	r5, r5, r3
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	9305      	str	r3, [sp, #20]
 800bfdc:	9b07      	ldr	r3, [sp, #28]
 800bfde:	b31b      	cbz	r3, 800c028 <_dtoa_r+0x7a0>
 800bfe0:	9b08      	ldr	r3, [sp, #32]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 80af 	beq.w	800c146 <_dtoa_r+0x8be>
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	dd13      	ble.n	800c014 <_dtoa_r+0x78c>
 800bfec:	4639      	mov	r1, r7
 800bfee:	4632      	mov	r2, r6
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fcdb 	bl	800c9ac <__pow5mult>
 800bff6:	ee18 2a10 	vmov	r2, s16
 800bffa:	4601      	mov	r1, r0
 800bffc:	4607      	mov	r7, r0
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 fc2a 	bl	800c858 <__multiply>
 800c004:	ee18 1a10 	vmov	r1, s16
 800c008:	4680      	mov	r8, r0
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fb56 	bl	800c6bc <_Bfree>
 800c010:	ee08 8a10 	vmov	s16, r8
 800c014:	9b07      	ldr	r3, [sp, #28]
 800c016:	1b9a      	subs	r2, r3, r6
 800c018:	d006      	beq.n	800c028 <_dtoa_r+0x7a0>
 800c01a:	ee18 1a10 	vmov	r1, s16
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 fcc4 	bl	800c9ac <__pow5mult>
 800c024:	ee08 0a10 	vmov	s16, r0
 800c028:	2101      	movs	r1, #1
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fbfe 	bl	800c82c <__i2b>
 800c030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c032:	2b00      	cmp	r3, #0
 800c034:	4606      	mov	r6, r0
 800c036:	f340 8088 	ble.w	800c14a <_dtoa_r+0x8c2>
 800c03a:	461a      	mov	r2, r3
 800c03c:	4601      	mov	r1, r0
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 fcb4 	bl	800c9ac <__pow5mult>
 800c044:	9b06      	ldr	r3, [sp, #24]
 800c046:	2b01      	cmp	r3, #1
 800c048:	4606      	mov	r6, r0
 800c04a:	f340 8081 	ble.w	800c150 <_dtoa_r+0x8c8>
 800c04e:	f04f 0800 	mov.w	r8, #0
 800c052:	6933      	ldr	r3, [r6, #16]
 800c054:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c058:	6918      	ldr	r0, [r3, #16]
 800c05a:	f000 fb97 	bl	800c78c <__hi0bits>
 800c05e:	f1c0 0020 	rsb	r0, r0, #32
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	4418      	add	r0, r3
 800c066:	f010 001f 	ands.w	r0, r0, #31
 800c06a:	f000 8092 	beq.w	800c192 <_dtoa_r+0x90a>
 800c06e:	f1c0 0320 	rsb	r3, r0, #32
 800c072:	2b04      	cmp	r3, #4
 800c074:	f340 808a 	ble.w	800c18c <_dtoa_r+0x904>
 800c078:	f1c0 001c 	rsb	r0, r0, #28
 800c07c:	9b04      	ldr	r3, [sp, #16]
 800c07e:	4403      	add	r3, r0
 800c080:	9304      	str	r3, [sp, #16]
 800c082:	9b05      	ldr	r3, [sp, #20]
 800c084:	4403      	add	r3, r0
 800c086:	4405      	add	r5, r0
 800c088:	9305      	str	r3, [sp, #20]
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd07      	ble.n	800c0a0 <_dtoa_r+0x818>
 800c090:	ee18 1a10 	vmov	r1, s16
 800c094:	461a      	mov	r2, r3
 800c096:	4620      	mov	r0, r4
 800c098:	f000 fce2 	bl	800ca60 <__lshift>
 800c09c:	ee08 0a10 	vmov	s16, r0
 800c0a0:	9b05      	ldr	r3, [sp, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dd05      	ble.n	800c0b2 <_dtoa_r+0x82a>
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fcd8 	bl	800ca60 <__lshift>
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d06e      	beq.n	800c196 <_dtoa_r+0x90e>
 800c0b8:	ee18 0a10 	vmov	r0, s16
 800c0bc:	4631      	mov	r1, r6
 800c0be:	f000 fd3f 	bl	800cb40 <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	da67      	bge.n	800c196 <_dtoa_r+0x90e>
 800c0c6:	9b00      	ldr	r3, [sp, #0]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	ee18 1a10 	vmov	r1, s16
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 fb13 	bl	800c700 <__multadd>
 800c0da:	9b08      	ldr	r3, [sp, #32]
 800c0dc:	ee08 0a10 	vmov	s16, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 81b1 	beq.w	800c448 <_dtoa_r+0xbc0>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 fb07 	bl	800c700 <__multadd>
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	f300 808e 	bgt.w	800c218 <_dtoa_r+0x990>
 800c0fc:	9b06      	ldr	r3, [sp, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	dc51      	bgt.n	800c1a6 <_dtoa_r+0x91e>
 800c102:	e089      	b.n	800c218 <_dtoa_r+0x990>
 800c104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c10a:	e74b      	b.n	800bfa4 <_dtoa_r+0x71c>
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	1e5e      	subs	r6, r3, #1
 800c110:	9b07      	ldr	r3, [sp, #28]
 800c112:	42b3      	cmp	r3, r6
 800c114:	bfbf      	itttt	lt
 800c116:	9b07      	ldrlt	r3, [sp, #28]
 800c118:	9607      	strlt	r6, [sp, #28]
 800c11a:	1af2      	sublt	r2, r6, r3
 800c11c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c11e:	bfb6      	itet	lt
 800c120:	189b      	addlt	r3, r3, r2
 800c122:	1b9e      	subge	r6, r3, r6
 800c124:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	bfb8      	it	lt
 800c12a:	2600      	movlt	r6, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfb7      	itett	lt
 800c130:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c134:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c138:	1a9d      	sublt	r5, r3, r2
 800c13a:	2300      	movlt	r3, #0
 800c13c:	e734      	b.n	800bfa8 <_dtoa_r+0x720>
 800c13e:	9e07      	ldr	r6, [sp, #28]
 800c140:	9d04      	ldr	r5, [sp, #16]
 800c142:	9f08      	ldr	r7, [sp, #32]
 800c144:	e73b      	b.n	800bfbe <_dtoa_r+0x736>
 800c146:	9a07      	ldr	r2, [sp, #28]
 800c148:	e767      	b.n	800c01a <_dtoa_r+0x792>
 800c14a:	9b06      	ldr	r3, [sp, #24]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	dc18      	bgt.n	800c182 <_dtoa_r+0x8fa>
 800c150:	f1ba 0f00 	cmp.w	sl, #0
 800c154:	d115      	bne.n	800c182 <_dtoa_r+0x8fa>
 800c156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c15a:	b993      	cbnz	r3, 800c182 <_dtoa_r+0x8fa>
 800c15c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c160:	0d1b      	lsrs	r3, r3, #20
 800c162:	051b      	lsls	r3, r3, #20
 800c164:	b183      	cbz	r3, 800c188 <_dtoa_r+0x900>
 800c166:	9b04      	ldr	r3, [sp, #16]
 800c168:	3301      	adds	r3, #1
 800c16a:	9304      	str	r3, [sp, #16]
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	3301      	adds	r3, #1
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	f04f 0801 	mov.w	r8, #1
 800c176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f47f af6a 	bne.w	800c052 <_dtoa_r+0x7ca>
 800c17e:	2001      	movs	r0, #1
 800c180:	e76f      	b.n	800c062 <_dtoa_r+0x7da>
 800c182:	f04f 0800 	mov.w	r8, #0
 800c186:	e7f6      	b.n	800c176 <_dtoa_r+0x8ee>
 800c188:	4698      	mov	r8, r3
 800c18a:	e7f4      	b.n	800c176 <_dtoa_r+0x8ee>
 800c18c:	f43f af7d 	beq.w	800c08a <_dtoa_r+0x802>
 800c190:	4618      	mov	r0, r3
 800c192:	301c      	adds	r0, #28
 800c194:	e772      	b.n	800c07c <_dtoa_r+0x7f4>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	dc37      	bgt.n	800c20c <_dtoa_r+0x984>
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	dd34      	ble.n	800c20c <_dtoa_r+0x984>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	b96b      	cbnz	r3, 800c1c6 <_dtoa_r+0x93e>
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	2205      	movs	r2, #5
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f000 faa6 	bl	800c700 <__multadd>
 800c1b4:	4601      	mov	r1, r0
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	ee18 0a10 	vmov	r0, s16
 800c1bc:	f000 fcc0 	bl	800cb40 <__mcmp>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f73f adbb 	bgt.w	800bd3c <_dtoa_r+0x4b4>
 800c1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c8:	9d01      	ldr	r5, [sp, #4]
 800c1ca:	43db      	mvns	r3, r3
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	f04f 0800 	mov.w	r8, #0
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f000 fa71 	bl	800c6bc <_Bfree>
 800c1da:	2f00      	cmp	r7, #0
 800c1dc:	f43f aea4 	beq.w	800bf28 <_dtoa_r+0x6a0>
 800c1e0:	f1b8 0f00 	cmp.w	r8, #0
 800c1e4:	d005      	beq.n	800c1f2 <_dtoa_r+0x96a>
 800c1e6:	45b8      	cmp	r8, r7
 800c1e8:	d003      	beq.n	800c1f2 <_dtoa_r+0x96a>
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 fa65 	bl	800c6bc <_Bfree>
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fa61 	bl	800c6bc <_Bfree>
 800c1fa:	e695      	b.n	800bf28 <_dtoa_r+0x6a0>
 800c1fc:	2600      	movs	r6, #0
 800c1fe:	4637      	mov	r7, r6
 800c200:	e7e1      	b.n	800c1c6 <_dtoa_r+0x93e>
 800c202:	9700      	str	r7, [sp, #0]
 800c204:	4637      	mov	r7, r6
 800c206:	e599      	b.n	800bd3c <_dtoa_r+0x4b4>
 800c208:	40240000 	.word	0x40240000
 800c20c:	9b08      	ldr	r3, [sp, #32]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 80ca 	beq.w	800c3a8 <_dtoa_r+0xb20>
 800c214:	9b03      	ldr	r3, [sp, #12]
 800c216:	9302      	str	r3, [sp, #8]
 800c218:	2d00      	cmp	r5, #0
 800c21a:	dd05      	ble.n	800c228 <_dtoa_r+0x9a0>
 800c21c:	4639      	mov	r1, r7
 800c21e:	462a      	mov	r2, r5
 800c220:	4620      	mov	r0, r4
 800c222:	f000 fc1d 	bl	800ca60 <__lshift>
 800c226:	4607      	mov	r7, r0
 800c228:	f1b8 0f00 	cmp.w	r8, #0
 800c22c:	d05b      	beq.n	800c2e6 <_dtoa_r+0xa5e>
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	4620      	mov	r0, r4
 800c232:	f000 fa03 	bl	800c63c <_Balloc>
 800c236:	4605      	mov	r5, r0
 800c238:	b928      	cbnz	r0, 800c246 <_dtoa_r+0x9be>
 800c23a:	4b87      	ldr	r3, [pc, #540]	; (800c458 <_dtoa_r+0xbd0>)
 800c23c:	4602      	mov	r2, r0
 800c23e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c242:	f7ff bb3b 	b.w	800b8bc <_dtoa_r+0x34>
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	3202      	adds	r2, #2
 800c24a:	0092      	lsls	r2, r2, #2
 800c24c:	f107 010c 	add.w	r1, r7, #12
 800c250:	300c      	adds	r0, #12
 800c252:	f7fe fbec 	bl	800aa2e <memcpy>
 800c256:	2201      	movs	r2, #1
 800c258:	4629      	mov	r1, r5
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 fc00 	bl	800ca60 <__lshift>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	f103 0901 	add.w	r9, r3, #1
 800c266:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c26a:	4413      	add	r3, r2
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	f00a 0301 	and.w	r3, sl, #1
 800c272:	46b8      	mov	r8, r7
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	4607      	mov	r7, r0
 800c278:	4631      	mov	r1, r6
 800c27a:	ee18 0a10 	vmov	r0, s16
 800c27e:	f7ff fa77 	bl	800b770 <quorem>
 800c282:	4641      	mov	r1, r8
 800c284:	9002      	str	r0, [sp, #8]
 800c286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c28a:	ee18 0a10 	vmov	r0, s16
 800c28e:	f000 fc57 	bl	800cb40 <__mcmp>
 800c292:	463a      	mov	r2, r7
 800c294:	9003      	str	r0, [sp, #12]
 800c296:	4631      	mov	r1, r6
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 fc6d 	bl	800cb78 <__mdiff>
 800c29e:	68c2      	ldr	r2, [r0, #12]
 800c2a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	bb02      	cbnz	r2, 800c2ea <_dtoa_r+0xa62>
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	ee18 0a10 	vmov	r0, s16
 800c2ae:	f000 fc47 	bl	800cb40 <__mcmp>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	9207      	str	r2, [sp, #28]
 800c2ba:	f000 f9ff 	bl	800c6bc <_Bfree>
 800c2be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c2c2:	ea43 0102 	orr.w	r1, r3, r2
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	430b      	orrs	r3, r1
 800c2ca:	464d      	mov	r5, r9
 800c2cc:	d10f      	bne.n	800c2ee <_dtoa_r+0xa66>
 800c2ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2d2:	d02a      	beq.n	800c32a <_dtoa_r+0xaa2>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	dd02      	ble.n	800c2e0 <_dtoa_r+0xa58>
 800c2da:	9b02      	ldr	r3, [sp, #8]
 800c2dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c2e0:	f88b a000 	strb.w	sl, [fp]
 800c2e4:	e775      	b.n	800c1d2 <_dtoa_r+0x94a>
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	e7ba      	b.n	800c260 <_dtoa_r+0x9d8>
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	e7e2      	b.n	800c2b4 <_dtoa_r+0xa2c>
 800c2ee:	9b03      	ldr	r3, [sp, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	db04      	blt.n	800c2fe <_dtoa_r+0xa76>
 800c2f4:	9906      	ldr	r1, [sp, #24]
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	9904      	ldr	r1, [sp, #16]
 800c2fa:	430b      	orrs	r3, r1
 800c2fc:	d122      	bne.n	800c344 <_dtoa_r+0xabc>
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	ddee      	ble.n	800c2e0 <_dtoa_r+0xa58>
 800c302:	ee18 1a10 	vmov	r1, s16
 800c306:	2201      	movs	r2, #1
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fba9 	bl	800ca60 <__lshift>
 800c30e:	4631      	mov	r1, r6
 800c310:	ee08 0a10 	vmov	s16, r0
 800c314:	f000 fc14 	bl	800cb40 <__mcmp>
 800c318:	2800      	cmp	r0, #0
 800c31a:	dc03      	bgt.n	800c324 <_dtoa_r+0xa9c>
 800c31c:	d1e0      	bne.n	800c2e0 <_dtoa_r+0xa58>
 800c31e:	f01a 0f01 	tst.w	sl, #1
 800c322:	d0dd      	beq.n	800c2e0 <_dtoa_r+0xa58>
 800c324:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c328:	d1d7      	bne.n	800c2da <_dtoa_r+0xa52>
 800c32a:	2339      	movs	r3, #57	; 0x39
 800c32c:	f88b 3000 	strb.w	r3, [fp]
 800c330:	462b      	mov	r3, r5
 800c332:	461d      	mov	r5, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c33a:	2a39      	cmp	r2, #57	; 0x39
 800c33c:	d071      	beq.n	800c422 <_dtoa_r+0xb9a>
 800c33e:	3201      	adds	r2, #1
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e746      	b.n	800c1d2 <_dtoa_r+0x94a>
 800c344:	2a00      	cmp	r2, #0
 800c346:	dd07      	ble.n	800c358 <_dtoa_r+0xad0>
 800c348:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c34c:	d0ed      	beq.n	800c32a <_dtoa_r+0xaa2>
 800c34e:	f10a 0301 	add.w	r3, sl, #1
 800c352:	f88b 3000 	strb.w	r3, [fp]
 800c356:	e73c      	b.n	800c1d2 <_dtoa_r+0x94a>
 800c358:	9b05      	ldr	r3, [sp, #20]
 800c35a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c35e:	4599      	cmp	r9, r3
 800c360:	d047      	beq.n	800c3f2 <_dtoa_r+0xb6a>
 800c362:	ee18 1a10 	vmov	r1, s16
 800c366:	2300      	movs	r3, #0
 800c368:	220a      	movs	r2, #10
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 f9c8 	bl	800c700 <__multadd>
 800c370:	45b8      	cmp	r8, r7
 800c372:	ee08 0a10 	vmov	s16, r0
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	f04f 020a 	mov.w	r2, #10
 800c37e:	4641      	mov	r1, r8
 800c380:	4620      	mov	r0, r4
 800c382:	d106      	bne.n	800c392 <_dtoa_r+0xb0a>
 800c384:	f000 f9bc 	bl	800c700 <__multadd>
 800c388:	4680      	mov	r8, r0
 800c38a:	4607      	mov	r7, r0
 800c38c:	f109 0901 	add.w	r9, r9, #1
 800c390:	e772      	b.n	800c278 <_dtoa_r+0x9f0>
 800c392:	f000 f9b5 	bl	800c700 <__multadd>
 800c396:	4639      	mov	r1, r7
 800c398:	4680      	mov	r8, r0
 800c39a:	2300      	movs	r3, #0
 800c39c:	220a      	movs	r2, #10
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f9ae 	bl	800c700 <__multadd>
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	e7f1      	b.n	800c38c <_dtoa_r+0xb04>
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	9302      	str	r3, [sp, #8]
 800c3ac:	9d01      	ldr	r5, [sp, #4]
 800c3ae:	ee18 0a10 	vmov	r0, s16
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	f7ff f9dc 	bl	800b770 <quorem>
 800c3b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c3bc:	9b01      	ldr	r3, [sp, #4]
 800c3be:	f805 ab01 	strb.w	sl, [r5], #1
 800c3c2:	1aea      	subs	r2, r5, r3
 800c3c4:	9b02      	ldr	r3, [sp, #8]
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	dd09      	ble.n	800c3de <_dtoa_r+0xb56>
 800c3ca:	ee18 1a10 	vmov	r1, s16
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 f994 	bl	800c700 <__multadd>
 800c3d8:	ee08 0a10 	vmov	s16, r0
 800c3dc:	e7e7      	b.n	800c3ae <_dtoa_r+0xb26>
 800c3de:	9b02      	ldr	r3, [sp, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bfc8      	it	gt
 800c3e4:	461d      	movgt	r5, r3
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	bfd8      	it	le
 800c3ea:	2501      	movle	r5, #1
 800c3ec:	441d      	add	r5, r3
 800c3ee:	f04f 0800 	mov.w	r8, #0
 800c3f2:	ee18 1a10 	vmov	r1, s16
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fb31 	bl	800ca60 <__lshift>
 800c3fe:	4631      	mov	r1, r6
 800c400:	ee08 0a10 	vmov	s16, r0
 800c404:	f000 fb9c 	bl	800cb40 <__mcmp>
 800c408:	2800      	cmp	r0, #0
 800c40a:	dc91      	bgt.n	800c330 <_dtoa_r+0xaa8>
 800c40c:	d102      	bne.n	800c414 <_dtoa_r+0xb8c>
 800c40e:	f01a 0f01 	tst.w	sl, #1
 800c412:	d18d      	bne.n	800c330 <_dtoa_r+0xaa8>
 800c414:	462b      	mov	r3, r5
 800c416:	461d      	mov	r5, r3
 800c418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c41c:	2a30      	cmp	r2, #48	; 0x30
 800c41e:	d0fa      	beq.n	800c416 <_dtoa_r+0xb8e>
 800c420:	e6d7      	b.n	800c1d2 <_dtoa_r+0x94a>
 800c422:	9a01      	ldr	r2, [sp, #4]
 800c424:	429a      	cmp	r2, r3
 800c426:	d184      	bne.n	800c332 <_dtoa_r+0xaaa>
 800c428:	9b00      	ldr	r3, [sp, #0]
 800c42a:	3301      	adds	r3, #1
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	2331      	movs	r3, #49	; 0x31
 800c430:	7013      	strb	r3, [r2, #0]
 800c432:	e6ce      	b.n	800c1d2 <_dtoa_r+0x94a>
 800c434:	4b09      	ldr	r3, [pc, #36]	; (800c45c <_dtoa_r+0xbd4>)
 800c436:	f7ff ba95 	b.w	800b964 <_dtoa_r+0xdc>
 800c43a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f47f aa6e 	bne.w	800b91e <_dtoa_r+0x96>
 800c442:	4b07      	ldr	r3, [pc, #28]	; (800c460 <_dtoa_r+0xbd8>)
 800c444:	f7ff ba8e 	b.w	800b964 <_dtoa_r+0xdc>
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dcae      	bgt.n	800c3ac <_dtoa_r+0xb24>
 800c44e:	9b06      	ldr	r3, [sp, #24]
 800c450:	2b02      	cmp	r3, #2
 800c452:	f73f aea8 	bgt.w	800c1a6 <_dtoa_r+0x91e>
 800c456:	e7a9      	b.n	800c3ac <_dtoa_r+0xb24>
 800c458:	0800e584 	.word	0x0800e584
 800c45c:	0800e3e0 	.word	0x0800e3e0
 800c460:	0800e505 	.word	0x0800e505

0800c464 <__sflush_r>:
 800c464:	898a      	ldrh	r2, [r1, #12]
 800c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	0710      	lsls	r0, r2, #28
 800c46e:	460c      	mov	r4, r1
 800c470:	d458      	bmi.n	800c524 <__sflush_r+0xc0>
 800c472:	684b      	ldr	r3, [r1, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	dc05      	bgt.n	800c484 <__sflush_r+0x20>
 800c478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dc02      	bgt.n	800c484 <__sflush_r+0x20>
 800c47e:	2000      	movs	r0, #0
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c486:	2e00      	cmp	r6, #0
 800c488:	d0f9      	beq.n	800c47e <__sflush_r+0x1a>
 800c48a:	2300      	movs	r3, #0
 800c48c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c490:	682f      	ldr	r7, [r5, #0]
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	d032      	beq.n	800c4fc <__sflush_r+0x98>
 800c496:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	075a      	lsls	r2, r3, #29
 800c49c:	d505      	bpl.n	800c4aa <__sflush_r+0x46>
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	1ac0      	subs	r0, r0, r3
 800c4a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4a4:	b10b      	cbz	r3, 800c4aa <__sflush_r+0x46>
 800c4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4a8:	1ac0      	subs	r0, r0, r3
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4b0:	6a21      	ldr	r1, [r4, #32]
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	47b0      	blx	r6
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	d106      	bne.n	800c4ca <__sflush_r+0x66>
 800c4bc:	6829      	ldr	r1, [r5, #0]
 800c4be:	291d      	cmp	r1, #29
 800c4c0:	d82c      	bhi.n	800c51c <__sflush_r+0xb8>
 800c4c2:	4a2a      	ldr	r2, [pc, #168]	; (800c56c <__sflush_r+0x108>)
 800c4c4:	40ca      	lsrs	r2, r1
 800c4c6:	07d6      	lsls	r6, r2, #31
 800c4c8:	d528      	bpl.n	800c51c <__sflush_r+0xb8>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	6062      	str	r2, [r4, #4]
 800c4ce:	04d9      	lsls	r1, r3, #19
 800c4d0:	6922      	ldr	r2, [r4, #16]
 800c4d2:	6022      	str	r2, [r4, #0]
 800c4d4:	d504      	bpl.n	800c4e0 <__sflush_r+0x7c>
 800c4d6:	1c42      	adds	r2, r0, #1
 800c4d8:	d101      	bne.n	800c4de <__sflush_r+0x7a>
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	b903      	cbnz	r3, 800c4e0 <__sflush_r+0x7c>
 800c4de:	6560      	str	r0, [r4, #84]	; 0x54
 800c4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e2:	602f      	str	r7, [r5, #0]
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	d0ca      	beq.n	800c47e <__sflush_r+0x1a>
 800c4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ec:	4299      	cmp	r1, r3
 800c4ee:	d002      	beq.n	800c4f6 <__sflush_r+0x92>
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f000 fc3d 	bl	800cd70 <_free_r>
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4fa:	e7c1      	b.n	800c480 <__sflush_r+0x1c>
 800c4fc:	6a21      	ldr	r1, [r4, #32]
 800c4fe:	2301      	movs	r3, #1
 800c500:	4628      	mov	r0, r5
 800c502:	47b0      	blx	r6
 800c504:	1c41      	adds	r1, r0, #1
 800c506:	d1c7      	bne.n	800c498 <__sflush_r+0x34>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0c4      	beq.n	800c498 <__sflush_r+0x34>
 800c50e:	2b1d      	cmp	r3, #29
 800c510:	d001      	beq.n	800c516 <__sflush_r+0xb2>
 800c512:	2b16      	cmp	r3, #22
 800c514:	d101      	bne.n	800c51a <__sflush_r+0xb6>
 800c516:	602f      	str	r7, [r5, #0]
 800c518:	e7b1      	b.n	800c47e <__sflush_r+0x1a>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	e7ad      	b.n	800c480 <__sflush_r+0x1c>
 800c524:	690f      	ldr	r7, [r1, #16]
 800c526:	2f00      	cmp	r7, #0
 800c528:	d0a9      	beq.n	800c47e <__sflush_r+0x1a>
 800c52a:	0793      	lsls	r3, r2, #30
 800c52c:	680e      	ldr	r6, [r1, #0]
 800c52e:	bf08      	it	eq
 800c530:	694b      	ldreq	r3, [r1, #20]
 800c532:	600f      	str	r7, [r1, #0]
 800c534:	bf18      	it	ne
 800c536:	2300      	movne	r3, #0
 800c538:	eba6 0807 	sub.w	r8, r6, r7
 800c53c:	608b      	str	r3, [r1, #8]
 800c53e:	f1b8 0f00 	cmp.w	r8, #0
 800c542:	dd9c      	ble.n	800c47e <__sflush_r+0x1a>
 800c544:	6a21      	ldr	r1, [r4, #32]
 800c546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c548:	4643      	mov	r3, r8
 800c54a:	463a      	mov	r2, r7
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b0      	blx	r6
 800c550:	2800      	cmp	r0, #0
 800c552:	dc06      	bgt.n	800c562 <__sflush_r+0xfe>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	e78e      	b.n	800c480 <__sflush_r+0x1c>
 800c562:	4407      	add	r7, r0
 800c564:	eba8 0800 	sub.w	r8, r8, r0
 800c568:	e7e9      	b.n	800c53e <__sflush_r+0xda>
 800c56a:	bf00      	nop
 800c56c:	20400001 	.word	0x20400001

0800c570 <_fflush_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	690b      	ldr	r3, [r1, #16]
 800c574:	4605      	mov	r5, r0
 800c576:	460c      	mov	r4, r1
 800c578:	b913      	cbnz	r3, 800c580 <_fflush_r+0x10>
 800c57a:	2500      	movs	r5, #0
 800c57c:	4628      	mov	r0, r5
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	b118      	cbz	r0, 800c58a <_fflush_r+0x1a>
 800c582:	6983      	ldr	r3, [r0, #24]
 800c584:	b90b      	cbnz	r3, 800c58a <_fflush_r+0x1a>
 800c586:	f7fe f98d 	bl	800a8a4 <__sinit>
 800c58a:	4b14      	ldr	r3, [pc, #80]	; (800c5dc <_fflush_r+0x6c>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d11b      	bne.n	800c5c8 <_fflush_r+0x58>
 800c590:	686c      	ldr	r4, [r5, #4]
 800c592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0ef      	beq.n	800c57a <_fflush_r+0xa>
 800c59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c59c:	07d0      	lsls	r0, r2, #31
 800c59e:	d404      	bmi.n	800c5aa <_fflush_r+0x3a>
 800c5a0:	0599      	lsls	r1, r3, #22
 800c5a2:	d402      	bmi.n	800c5aa <_fflush_r+0x3a>
 800c5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a6:	f7fe fa40 	bl	800aa2a <__retarget_lock_acquire_recursive>
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	f7ff ff59 	bl	800c464 <__sflush_r>
 800c5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5b4:	07da      	lsls	r2, r3, #31
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	d4e0      	bmi.n	800c57c <_fflush_r+0xc>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	059b      	lsls	r3, r3, #22
 800c5be:	d4dd      	bmi.n	800c57c <_fflush_r+0xc>
 800c5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5c2:	f7fe fa33 	bl	800aa2c <__retarget_lock_release_recursive>
 800c5c6:	e7d9      	b.n	800c57c <_fflush_r+0xc>
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <_fflush_r+0x70>)
 800c5ca:	429c      	cmp	r4, r3
 800c5cc:	d101      	bne.n	800c5d2 <_fflush_r+0x62>
 800c5ce:	68ac      	ldr	r4, [r5, #8]
 800c5d0:	e7df      	b.n	800c592 <_fflush_r+0x22>
 800c5d2:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <_fflush_r+0x74>)
 800c5d4:	429c      	cmp	r4, r3
 800c5d6:	bf08      	it	eq
 800c5d8:	68ec      	ldreq	r4, [r5, #12]
 800c5da:	e7da      	b.n	800c592 <_fflush_r+0x22>
 800c5dc:	0800e38c 	.word	0x0800e38c
 800c5e0:	0800e3ac 	.word	0x0800e3ac
 800c5e4:	0800e36c 	.word	0x0800e36c

0800c5e8 <_localeconv_r>:
 800c5e8:	4800      	ldr	r0, [pc, #0]	; (800c5ec <_localeconv_r+0x4>)
 800c5ea:	4770      	bx	lr
 800c5ec:	20000188 	.word	0x20000188

0800c5f0 <_lseek_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d07      	ldr	r5, [pc, #28]	; (800c610 <_lseek_r+0x20>)
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	602a      	str	r2, [r5, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	f7f6 fc76 	bl	8002ef0 <_lseek>
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	d102      	bne.n	800c60e <_lseek_r+0x1e>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	b103      	cbz	r3, 800c60e <_lseek_r+0x1e>
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	200053e4 	.word	0x200053e4

0800c614 <malloc>:
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <malloc+0xc>)
 800c616:	4601      	mov	r1, r0
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	f7fe ba3f 	b.w	800aa9c <_malloc_r>
 800c61e:	bf00      	nop
 800c620:	20000034 	.word	0x20000034

0800c624 <__malloc_lock>:
 800c624:	4801      	ldr	r0, [pc, #4]	; (800c62c <__malloc_lock+0x8>)
 800c626:	f7fe ba00 	b.w	800aa2a <__retarget_lock_acquire_recursive>
 800c62a:	bf00      	nop
 800c62c:	200053d8 	.word	0x200053d8

0800c630 <__malloc_unlock>:
 800c630:	4801      	ldr	r0, [pc, #4]	; (800c638 <__malloc_unlock+0x8>)
 800c632:	f7fe b9fb 	b.w	800aa2c <__retarget_lock_release_recursive>
 800c636:	bf00      	nop
 800c638:	200053d8 	.word	0x200053d8

0800c63c <_Balloc>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c640:	4604      	mov	r4, r0
 800c642:	460d      	mov	r5, r1
 800c644:	b976      	cbnz	r6, 800c664 <_Balloc+0x28>
 800c646:	2010      	movs	r0, #16
 800c648:	f7ff ffe4 	bl	800c614 <malloc>
 800c64c:	4602      	mov	r2, r0
 800c64e:	6260      	str	r0, [r4, #36]	; 0x24
 800c650:	b920      	cbnz	r0, 800c65c <_Balloc+0x20>
 800c652:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <_Balloc+0x78>)
 800c654:	4818      	ldr	r0, [pc, #96]	; (800c6b8 <_Balloc+0x7c>)
 800c656:	2166      	movs	r1, #102	; 0x66
 800c658:	f000 fd44 	bl	800d0e4 <__assert_func>
 800c65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c660:	6006      	str	r6, [r0, #0]
 800c662:	60c6      	str	r6, [r0, #12]
 800c664:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c666:	68f3      	ldr	r3, [r6, #12]
 800c668:	b183      	cbz	r3, 800c68c <_Balloc+0x50>
 800c66a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c672:	b9b8      	cbnz	r0, 800c6a4 <_Balloc+0x68>
 800c674:	2101      	movs	r1, #1
 800c676:	fa01 f605 	lsl.w	r6, r1, r5
 800c67a:	1d72      	adds	r2, r6, #5
 800c67c:	0092      	lsls	r2, r2, #2
 800c67e:	4620      	mov	r0, r4
 800c680:	f000 fb60 	bl	800cd44 <_calloc_r>
 800c684:	b160      	cbz	r0, 800c6a0 <_Balloc+0x64>
 800c686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c68a:	e00e      	b.n	800c6aa <_Balloc+0x6e>
 800c68c:	2221      	movs	r2, #33	; 0x21
 800c68e:	2104      	movs	r1, #4
 800c690:	4620      	mov	r0, r4
 800c692:	f000 fb57 	bl	800cd44 <_calloc_r>
 800c696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c698:	60f0      	str	r0, [r6, #12]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e4      	bne.n	800c66a <_Balloc+0x2e>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	6802      	ldr	r2, [r0, #0]
 800c6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6b0:	e7f7      	b.n	800c6a2 <_Balloc+0x66>
 800c6b2:	bf00      	nop
 800c6b4:	0800e512 	.word	0x0800e512
 800c6b8:	0800e595 	.word	0x0800e595

0800c6bc <_Bfree>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	b976      	cbnz	r6, 800c6e4 <_Bfree+0x28>
 800c6c6:	2010      	movs	r0, #16
 800c6c8:	f7ff ffa4 	bl	800c614 <malloc>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	6268      	str	r0, [r5, #36]	; 0x24
 800c6d0:	b920      	cbnz	r0, 800c6dc <_Bfree+0x20>
 800c6d2:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <_Bfree+0x3c>)
 800c6d4:	4809      	ldr	r0, [pc, #36]	; (800c6fc <_Bfree+0x40>)
 800c6d6:	218a      	movs	r1, #138	; 0x8a
 800c6d8:	f000 fd04 	bl	800d0e4 <__assert_func>
 800c6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6e0:	6006      	str	r6, [r0, #0]
 800c6e2:	60c6      	str	r6, [r0, #12]
 800c6e4:	b13c      	cbz	r4, 800c6f6 <_Bfree+0x3a>
 800c6e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6e8:	6862      	ldr	r2, [r4, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6f0:	6021      	str	r1, [r4, #0]
 800c6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	0800e512 	.word	0x0800e512
 800c6fc:	0800e595 	.word	0x0800e595

0800c700 <__multadd>:
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	690d      	ldr	r5, [r1, #16]
 800c706:	4607      	mov	r7, r0
 800c708:	460c      	mov	r4, r1
 800c70a:	461e      	mov	r6, r3
 800c70c:	f101 0c14 	add.w	ip, r1, #20
 800c710:	2000      	movs	r0, #0
 800c712:	f8dc 3000 	ldr.w	r3, [ip]
 800c716:	b299      	uxth	r1, r3
 800c718:	fb02 6101 	mla	r1, r2, r1, r6
 800c71c:	0c1e      	lsrs	r6, r3, #16
 800c71e:	0c0b      	lsrs	r3, r1, #16
 800c720:	fb02 3306 	mla	r3, r2, r6, r3
 800c724:	b289      	uxth	r1, r1
 800c726:	3001      	adds	r0, #1
 800c728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c72c:	4285      	cmp	r5, r0
 800c72e:	f84c 1b04 	str.w	r1, [ip], #4
 800c732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c736:	dcec      	bgt.n	800c712 <__multadd+0x12>
 800c738:	b30e      	cbz	r6, 800c77e <__multadd+0x7e>
 800c73a:	68a3      	ldr	r3, [r4, #8]
 800c73c:	42ab      	cmp	r3, r5
 800c73e:	dc19      	bgt.n	800c774 <__multadd+0x74>
 800c740:	6861      	ldr	r1, [r4, #4]
 800c742:	4638      	mov	r0, r7
 800c744:	3101      	adds	r1, #1
 800c746:	f7ff ff79 	bl	800c63c <_Balloc>
 800c74a:	4680      	mov	r8, r0
 800c74c:	b928      	cbnz	r0, 800c75a <__multadd+0x5a>
 800c74e:	4602      	mov	r2, r0
 800c750:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <__multadd+0x84>)
 800c752:	480d      	ldr	r0, [pc, #52]	; (800c788 <__multadd+0x88>)
 800c754:	21b5      	movs	r1, #181	; 0xb5
 800c756:	f000 fcc5 	bl	800d0e4 <__assert_func>
 800c75a:	6922      	ldr	r2, [r4, #16]
 800c75c:	3202      	adds	r2, #2
 800c75e:	f104 010c 	add.w	r1, r4, #12
 800c762:	0092      	lsls	r2, r2, #2
 800c764:	300c      	adds	r0, #12
 800c766:	f7fe f962 	bl	800aa2e <memcpy>
 800c76a:	4621      	mov	r1, r4
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ffa5 	bl	800c6bc <_Bfree>
 800c772:	4644      	mov	r4, r8
 800c774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c778:	3501      	adds	r5, #1
 800c77a:	615e      	str	r6, [r3, #20]
 800c77c:	6125      	str	r5, [r4, #16]
 800c77e:	4620      	mov	r0, r4
 800c780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c784:	0800e584 	.word	0x0800e584
 800c788:	0800e595 	.word	0x0800e595

0800c78c <__hi0bits>:
 800c78c:	0c03      	lsrs	r3, r0, #16
 800c78e:	041b      	lsls	r3, r3, #16
 800c790:	b9d3      	cbnz	r3, 800c7c8 <__hi0bits+0x3c>
 800c792:	0400      	lsls	r0, r0, #16
 800c794:	2310      	movs	r3, #16
 800c796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c79a:	bf04      	itt	eq
 800c79c:	0200      	lsleq	r0, r0, #8
 800c79e:	3308      	addeq	r3, #8
 800c7a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7a4:	bf04      	itt	eq
 800c7a6:	0100      	lsleq	r0, r0, #4
 800c7a8:	3304      	addeq	r3, #4
 800c7aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7ae:	bf04      	itt	eq
 800c7b0:	0080      	lsleq	r0, r0, #2
 800c7b2:	3302      	addeq	r3, #2
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	db05      	blt.n	800c7c4 <__hi0bits+0x38>
 800c7b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7bc:	f103 0301 	add.w	r3, r3, #1
 800c7c0:	bf08      	it	eq
 800c7c2:	2320      	moveq	r3, #32
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	4770      	bx	lr
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e7e4      	b.n	800c796 <__hi0bits+0xa>

0800c7cc <__lo0bits>:
 800c7cc:	6803      	ldr	r3, [r0, #0]
 800c7ce:	f013 0207 	ands.w	r2, r3, #7
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	d00b      	beq.n	800c7ee <__lo0bits+0x22>
 800c7d6:	07da      	lsls	r2, r3, #31
 800c7d8:	d423      	bmi.n	800c822 <__lo0bits+0x56>
 800c7da:	0798      	lsls	r0, r3, #30
 800c7dc:	bf49      	itett	mi
 800c7de:	085b      	lsrmi	r3, r3, #1
 800c7e0:	089b      	lsrpl	r3, r3, #2
 800c7e2:	2001      	movmi	r0, #1
 800c7e4:	600b      	strmi	r3, [r1, #0]
 800c7e6:	bf5c      	itt	pl
 800c7e8:	600b      	strpl	r3, [r1, #0]
 800c7ea:	2002      	movpl	r0, #2
 800c7ec:	4770      	bx	lr
 800c7ee:	b298      	uxth	r0, r3
 800c7f0:	b9a8      	cbnz	r0, 800c81e <__lo0bits+0x52>
 800c7f2:	0c1b      	lsrs	r3, r3, #16
 800c7f4:	2010      	movs	r0, #16
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	b90a      	cbnz	r2, 800c7fe <__lo0bits+0x32>
 800c7fa:	3008      	adds	r0, #8
 800c7fc:	0a1b      	lsrs	r3, r3, #8
 800c7fe:	071a      	lsls	r2, r3, #28
 800c800:	bf04      	itt	eq
 800c802:	091b      	lsreq	r3, r3, #4
 800c804:	3004      	addeq	r0, #4
 800c806:	079a      	lsls	r2, r3, #30
 800c808:	bf04      	itt	eq
 800c80a:	089b      	lsreq	r3, r3, #2
 800c80c:	3002      	addeq	r0, #2
 800c80e:	07da      	lsls	r2, r3, #31
 800c810:	d403      	bmi.n	800c81a <__lo0bits+0x4e>
 800c812:	085b      	lsrs	r3, r3, #1
 800c814:	f100 0001 	add.w	r0, r0, #1
 800c818:	d005      	beq.n	800c826 <__lo0bits+0x5a>
 800c81a:	600b      	str	r3, [r1, #0]
 800c81c:	4770      	bx	lr
 800c81e:	4610      	mov	r0, r2
 800c820:	e7e9      	b.n	800c7f6 <__lo0bits+0x2a>
 800c822:	2000      	movs	r0, #0
 800c824:	4770      	bx	lr
 800c826:	2020      	movs	r0, #32
 800c828:	4770      	bx	lr
	...

0800c82c <__i2b>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	460c      	mov	r4, r1
 800c830:	2101      	movs	r1, #1
 800c832:	f7ff ff03 	bl	800c63c <_Balloc>
 800c836:	4602      	mov	r2, r0
 800c838:	b928      	cbnz	r0, 800c846 <__i2b+0x1a>
 800c83a:	4b05      	ldr	r3, [pc, #20]	; (800c850 <__i2b+0x24>)
 800c83c:	4805      	ldr	r0, [pc, #20]	; (800c854 <__i2b+0x28>)
 800c83e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c842:	f000 fc4f 	bl	800d0e4 <__assert_func>
 800c846:	2301      	movs	r3, #1
 800c848:	6144      	str	r4, [r0, #20]
 800c84a:	6103      	str	r3, [r0, #16]
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	bf00      	nop
 800c850:	0800e584 	.word	0x0800e584
 800c854:	0800e595 	.word	0x0800e595

0800c858 <__multiply>:
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	4691      	mov	r9, r2
 800c85e:	690a      	ldr	r2, [r1, #16]
 800c860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c864:	429a      	cmp	r2, r3
 800c866:	bfb8      	it	lt
 800c868:	460b      	movlt	r3, r1
 800c86a:	460c      	mov	r4, r1
 800c86c:	bfbc      	itt	lt
 800c86e:	464c      	movlt	r4, r9
 800c870:	4699      	movlt	r9, r3
 800c872:	6927      	ldr	r7, [r4, #16]
 800c874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c878:	68a3      	ldr	r3, [r4, #8]
 800c87a:	6861      	ldr	r1, [r4, #4]
 800c87c:	eb07 060a 	add.w	r6, r7, sl
 800c880:	42b3      	cmp	r3, r6
 800c882:	b085      	sub	sp, #20
 800c884:	bfb8      	it	lt
 800c886:	3101      	addlt	r1, #1
 800c888:	f7ff fed8 	bl	800c63c <_Balloc>
 800c88c:	b930      	cbnz	r0, 800c89c <__multiply+0x44>
 800c88e:	4602      	mov	r2, r0
 800c890:	4b44      	ldr	r3, [pc, #272]	; (800c9a4 <__multiply+0x14c>)
 800c892:	4845      	ldr	r0, [pc, #276]	; (800c9a8 <__multiply+0x150>)
 800c894:	f240 115d 	movw	r1, #349	; 0x15d
 800c898:	f000 fc24 	bl	800d0e4 <__assert_func>
 800c89c:	f100 0514 	add.w	r5, r0, #20
 800c8a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4543      	cmp	r3, r8
 800c8aa:	d321      	bcc.n	800c8f0 <__multiply+0x98>
 800c8ac:	f104 0314 	add.w	r3, r4, #20
 800c8b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8b4:	f109 0314 	add.w	r3, r9, #20
 800c8b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c8bc:	9202      	str	r2, [sp, #8]
 800c8be:	1b3a      	subs	r2, r7, r4
 800c8c0:	3a15      	subs	r2, #21
 800c8c2:	f022 0203 	bic.w	r2, r2, #3
 800c8c6:	3204      	adds	r2, #4
 800c8c8:	f104 0115 	add.w	r1, r4, #21
 800c8cc:	428f      	cmp	r7, r1
 800c8ce:	bf38      	it	cc
 800c8d0:	2204      	movcc	r2, #4
 800c8d2:	9201      	str	r2, [sp, #4]
 800c8d4:	9a02      	ldr	r2, [sp, #8]
 800c8d6:	9303      	str	r3, [sp, #12]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d80c      	bhi.n	800c8f6 <__multiply+0x9e>
 800c8dc:	2e00      	cmp	r6, #0
 800c8de:	dd03      	ble.n	800c8e8 <__multiply+0x90>
 800c8e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d05a      	beq.n	800c99e <__multiply+0x146>
 800c8e8:	6106      	str	r6, [r0, #16]
 800c8ea:	b005      	add	sp, #20
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	f843 2b04 	str.w	r2, [r3], #4
 800c8f4:	e7d8      	b.n	800c8a8 <__multiply+0x50>
 800c8f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8fa:	f1ba 0f00 	cmp.w	sl, #0
 800c8fe:	d024      	beq.n	800c94a <__multiply+0xf2>
 800c900:	f104 0e14 	add.w	lr, r4, #20
 800c904:	46a9      	mov	r9, r5
 800c906:	f04f 0c00 	mov.w	ip, #0
 800c90a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c90e:	f8d9 1000 	ldr.w	r1, [r9]
 800c912:	fa1f fb82 	uxth.w	fp, r2
 800c916:	b289      	uxth	r1, r1
 800c918:	fb0a 110b 	mla	r1, sl, fp, r1
 800c91c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c920:	f8d9 2000 	ldr.w	r2, [r9]
 800c924:	4461      	add	r1, ip
 800c926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c92a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c92e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c932:	b289      	uxth	r1, r1
 800c934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c938:	4577      	cmp	r7, lr
 800c93a:	f849 1b04 	str.w	r1, [r9], #4
 800c93e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c942:	d8e2      	bhi.n	800c90a <__multiply+0xb2>
 800c944:	9a01      	ldr	r2, [sp, #4]
 800c946:	f845 c002 	str.w	ip, [r5, r2]
 800c94a:	9a03      	ldr	r2, [sp, #12]
 800c94c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c950:	3304      	adds	r3, #4
 800c952:	f1b9 0f00 	cmp.w	r9, #0
 800c956:	d020      	beq.n	800c99a <__multiply+0x142>
 800c958:	6829      	ldr	r1, [r5, #0]
 800c95a:	f104 0c14 	add.w	ip, r4, #20
 800c95e:	46ae      	mov	lr, r5
 800c960:	f04f 0a00 	mov.w	sl, #0
 800c964:	f8bc b000 	ldrh.w	fp, [ip]
 800c968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c96c:	fb09 220b 	mla	r2, r9, fp, r2
 800c970:	4492      	add	sl, r2
 800c972:	b289      	uxth	r1, r1
 800c974:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c978:	f84e 1b04 	str.w	r1, [lr], #4
 800c97c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c980:	f8be 1000 	ldrh.w	r1, [lr]
 800c984:	0c12      	lsrs	r2, r2, #16
 800c986:	fb09 1102 	mla	r1, r9, r2, r1
 800c98a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c98e:	4567      	cmp	r7, ip
 800c990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c994:	d8e6      	bhi.n	800c964 <__multiply+0x10c>
 800c996:	9a01      	ldr	r2, [sp, #4]
 800c998:	50a9      	str	r1, [r5, r2]
 800c99a:	3504      	adds	r5, #4
 800c99c:	e79a      	b.n	800c8d4 <__multiply+0x7c>
 800c99e:	3e01      	subs	r6, #1
 800c9a0:	e79c      	b.n	800c8dc <__multiply+0x84>
 800c9a2:	bf00      	nop
 800c9a4:	0800e584 	.word	0x0800e584
 800c9a8:	0800e595 	.word	0x0800e595

0800c9ac <__pow5mult>:
 800c9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b0:	4615      	mov	r5, r2
 800c9b2:	f012 0203 	ands.w	r2, r2, #3
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	d007      	beq.n	800c9cc <__pow5mult+0x20>
 800c9bc:	4c25      	ldr	r4, [pc, #148]	; (800ca54 <__pow5mult+0xa8>)
 800c9be:	3a01      	subs	r2, #1
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9c6:	f7ff fe9b 	bl	800c700 <__multadd>
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	10ad      	asrs	r5, r5, #2
 800c9ce:	d03d      	beq.n	800ca4c <__pow5mult+0xa0>
 800c9d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9d2:	b97c      	cbnz	r4, 800c9f4 <__pow5mult+0x48>
 800c9d4:	2010      	movs	r0, #16
 800c9d6:	f7ff fe1d 	bl	800c614 <malloc>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800c9de:	b928      	cbnz	r0, 800c9ec <__pow5mult+0x40>
 800c9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ca58 <__pow5mult+0xac>)
 800c9e2:	481e      	ldr	r0, [pc, #120]	; (800ca5c <__pow5mult+0xb0>)
 800c9e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9e8:	f000 fb7c 	bl	800d0e4 <__assert_func>
 800c9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9f0:	6004      	str	r4, [r0, #0]
 800c9f2:	60c4      	str	r4, [r0, #12]
 800c9f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9fc:	b94c      	cbnz	r4, 800ca12 <__pow5mult+0x66>
 800c9fe:	f240 2171 	movw	r1, #625	; 0x271
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7ff ff12 	bl	800c82c <__i2b>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca0e:	4604      	mov	r4, r0
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	f04f 0900 	mov.w	r9, #0
 800ca16:	07eb      	lsls	r3, r5, #31
 800ca18:	d50a      	bpl.n	800ca30 <__pow5mult+0x84>
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f7ff ff1a 	bl	800c858 <__multiply>
 800ca24:	4639      	mov	r1, r7
 800ca26:	4680      	mov	r8, r0
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff fe47 	bl	800c6bc <_Bfree>
 800ca2e:	4647      	mov	r7, r8
 800ca30:	106d      	asrs	r5, r5, #1
 800ca32:	d00b      	beq.n	800ca4c <__pow5mult+0xa0>
 800ca34:	6820      	ldr	r0, [r4, #0]
 800ca36:	b938      	cbnz	r0, 800ca48 <__pow5mult+0x9c>
 800ca38:	4622      	mov	r2, r4
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff ff0b 	bl	800c858 <__multiply>
 800ca42:	6020      	str	r0, [r4, #0]
 800ca44:	f8c0 9000 	str.w	r9, [r0]
 800ca48:	4604      	mov	r4, r0
 800ca4a:	e7e4      	b.n	800ca16 <__pow5mult+0x6a>
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca52:	bf00      	nop
 800ca54:	0800e6e8 	.word	0x0800e6e8
 800ca58:	0800e512 	.word	0x0800e512
 800ca5c:	0800e595 	.word	0x0800e595

0800ca60 <__lshift>:
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	460c      	mov	r4, r1
 800ca66:	6849      	ldr	r1, [r1, #4]
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca6e:	68a3      	ldr	r3, [r4, #8]
 800ca70:	4607      	mov	r7, r0
 800ca72:	4691      	mov	r9, r2
 800ca74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca78:	f108 0601 	add.w	r6, r8, #1
 800ca7c:	42b3      	cmp	r3, r6
 800ca7e:	db0b      	blt.n	800ca98 <__lshift+0x38>
 800ca80:	4638      	mov	r0, r7
 800ca82:	f7ff fddb 	bl	800c63c <_Balloc>
 800ca86:	4605      	mov	r5, r0
 800ca88:	b948      	cbnz	r0, 800ca9e <__lshift+0x3e>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b2a      	ldr	r3, [pc, #168]	; (800cb38 <__lshift+0xd8>)
 800ca8e:	482b      	ldr	r0, [pc, #172]	; (800cb3c <__lshift+0xdc>)
 800ca90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca94:	f000 fb26 	bl	800d0e4 <__assert_func>
 800ca98:	3101      	adds	r1, #1
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	e7ee      	b.n	800ca7c <__lshift+0x1c>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f100 0114 	add.w	r1, r0, #20
 800caa4:	f100 0210 	add.w	r2, r0, #16
 800caa8:	4618      	mov	r0, r3
 800caaa:	4553      	cmp	r3, sl
 800caac:	db37      	blt.n	800cb1e <__lshift+0xbe>
 800caae:	6920      	ldr	r0, [r4, #16]
 800cab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cab4:	f104 0314 	add.w	r3, r4, #20
 800cab8:	f019 091f 	ands.w	r9, r9, #31
 800cabc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cac4:	d02f      	beq.n	800cb26 <__lshift+0xc6>
 800cac6:	f1c9 0e20 	rsb	lr, r9, #32
 800caca:	468a      	mov	sl, r1
 800cacc:	f04f 0c00 	mov.w	ip, #0
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	fa02 f209 	lsl.w	r2, r2, r9
 800cad6:	ea42 020c 	orr.w	r2, r2, ip
 800cada:	f84a 2b04 	str.w	r2, [sl], #4
 800cade:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae2:	4298      	cmp	r0, r3
 800cae4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cae8:	d8f2      	bhi.n	800cad0 <__lshift+0x70>
 800caea:	1b03      	subs	r3, r0, r4
 800caec:	3b15      	subs	r3, #21
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	3304      	adds	r3, #4
 800caf4:	f104 0215 	add.w	r2, r4, #21
 800caf8:	4290      	cmp	r0, r2
 800cafa:	bf38      	it	cc
 800cafc:	2304      	movcc	r3, #4
 800cafe:	f841 c003 	str.w	ip, [r1, r3]
 800cb02:	f1bc 0f00 	cmp.w	ip, #0
 800cb06:	d001      	beq.n	800cb0c <__lshift+0xac>
 800cb08:	f108 0602 	add.w	r6, r8, #2
 800cb0c:	3e01      	subs	r6, #1
 800cb0e:	4638      	mov	r0, r7
 800cb10:	612e      	str	r6, [r5, #16]
 800cb12:	4621      	mov	r1, r4
 800cb14:	f7ff fdd2 	bl	800c6bc <_Bfree>
 800cb18:	4628      	mov	r0, r5
 800cb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb22:	3301      	adds	r3, #1
 800cb24:	e7c1      	b.n	800caaa <__lshift+0x4a>
 800cb26:	3904      	subs	r1, #4
 800cb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb30:	4298      	cmp	r0, r3
 800cb32:	d8f9      	bhi.n	800cb28 <__lshift+0xc8>
 800cb34:	e7ea      	b.n	800cb0c <__lshift+0xac>
 800cb36:	bf00      	nop
 800cb38:	0800e584 	.word	0x0800e584
 800cb3c:	0800e595 	.word	0x0800e595

0800cb40 <__mcmp>:
 800cb40:	b530      	push	{r4, r5, lr}
 800cb42:	6902      	ldr	r2, [r0, #16]
 800cb44:	690c      	ldr	r4, [r1, #16]
 800cb46:	1b12      	subs	r2, r2, r4
 800cb48:	d10e      	bne.n	800cb68 <__mcmp+0x28>
 800cb4a:	f100 0314 	add.w	r3, r0, #20
 800cb4e:	3114      	adds	r1, #20
 800cb50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb60:	42a5      	cmp	r5, r4
 800cb62:	d003      	beq.n	800cb6c <__mcmp+0x2c>
 800cb64:	d305      	bcc.n	800cb72 <__mcmp+0x32>
 800cb66:	2201      	movs	r2, #1
 800cb68:	4610      	mov	r0, r2
 800cb6a:	bd30      	pop	{r4, r5, pc}
 800cb6c:	4283      	cmp	r3, r0
 800cb6e:	d3f3      	bcc.n	800cb58 <__mcmp+0x18>
 800cb70:	e7fa      	b.n	800cb68 <__mcmp+0x28>
 800cb72:	f04f 32ff 	mov.w	r2, #4294967295
 800cb76:	e7f7      	b.n	800cb68 <__mcmp+0x28>

0800cb78 <__mdiff>:
 800cb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	4606      	mov	r6, r0
 800cb80:	4611      	mov	r1, r2
 800cb82:	4620      	mov	r0, r4
 800cb84:	4690      	mov	r8, r2
 800cb86:	f7ff ffdb 	bl	800cb40 <__mcmp>
 800cb8a:	1e05      	subs	r5, r0, #0
 800cb8c:	d110      	bne.n	800cbb0 <__mdiff+0x38>
 800cb8e:	4629      	mov	r1, r5
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7ff fd53 	bl	800c63c <_Balloc>
 800cb96:	b930      	cbnz	r0, 800cba6 <__mdiff+0x2e>
 800cb98:	4b3a      	ldr	r3, [pc, #232]	; (800cc84 <__mdiff+0x10c>)
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	f240 2132 	movw	r1, #562	; 0x232
 800cba0:	4839      	ldr	r0, [pc, #228]	; (800cc88 <__mdiff+0x110>)
 800cba2:	f000 fa9f 	bl	800d0e4 <__assert_func>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb0:	bfa4      	itt	ge
 800cbb2:	4643      	movge	r3, r8
 800cbb4:	46a0      	movge	r8, r4
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbbc:	bfa6      	itte	ge
 800cbbe:	461c      	movge	r4, r3
 800cbc0:	2500      	movge	r5, #0
 800cbc2:	2501      	movlt	r5, #1
 800cbc4:	f7ff fd3a 	bl	800c63c <_Balloc>
 800cbc8:	b920      	cbnz	r0, 800cbd4 <__mdiff+0x5c>
 800cbca:	4b2e      	ldr	r3, [pc, #184]	; (800cc84 <__mdiff+0x10c>)
 800cbcc:	4602      	mov	r2, r0
 800cbce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbd2:	e7e5      	b.n	800cba0 <__mdiff+0x28>
 800cbd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbd8:	6926      	ldr	r6, [r4, #16]
 800cbda:	60c5      	str	r5, [r0, #12]
 800cbdc:	f104 0914 	add.w	r9, r4, #20
 800cbe0:	f108 0514 	add.w	r5, r8, #20
 800cbe4:	f100 0e14 	add.w	lr, r0, #20
 800cbe8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cbec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbf0:	f108 0210 	add.w	r2, r8, #16
 800cbf4:	46f2      	mov	sl, lr
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc00:	fa1f f883 	uxth.w	r8, r3
 800cc04:	fa11 f18b 	uxtah	r1, r1, fp
 800cc08:	0c1b      	lsrs	r3, r3, #16
 800cc0a:	eba1 0808 	sub.w	r8, r1, r8
 800cc0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc16:	fa1f f888 	uxth.w	r8, r8
 800cc1a:	1419      	asrs	r1, r3, #16
 800cc1c:	454e      	cmp	r6, r9
 800cc1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc22:	f84a 3b04 	str.w	r3, [sl], #4
 800cc26:	d8e7      	bhi.n	800cbf8 <__mdiff+0x80>
 800cc28:	1b33      	subs	r3, r6, r4
 800cc2a:	3b15      	subs	r3, #21
 800cc2c:	f023 0303 	bic.w	r3, r3, #3
 800cc30:	3304      	adds	r3, #4
 800cc32:	3415      	adds	r4, #21
 800cc34:	42a6      	cmp	r6, r4
 800cc36:	bf38      	it	cc
 800cc38:	2304      	movcc	r3, #4
 800cc3a:	441d      	add	r5, r3
 800cc3c:	4473      	add	r3, lr
 800cc3e:	469e      	mov	lr, r3
 800cc40:	462e      	mov	r6, r5
 800cc42:	4566      	cmp	r6, ip
 800cc44:	d30e      	bcc.n	800cc64 <__mdiff+0xec>
 800cc46:	f10c 0203 	add.w	r2, ip, #3
 800cc4a:	1b52      	subs	r2, r2, r5
 800cc4c:	f022 0203 	bic.w	r2, r2, #3
 800cc50:	3d03      	subs	r5, #3
 800cc52:	45ac      	cmp	ip, r5
 800cc54:	bf38      	it	cc
 800cc56:	2200      	movcc	r2, #0
 800cc58:	441a      	add	r2, r3
 800cc5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc5e:	b17b      	cbz	r3, 800cc80 <__mdiff+0x108>
 800cc60:	6107      	str	r7, [r0, #16]
 800cc62:	e7a3      	b.n	800cbac <__mdiff+0x34>
 800cc64:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc68:	fa11 f288 	uxtah	r2, r1, r8
 800cc6c:	1414      	asrs	r4, r2, #16
 800cc6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc72:	b292      	uxth	r2, r2
 800cc74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc78:	f84e 2b04 	str.w	r2, [lr], #4
 800cc7c:	1421      	asrs	r1, r4, #16
 800cc7e:	e7e0      	b.n	800cc42 <__mdiff+0xca>
 800cc80:	3f01      	subs	r7, #1
 800cc82:	e7ea      	b.n	800cc5a <__mdiff+0xe2>
 800cc84:	0800e584 	.word	0x0800e584
 800cc88:	0800e595 	.word	0x0800e595

0800cc8c <__d2b>:
 800cc8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc90:	4689      	mov	r9, r1
 800cc92:	2101      	movs	r1, #1
 800cc94:	ec57 6b10 	vmov	r6, r7, d0
 800cc98:	4690      	mov	r8, r2
 800cc9a:	f7ff fccf 	bl	800c63c <_Balloc>
 800cc9e:	4604      	mov	r4, r0
 800cca0:	b930      	cbnz	r0, 800ccb0 <__d2b+0x24>
 800cca2:	4602      	mov	r2, r0
 800cca4:	4b25      	ldr	r3, [pc, #148]	; (800cd3c <__d2b+0xb0>)
 800cca6:	4826      	ldr	r0, [pc, #152]	; (800cd40 <__d2b+0xb4>)
 800cca8:	f240 310a 	movw	r1, #778	; 0x30a
 800ccac:	f000 fa1a 	bl	800d0e4 <__assert_func>
 800ccb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ccb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccb8:	bb35      	cbnz	r5, 800cd08 <__d2b+0x7c>
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	d028      	beq.n	800cd12 <__d2b+0x86>
 800ccc0:	4668      	mov	r0, sp
 800ccc2:	9600      	str	r6, [sp, #0]
 800ccc4:	f7ff fd82 	bl	800c7cc <__lo0bits>
 800ccc8:	9900      	ldr	r1, [sp, #0]
 800ccca:	b300      	cbz	r0, 800cd0e <__d2b+0x82>
 800cccc:	9a01      	ldr	r2, [sp, #4]
 800ccce:	f1c0 0320 	rsb	r3, r0, #32
 800ccd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd6:	430b      	orrs	r3, r1
 800ccd8:	40c2      	lsrs	r2, r0
 800ccda:	6163      	str	r3, [r4, #20]
 800ccdc:	9201      	str	r2, [sp, #4]
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	61a3      	str	r3, [r4, #24]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bf14      	ite	ne
 800cce6:	2202      	movne	r2, #2
 800cce8:	2201      	moveq	r2, #1
 800ccea:	6122      	str	r2, [r4, #16]
 800ccec:	b1d5      	cbz	r5, 800cd24 <__d2b+0x98>
 800ccee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccf2:	4405      	add	r5, r0
 800ccf4:	f8c9 5000 	str.w	r5, [r9]
 800ccf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccfc:	f8c8 0000 	str.w	r0, [r8]
 800cd00:	4620      	mov	r0, r4
 800cd02:	b003      	add	sp, #12
 800cd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd0c:	e7d5      	b.n	800ccba <__d2b+0x2e>
 800cd0e:	6161      	str	r1, [r4, #20]
 800cd10:	e7e5      	b.n	800ccde <__d2b+0x52>
 800cd12:	a801      	add	r0, sp, #4
 800cd14:	f7ff fd5a 	bl	800c7cc <__lo0bits>
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	6163      	str	r3, [r4, #20]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	6122      	str	r2, [r4, #16]
 800cd20:	3020      	adds	r0, #32
 800cd22:	e7e3      	b.n	800ccec <__d2b+0x60>
 800cd24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd2c:	f8c9 0000 	str.w	r0, [r9]
 800cd30:	6918      	ldr	r0, [r3, #16]
 800cd32:	f7ff fd2b 	bl	800c78c <__hi0bits>
 800cd36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd3a:	e7df      	b.n	800ccfc <__d2b+0x70>
 800cd3c:	0800e584 	.word	0x0800e584
 800cd40:	0800e595 	.word	0x0800e595

0800cd44 <_calloc_r>:
 800cd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd46:	fba1 2402 	umull	r2, r4, r1, r2
 800cd4a:	b94c      	cbnz	r4, 800cd60 <_calloc_r+0x1c>
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	9201      	str	r2, [sp, #4]
 800cd50:	f7fd fea4 	bl	800aa9c <_malloc_r>
 800cd54:	9a01      	ldr	r2, [sp, #4]
 800cd56:	4605      	mov	r5, r0
 800cd58:	b930      	cbnz	r0, 800cd68 <_calloc_r+0x24>
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	220c      	movs	r2, #12
 800cd62:	6002      	str	r2, [r0, #0]
 800cd64:	2500      	movs	r5, #0
 800cd66:	e7f8      	b.n	800cd5a <_calloc_r+0x16>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f7fd fe6e 	bl	800aa4a <memset>
 800cd6e:	e7f4      	b.n	800cd5a <_calloc_r+0x16>

0800cd70 <_free_r>:
 800cd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd72:	2900      	cmp	r1, #0
 800cd74:	d044      	beq.n	800ce00 <_free_r+0x90>
 800cd76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd7a:	9001      	str	r0, [sp, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd82:	bfb8      	it	lt
 800cd84:	18e4      	addlt	r4, r4, r3
 800cd86:	f7ff fc4d 	bl	800c624 <__malloc_lock>
 800cd8a:	4a1e      	ldr	r2, [pc, #120]	; (800ce04 <_free_r+0x94>)
 800cd8c:	9801      	ldr	r0, [sp, #4]
 800cd8e:	6813      	ldr	r3, [r2, #0]
 800cd90:	b933      	cbnz	r3, 800cda0 <_free_r+0x30>
 800cd92:	6063      	str	r3, [r4, #4]
 800cd94:	6014      	str	r4, [r2, #0]
 800cd96:	b003      	add	sp, #12
 800cd98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd9c:	f7ff bc48 	b.w	800c630 <__malloc_unlock>
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	d908      	bls.n	800cdb6 <_free_r+0x46>
 800cda4:	6825      	ldr	r5, [r4, #0]
 800cda6:	1961      	adds	r1, r4, r5
 800cda8:	428b      	cmp	r3, r1
 800cdaa:	bf01      	itttt	eq
 800cdac:	6819      	ldreq	r1, [r3, #0]
 800cdae:	685b      	ldreq	r3, [r3, #4]
 800cdb0:	1949      	addeq	r1, r1, r5
 800cdb2:	6021      	streq	r1, [r4, #0]
 800cdb4:	e7ed      	b.n	800cd92 <_free_r+0x22>
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	b10b      	cbz	r3, 800cdc0 <_free_r+0x50>
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	d9fa      	bls.n	800cdb6 <_free_r+0x46>
 800cdc0:	6811      	ldr	r1, [r2, #0]
 800cdc2:	1855      	adds	r5, r2, r1
 800cdc4:	42a5      	cmp	r5, r4
 800cdc6:	d10b      	bne.n	800cde0 <_free_r+0x70>
 800cdc8:	6824      	ldr	r4, [r4, #0]
 800cdca:	4421      	add	r1, r4
 800cdcc:	1854      	adds	r4, r2, r1
 800cdce:	42a3      	cmp	r3, r4
 800cdd0:	6011      	str	r1, [r2, #0]
 800cdd2:	d1e0      	bne.n	800cd96 <_free_r+0x26>
 800cdd4:	681c      	ldr	r4, [r3, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	6053      	str	r3, [r2, #4]
 800cdda:	4421      	add	r1, r4
 800cddc:	6011      	str	r1, [r2, #0]
 800cdde:	e7da      	b.n	800cd96 <_free_r+0x26>
 800cde0:	d902      	bls.n	800cde8 <_free_r+0x78>
 800cde2:	230c      	movs	r3, #12
 800cde4:	6003      	str	r3, [r0, #0]
 800cde6:	e7d6      	b.n	800cd96 <_free_r+0x26>
 800cde8:	6825      	ldr	r5, [r4, #0]
 800cdea:	1961      	adds	r1, r4, r5
 800cdec:	428b      	cmp	r3, r1
 800cdee:	bf04      	itt	eq
 800cdf0:	6819      	ldreq	r1, [r3, #0]
 800cdf2:	685b      	ldreq	r3, [r3, #4]
 800cdf4:	6063      	str	r3, [r4, #4]
 800cdf6:	bf04      	itt	eq
 800cdf8:	1949      	addeq	r1, r1, r5
 800cdfa:	6021      	streq	r1, [r4, #0]
 800cdfc:	6054      	str	r4, [r2, #4]
 800cdfe:	e7ca      	b.n	800cd96 <_free_r+0x26>
 800ce00:	b003      	add	sp, #12
 800ce02:	bd30      	pop	{r4, r5, pc}
 800ce04:	200053dc 	.word	0x200053dc

0800ce08 <__ssputs_r>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	688e      	ldr	r6, [r1, #8]
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	4682      	mov	sl, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	4690      	mov	r8, r2
 800ce16:	461f      	mov	r7, r3
 800ce18:	d838      	bhi.n	800ce8c <__ssputs_r+0x84>
 800ce1a:	898a      	ldrh	r2, [r1, #12]
 800ce1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce20:	d032      	beq.n	800ce88 <__ssputs_r+0x80>
 800ce22:	6825      	ldr	r5, [r4, #0]
 800ce24:	6909      	ldr	r1, [r1, #16]
 800ce26:	eba5 0901 	sub.w	r9, r5, r1
 800ce2a:	6965      	ldr	r5, [r4, #20]
 800ce2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce34:	3301      	adds	r3, #1
 800ce36:	444b      	add	r3, r9
 800ce38:	106d      	asrs	r5, r5, #1
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	bf38      	it	cc
 800ce3e:	461d      	movcc	r5, r3
 800ce40:	0553      	lsls	r3, r2, #21
 800ce42:	d531      	bpl.n	800cea8 <__ssputs_r+0xa0>
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7fd fe29 	bl	800aa9c <_malloc_r>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b950      	cbnz	r0, 800ce64 <__ssputs_r+0x5c>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	f8ca 3000 	str.w	r3, [sl]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce64:	6921      	ldr	r1, [r4, #16]
 800ce66:	464a      	mov	r2, r9
 800ce68:	f7fd fde1 	bl	800aa2e <memcpy>
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	6126      	str	r6, [r4, #16]
 800ce7a:	6165      	str	r5, [r4, #20]
 800ce7c:	444e      	add	r6, r9
 800ce7e:	eba5 0509 	sub.w	r5, r5, r9
 800ce82:	6026      	str	r6, [r4, #0]
 800ce84:	60a5      	str	r5, [r4, #8]
 800ce86:	463e      	mov	r6, r7
 800ce88:	42be      	cmp	r6, r7
 800ce8a:	d900      	bls.n	800ce8e <__ssputs_r+0x86>
 800ce8c:	463e      	mov	r6, r7
 800ce8e:	6820      	ldr	r0, [r4, #0]
 800ce90:	4632      	mov	r2, r6
 800ce92:	4641      	mov	r1, r8
 800ce94:	f000 f968 	bl	800d168 <memmove>
 800ce98:	68a3      	ldr	r3, [r4, #8]
 800ce9a:	1b9b      	subs	r3, r3, r6
 800ce9c:	60a3      	str	r3, [r4, #8]
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	4433      	add	r3, r6
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	2000      	movs	r0, #0
 800cea6:	e7db      	b.n	800ce60 <__ssputs_r+0x58>
 800cea8:	462a      	mov	r2, r5
 800ceaa:	f000 f977 	bl	800d19c <_realloc_r>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d1e1      	bne.n	800ce78 <__ssputs_r+0x70>
 800ceb4:	6921      	ldr	r1, [r4, #16]
 800ceb6:	4650      	mov	r0, sl
 800ceb8:	f7ff ff5a 	bl	800cd70 <_free_r>
 800cebc:	e7c7      	b.n	800ce4e <__ssputs_r+0x46>
	...

0800cec0 <_svfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	898b      	ldrh	r3, [r1, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	b09d      	sub	sp, #116	; 0x74
 800cecc:	4607      	mov	r7, r0
 800cece:	460d      	mov	r5, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	d50e      	bpl.n	800cef2 <_svfiprintf_r+0x32>
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	b963      	cbnz	r3, 800cef2 <_svfiprintf_r+0x32>
 800ced8:	2140      	movs	r1, #64	; 0x40
 800ceda:	f7fd fddf 	bl	800aa9c <_malloc_r>
 800cede:	6028      	str	r0, [r5, #0]
 800cee0:	6128      	str	r0, [r5, #16]
 800cee2:	b920      	cbnz	r0, 800ceee <_svfiprintf_r+0x2e>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceec:	e0d1      	b.n	800d092 <_svfiprintf_r+0x1d2>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	616b      	str	r3, [r5, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	9309      	str	r3, [sp, #36]	; 0x24
 800cef6:	2320      	movs	r3, #32
 800cef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf00:	2330      	movs	r3, #48	; 0x30
 800cf02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0ac <_svfiprintf_r+0x1ec>
 800cf06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf0a:	f04f 0901 	mov.w	r9, #1
 800cf0e:	4623      	mov	r3, r4
 800cf10:	469a      	mov	sl, r3
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	b10a      	cbz	r2, 800cf1c <_svfiprintf_r+0x5c>
 800cf18:	2a25      	cmp	r2, #37	; 0x25
 800cf1a:	d1f9      	bne.n	800cf10 <_svfiprintf_r+0x50>
 800cf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf20:	d00b      	beq.n	800cf3a <_svfiprintf_r+0x7a>
 800cf22:	465b      	mov	r3, fp
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff6d 	bl	800ce08 <__ssputs_r>
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f000 80aa 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf36:	445a      	add	r2, fp
 800cf38:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 80a2 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4e:	f10a 0a01 	add.w	sl, sl, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	4851      	ldr	r0, [pc, #324]	; (800d0ac <_svfiprintf_r+0x1ec>)
 800cf66:	f7f3 f93b 	bl	80001e0 <memchr>
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xe6>
 800cf6e:	06d0      	lsls	r0, r2, #27
 800cf70:	bf44      	itt	mi
 800cf72:	2320      	movmi	r3, #32
 800cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf78:	0711      	lsls	r1, r2, #28
 800cf7a:	bf44      	itt	mi
 800cf7c:	232b      	movmi	r3, #43	; 0x2b
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b2a      	cmp	r3, #42	; 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xf6>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4654      	mov	r4, sl
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4621      	mov	r1, r4
 800cf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9a:	3b30      	subs	r3, #48	; 0x30
 800cf9c:	2b09      	cmp	r3, #9
 800cf9e:	d94e      	bls.n	800d03e <_svfiprintf_r+0x17e>
 800cfa0:	b1b0      	cbz	r0, 800cfd0 <_svfiprintf_r+0x110>
 800cfa2:	9207      	str	r2, [sp, #28]
 800cfa4:	e014      	b.n	800cfd0 <_svfiprintf_r+0x110>
 800cfa6:	eba0 0308 	sub.w	r3, r0, r8
 800cfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	46a2      	mov	sl, r4
 800cfb4:	e7d2      	b.n	800cf5c <_svfiprintf_r+0x9c>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d19      	adds	r1, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	425b      	neglt	r3, r3
 800cfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc8:	9307      	strge	r3, [sp, #28]
 800cfca:	9307      	strlt	r3, [sp, #28]
 800cfcc:	bfb8      	it	lt
 800cfce:	9204      	strlt	r2, [sp, #16]
 800cfd0:	7823      	ldrb	r3, [r4, #0]
 800cfd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd4:	d10c      	bne.n	800cff0 <_svfiprintf_r+0x130>
 800cfd6:	7863      	ldrb	r3, [r4, #1]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d135      	bne.n	800d048 <_svfiprintf_r+0x188>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfec:	3402      	adds	r4, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0bc <_svfiprintf_r+0x1fc>
 800cff4:	7821      	ldrb	r1, [r4, #0]
 800cff6:	2203      	movs	r2, #3
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7f3 f8f1 	bl	80001e0 <memchr>
 800cffe:	b140      	cbz	r0, 800d012 <_svfiprintf_r+0x152>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	fa03 f000 	lsl.w	r0, r3, r0
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	4303      	orrs	r3, r0
 800d00e:	3401      	adds	r4, #1
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d016:	4826      	ldr	r0, [pc, #152]	; (800d0b0 <_svfiprintf_r+0x1f0>)
 800d018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d01c:	2206      	movs	r2, #6
 800d01e:	f7f3 f8df 	bl	80001e0 <memchr>
 800d022:	2800      	cmp	r0, #0
 800d024:	d038      	beq.n	800d098 <_svfiprintf_r+0x1d8>
 800d026:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <_svfiprintf_r+0x1f4>)
 800d028:	bb1b      	cbnz	r3, 800d072 <_svfiprintf_r+0x1b2>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	3307      	adds	r3, #7
 800d02e:	f023 0307 	bic.w	r3, r3, #7
 800d032:	3308      	adds	r3, #8
 800d034:	9303      	str	r3, [sp, #12]
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	4433      	add	r3, r6
 800d03a:	9309      	str	r3, [sp, #36]	; 0x24
 800d03c:	e767      	b.n	800cf0e <_svfiprintf_r+0x4e>
 800d03e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d042:	460c      	mov	r4, r1
 800d044:	2001      	movs	r0, #1
 800d046:	e7a5      	b.n	800cf94 <_svfiprintf_r+0xd4>
 800d048:	2300      	movs	r3, #0
 800d04a:	3401      	adds	r4, #1
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	4619      	mov	r1, r3
 800d050:	f04f 0c0a 	mov.w	ip, #10
 800d054:	4620      	mov	r0, r4
 800d056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d05a:	3a30      	subs	r2, #48	; 0x30
 800d05c:	2a09      	cmp	r2, #9
 800d05e:	d903      	bls.n	800d068 <_svfiprintf_r+0x1a8>
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0c5      	beq.n	800cff0 <_svfiprintf_r+0x130>
 800d064:	9105      	str	r1, [sp, #20]
 800d066:	e7c3      	b.n	800cff0 <_svfiprintf_r+0x130>
 800d068:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06c:	4604      	mov	r4, r0
 800d06e:	2301      	movs	r3, #1
 800d070:	e7f0      	b.n	800d054 <_svfiprintf_r+0x194>
 800d072:	ab03      	add	r3, sp, #12
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	462a      	mov	r2, r5
 800d078:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d07a:	a904      	add	r1, sp, #16
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7fd fe21 	bl	800acc4 <_printf_float>
 800d082:	1c42      	adds	r2, r0, #1
 800d084:	4606      	mov	r6, r0
 800d086:	d1d6      	bne.n	800d036 <_svfiprintf_r+0x176>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	065b      	lsls	r3, r3, #25
 800d08c:	f53f af2c 	bmi.w	800cee8 <_svfiprintf_r+0x28>
 800d090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d092:	b01d      	add	sp, #116	; 0x74
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	ab03      	add	r3, sp, #12
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d0a0:	a904      	add	r1, sp, #16
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7fe f8b2 	bl	800b20c <_printf_i>
 800d0a8:	e7eb      	b.n	800d082 <_svfiprintf_r+0x1c2>
 800d0aa:	bf00      	nop
 800d0ac:	0800e6f4 	.word	0x0800e6f4
 800d0b0:	0800e6fe 	.word	0x0800e6fe
 800d0b4:	0800acc5 	.word	0x0800acc5
 800d0b8:	0800ce09 	.word	0x0800ce09
 800d0bc:	0800e6fa 	.word	0x0800e6fa

0800d0c0 <_read_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	; (800d0e0 <_read_r+0x20>)
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	4608      	mov	r0, r1
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	602a      	str	r2, [r5, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f7f5 feae 	bl	8002e30 <_read>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	d102      	bne.n	800d0de <_read_r+0x1e>
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	b103      	cbz	r3, 800d0de <_read_r+0x1e>
 800d0dc:	6023      	str	r3, [r4, #0]
 800d0de:	bd38      	pop	{r3, r4, r5, pc}
 800d0e0:	200053e4 	.word	0x200053e4

0800d0e4 <__assert_func>:
 800d0e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0e6:	4614      	mov	r4, r2
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <__assert_func+0x2c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	68d8      	ldr	r0, [r3, #12]
 800d0f2:	b14c      	cbz	r4, 800d108 <__assert_func+0x24>
 800d0f4:	4b07      	ldr	r3, [pc, #28]	; (800d114 <__assert_func+0x30>)
 800d0f6:	9100      	str	r1, [sp, #0]
 800d0f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0fc:	4906      	ldr	r1, [pc, #24]	; (800d118 <__assert_func+0x34>)
 800d0fe:	462b      	mov	r3, r5
 800d100:	f000 f80e 	bl	800d120 <fiprintf>
 800d104:	f000 faa0 	bl	800d648 <abort>
 800d108:	4b04      	ldr	r3, [pc, #16]	; (800d11c <__assert_func+0x38>)
 800d10a:	461c      	mov	r4, r3
 800d10c:	e7f3      	b.n	800d0f6 <__assert_func+0x12>
 800d10e:	bf00      	nop
 800d110:	20000034 	.word	0x20000034
 800d114:	0800e705 	.word	0x0800e705
 800d118:	0800e712 	.word	0x0800e712
 800d11c:	0800e740 	.word	0x0800e740

0800d120 <fiprintf>:
 800d120:	b40e      	push	{r1, r2, r3}
 800d122:	b503      	push	{r0, r1, lr}
 800d124:	4601      	mov	r1, r0
 800d126:	ab03      	add	r3, sp, #12
 800d128:	4805      	ldr	r0, [pc, #20]	; (800d140 <fiprintf+0x20>)
 800d12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12e:	6800      	ldr	r0, [r0, #0]
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	f000 f88b 	bl	800d24c <_vfiprintf_r>
 800d136:	b002      	add	sp, #8
 800d138:	f85d eb04 	ldr.w	lr, [sp], #4
 800d13c:	b003      	add	sp, #12
 800d13e:	4770      	bx	lr
 800d140:	20000034 	.word	0x20000034

0800d144 <__ascii_mbtowc>:
 800d144:	b082      	sub	sp, #8
 800d146:	b901      	cbnz	r1, 800d14a <__ascii_mbtowc+0x6>
 800d148:	a901      	add	r1, sp, #4
 800d14a:	b142      	cbz	r2, 800d15e <__ascii_mbtowc+0x1a>
 800d14c:	b14b      	cbz	r3, 800d162 <__ascii_mbtowc+0x1e>
 800d14e:	7813      	ldrb	r3, [r2, #0]
 800d150:	600b      	str	r3, [r1, #0]
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	1e10      	subs	r0, r2, #0
 800d156:	bf18      	it	ne
 800d158:	2001      	movne	r0, #1
 800d15a:	b002      	add	sp, #8
 800d15c:	4770      	bx	lr
 800d15e:	4610      	mov	r0, r2
 800d160:	e7fb      	b.n	800d15a <__ascii_mbtowc+0x16>
 800d162:	f06f 0001 	mvn.w	r0, #1
 800d166:	e7f8      	b.n	800d15a <__ascii_mbtowc+0x16>

0800d168 <memmove>:
 800d168:	4288      	cmp	r0, r1
 800d16a:	b510      	push	{r4, lr}
 800d16c:	eb01 0402 	add.w	r4, r1, r2
 800d170:	d902      	bls.n	800d178 <memmove+0x10>
 800d172:	4284      	cmp	r4, r0
 800d174:	4623      	mov	r3, r4
 800d176:	d807      	bhi.n	800d188 <memmove+0x20>
 800d178:	1e43      	subs	r3, r0, #1
 800d17a:	42a1      	cmp	r1, r4
 800d17c:	d008      	beq.n	800d190 <memmove+0x28>
 800d17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d186:	e7f8      	b.n	800d17a <memmove+0x12>
 800d188:	4402      	add	r2, r0
 800d18a:	4601      	mov	r1, r0
 800d18c:	428a      	cmp	r2, r1
 800d18e:	d100      	bne.n	800d192 <memmove+0x2a>
 800d190:	bd10      	pop	{r4, pc}
 800d192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d19a:	e7f7      	b.n	800d18c <memmove+0x24>

0800d19c <_realloc_r>:
 800d19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4614      	mov	r4, r2
 800d1a4:	460e      	mov	r6, r1
 800d1a6:	b921      	cbnz	r1, 800d1b2 <_realloc_r+0x16>
 800d1a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	f7fd bc75 	b.w	800aa9c <_malloc_r>
 800d1b2:	b92a      	cbnz	r2, 800d1c0 <_realloc_r+0x24>
 800d1b4:	f7ff fddc 	bl	800cd70 <_free_r>
 800d1b8:	4625      	mov	r5, r4
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c0:	f000 faae 	bl	800d720 <_malloc_usable_size_r>
 800d1c4:	4284      	cmp	r4, r0
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	d802      	bhi.n	800d1d0 <_realloc_r+0x34>
 800d1ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1ce:	d812      	bhi.n	800d1f6 <_realloc_r+0x5a>
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	f7fd fc62 	bl	800aa9c <_malloc_r>
 800d1d8:	4605      	mov	r5, r0
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d0ed      	beq.n	800d1ba <_realloc_r+0x1e>
 800d1de:	42bc      	cmp	r4, r7
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	bf28      	it	cs
 800d1e6:	463a      	movcs	r2, r7
 800d1e8:	f7fd fc21 	bl	800aa2e <memcpy>
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	f7ff fdbe 	bl	800cd70 <_free_r>
 800d1f4:	e7e1      	b.n	800d1ba <_realloc_r+0x1e>
 800d1f6:	4635      	mov	r5, r6
 800d1f8:	e7df      	b.n	800d1ba <_realloc_r+0x1e>

0800d1fa <__sfputc_r>:
 800d1fa:	6893      	ldr	r3, [r2, #8]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	b410      	push	{r4}
 800d202:	6093      	str	r3, [r2, #8]
 800d204:	da08      	bge.n	800d218 <__sfputc_r+0x1e>
 800d206:	6994      	ldr	r4, [r2, #24]
 800d208:	42a3      	cmp	r3, r4
 800d20a:	db01      	blt.n	800d210 <__sfputc_r+0x16>
 800d20c:	290a      	cmp	r1, #10
 800d20e:	d103      	bne.n	800d218 <__sfputc_r+0x1e>
 800d210:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d214:	f000 b94a 	b.w	800d4ac <__swbuf_r>
 800d218:	6813      	ldr	r3, [r2, #0]
 800d21a:	1c58      	adds	r0, r3, #1
 800d21c:	6010      	str	r0, [r2, #0]
 800d21e:	7019      	strb	r1, [r3, #0]
 800d220:	4608      	mov	r0, r1
 800d222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <__sfputs_r>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	4614      	mov	r4, r2
 800d230:	18d5      	adds	r5, r2, r3
 800d232:	42ac      	cmp	r4, r5
 800d234:	d101      	bne.n	800d23a <__sfputs_r+0x12>
 800d236:	2000      	movs	r0, #0
 800d238:	e007      	b.n	800d24a <__sfputs_r+0x22>
 800d23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d23e:	463a      	mov	r2, r7
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff ffda 	bl	800d1fa <__sfputc_r>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d1f3      	bne.n	800d232 <__sfputs_r+0xa>
 800d24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d24c <_vfiprintf_r>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	460d      	mov	r5, r1
 800d252:	b09d      	sub	sp, #116	; 0x74
 800d254:	4614      	mov	r4, r2
 800d256:	4698      	mov	r8, r3
 800d258:	4606      	mov	r6, r0
 800d25a:	b118      	cbz	r0, 800d264 <_vfiprintf_r+0x18>
 800d25c:	6983      	ldr	r3, [r0, #24]
 800d25e:	b90b      	cbnz	r3, 800d264 <_vfiprintf_r+0x18>
 800d260:	f7fd fb20 	bl	800a8a4 <__sinit>
 800d264:	4b89      	ldr	r3, [pc, #548]	; (800d48c <_vfiprintf_r+0x240>)
 800d266:	429d      	cmp	r5, r3
 800d268:	d11b      	bne.n	800d2a2 <_vfiprintf_r+0x56>
 800d26a:	6875      	ldr	r5, [r6, #4]
 800d26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d26e:	07d9      	lsls	r1, r3, #31
 800d270:	d405      	bmi.n	800d27e <_vfiprintf_r+0x32>
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	059a      	lsls	r2, r3, #22
 800d276:	d402      	bmi.n	800d27e <_vfiprintf_r+0x32>
 800d278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d27a:	f7fd fbd6 	bl	800aa2a <__retarget_lock_acquire_recursive>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	071b      	lsls	r3, r3, #28
 800d282:	d501      	bpl.n	800d288 <_vfiprintf_r+0x3c>
 800d284:	692b      	ldr	r3, [r5, #16]
 800d286:	b9eb      	cbnz	r3, 800d2c4 <_vfiprintf_r+0x78>
 800d288:	4629      	mov	r1, r5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f000 f96e 	bl	800d56c <__swsetup_r>
 800d290:	b1c0      	cbz	r0, 800d2c4 <_vfiprintf_r+0x78>
 800d292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d294:	07dc      	lsls	r4, r3, #31
 800d296:	d50e      	bpl.n	800d2b6 <_vfiprintf_r+0x6a>
 800d298:	f04f 30ff 	mov.w	r0, #4294967295
 800d29c:	b01d      	add	sp, #116	; 0x74
 800d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a2:	4b7b      	ldr	r3, [pc, #492]	; (800d490 <_vfiprintf_r+0x244>)
 800d2a4:	429d      	cmp	r5, r3
 800d2a6:	d101      	bne.n	800d2ac <_vfiprintf_r+0x60>
 800d2a8:	68b5      	ldr	r5, [r6, #8]
 800d2aa:	e7df      	b.n	800d26c <_vfiprintf_r+0x20>
 800d2ac:	4b79      	ldr	r3, [pc, #484]	; (800d494 <_vfiprintf_r+0x248>)
 800d2ae:	429d      	cmp	r5, r3
 800d2b0:	bf08      	it	eq
 800d2b2:	68f5      	ldreq	r5, [r6, #12]
 800d2b4:	e7da      	b.n	800d26c <_vfiprintf_r+0x20>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	0598      	lsls	r0, r3, #22
 800d2ba:	d4ed      	bmi.n	800d298 <_vfiprintf_r+0x4c>
 800d2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2be:	f7fd fbb5 	bl	800aa2c <__retarget_lock_release_recursive>
 800d2c2:	e7e9      	b.n	800d298 <_vfiprintf_r+0x4c>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c8:	2320      	movs	r3, #32
 800d2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d2:	2330      	movs	r3, #48	; 0x30
 800d2d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d498 <_vfiprintf_r+0x24c>
 800d2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2dc:	f04f 0901 	mov.w	r9, #1
 800d2e0:	4623      	mov	r3, r4
 800d2e2:	469a      	mov	sl, r3
 800d2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e8:	b10a      	cbz	r2, 800d2ee <_vfiprintf_r+0xa2>
 800d2ea:	2a25      	cmp	r2, #37	; 0x25
 800d2ec:	d1f9      	bne.n	800d2e2 <_vfiprintf_r+0x96>
 800d2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d2f2:	d00b      	beq.n	800d30c <_vfiprintf_r+0xc0>
 800d2f4:	465b      	mov	r3, fp
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7ff ff94 	bl	800d228 <__sfputs_r>
 800d300:	3001      	adds	r0, #1
 800d302:	f000 80aa 	beq.w	800d45a <_vfiprintf_r+0x20e>
 800d306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d308:	445a      	add	r2, fp
 800d30a:	9209      	str	r2, [sp, #36]	; 0x24
 800d30c:	f89a 3000 	ldrb.w	r3, [sl]
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 80a2 	beq.w	800d45a <_vfiprintf_r+0x20e>
 800d316:	2300      	movs	r3, #0
 800d318:	f04f 32ff 	mov.w	r2, #4294967295
 800d31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d320:	f10a 0a01 	add.w	sl, sl, #1
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	9307      	str	r3, [sp, #28]
 800d328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d32c:	931a      	str	r3, [sp, #104]	; 0x68
 800d32e:	4654      	mov	r4, sl
 800d330:	2205      	movs	r2, #5
 800d332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d336:	4858      	ldr	r0, [pc, #352]	; (800d498 <_vfiprintf_r+0x24c>)
 800d338:	f7f2 ff52 	bl	80001e0 <memchr>
 800d33c:	9a04      	ldr	r2, [sp, #16]
 800d33e:	b9d8      	cbnz	r0, 800d378 <_vfiprintf_r+0x12c>
 800d340:	06d1      	lsls	r1, r2, #27
 800d342:	bf44      	itt	mi
 800d344:	2320      	movmi	r3, #32
 800d346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34a:	0713      	lsls	r3, r2, #28
 800d34c:	bf44      	itt	mi
 800d34e:	232b      	movmi	r3, #43	; 0x2b
 800d350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d354:	f89a 3000 	ldrb.w	r3, [sl]
 800d358:	2b2a      	cmp	r3, #42	; 0x2a
 800d35a:	d015      	beq.n	800d388 <_vfiprintf_r+0x13c>
 800d35c:	9a07      	ldr	r2, [sp, #28]
 800d35e:	4654      	mov	r4, sl
 800d360:	2000      	movs	r0, #0
 800d362:	f04f 0c0a 	mov.w	ip, #10
 800d366:	4621      	mov	r1, r4
 800d368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36c:	3b30      	subs	r3, #48	; 0x30
 800d36e:	2b09      	cmp	r3, #9
 800d370:	d94e      	bls.n	800d410 <_vfiprintf_r+0x1c4>
 800d372:	b1b0      	cbz	r0, 800d3a2 <_vfiprintf_r+0x156>
 800d374:	9207      	str	r2, [sp, #28]
 800d376:	e014      	b.n	800d3a2 <_vfiprintf_r+0x156>
 800d378:	eba0 0308 	sub.w	r3, r0, r8
 800d37c:	fa09 f303 	lsl.w	r3, r9, r3
 800d380:	4313      	orrs	r3, r2
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	46a2      	mov	sl, r4
 800d386:	e7d2      	b.n	800d32e <_vfiprintf_r+0xe2>
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	1d19      	adds	r1, r3, #4
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	9103      	str	r1, [sp, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	bfbb      	ittet	lt
 800d394:	425b      	neglt	r3, r3
 800d396:	f042 0202 	orrlt.w	r2, r2, #2
 800d39a:	9307      	strge	r3, [sp, #28]
 800d39c:	9307      	strlt	r3, [sp, #28]
 800d39e:	bfb8      	it	lt
 800d3a0:	9204      	strlt	r2, [sp, #16]
 800d3a2:	7823      	ldrb	r3, [r4, #0]
 800d3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a6:	d10c      	bne.n	800d3c2 <_vfiprintf_r+0x176>
 800d3a8:	7863      	ldrb	r3, [r4, #1]
 800d3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ac:	d135      	bne.n	800d41a <_vfiprintf_r+0x1ce>
 800d3ae:	9b03      	ldr	r3, [sp, #12]
 800d3b0:	1d1a      	adds	r2, r3, #4
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	9203      	str	r2, [sp, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	bfb8      	it	lt
 800d3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3be:	3402      	adds	r4, #2
 800d3c0:	9305      	str	r3, [sp, #20]
 800d3c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4a8 <_vfiprintf_r+0x25c>
 800d3c6:	7821      	ldrb	r1, [r4, #0]
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	4650      	mov	r0, sl
 800d3cc:	f7f2 ff08 	bl	80001e0 <memchr>
 800d3d0:	b140      	cbz	r0, 800d3e4 <_vfiprintf_r+0x198>
 800d3d2:	2340      	movs	r3, #64	; 0x40
 800d3d4:	eba0 000a 	sub.w	r0, r0, sl
 800d3d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	4303      	orrs	r3, r0
 800d3e0:	3401      	adds	r4, #1
 800d3e2:	9304      	str	r3, [sp, #16]
 800d3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e8:	482c      	ldr	r0, [pc, #176]	; (800d49c <_vfiprintf_r+0x250>)
 800d3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ee:	2206      	movs	r2, #6
 800d3f0:	f7f2 fef6 	bl	80001e0 <memchr>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d03f      	beq.n	800d478 <_vfiprintf_r+0x22c>
 800d3f8:	4b29      	ldr	r3, [pc, #164]	; (800d4a0 <_vfiprintf_r+0x254>)
 800d3fa:	bb1b      	cbnz	r3, 800d444 <_vfiprintf_r+0x1f8>
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	3307      	adds	r3, #7
 800d400:	f023 0307 	bic.w	r3, r3, #7
 800d404:	3308      	adds	r3, #8
 800d406:	9303      	str	r3, [sp, #12]
 800d408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40a:	443b      	add	r3, r7
 800d40c:	9309      	str	r3, [sp, #36]	; 0x24
 800d40e:	e767      	b.n	800d2e0 <_vfiprintf_r+0x94>
 800d410:	fb0c 3202 	mla	r2, ip, r2, r3
 800d414:	460c      	mov	r4, r1
 800d416:	2001      	movs	r0, #1
 800d418:	e7a5      	b.n	800d366 <_vfiprintf_r+0x11a>
 800d41a:	2300      	movs	r3, #0
 800d41c:	3401      	adds	r4, #1
 800d41e:	9305      	str	r3, [sp, #20]
 800d420:	4619      	mov	r1, r3
 800d422:	f04f 0c0a 	mov.w	ip, #10
 800d426:	4620      	mov	r0, r4
 800d428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42c:	3a30      	subs	r2, #48	; 0x30
 800d42e:	2a09      	cmp	r2, #9
 800d430:	d903      	bls.n	800d43a <_vfiprintf_r+0x1ee>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0c5      	beq.n	800d3c2 <_vfiprintf_r+0x176>
 800d436:	9105      	str	r1, [sp, #20]
 800d438:	e7c3      	b.n	800d3c2 <_vfiprintf_r+0x176>
 800d43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d43e:	4604      	mov	r4, r0
 800d440:	2301      	movs	r3, #1
 800d442:	e7f0      	b.n	800d426 <_vfiprintf_r+0x1da>
 800d444:	ab03      	add	r3, sp, #12
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	462a      	mov	r2, r5
 800d44a:	4b16      	ldr	r3, [pc, #88]	; (800d4a4 <_vfiprintf_r+0x258>)
 800d44c:	a904      	add	r1, sp, #16
 800d44e:	4630      	mov	r0, r6
 800d450:	f7fd fc38 	bl	800acc4 <_printf_float>
 800d454:	4607      	mov	r7, r0
 800d456:	1c78      	adds	r0, r7, #1
 800d458:	d1d6      	bne.n	800d408 <_vfiprintf_r+0x1bc>
 800d45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d45c:	07d9      	lsls	r1, r3, #31
 800d45e:	d405      	bmi.n	800d46c <_vfiprintf_r+0x220>
 800d460:	89ab      	ldrh	r3, [r5, #12]
 800d462:	059a      	lsls	r2, r3, #22
 800d464:	d402      	bmi.n	800d46c <_vfiprintf_r+0x220>
 800d466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d468:	f7fd fae0 	bl	800aa2c <__retarget_lock_release_recursive>
 800d46c:	89ab      	ldrh	r3, [r5, #12]
 800d46e:	065b      	lsls	r3, r3, #25
 800d470:	f53f af12 	bmi.w	800d298 <_vfiprintf_r+0x4c>
 800d474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d476:	e711      	b.n	800d29c <_vfiprintf_r+0x50>
 800d478:	ab03      	add	r3, sp, #12
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	462a      	mov	r2, r5
 800d47e:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <_vfiprintf_r+0x258>)
 800d480:	a904      	add	r1, sp, #16
 800d482:	4630      	mov	r0, r6
 800d484:	f7fd fec2 	bl	800b20c <_printf_i>
 800d488:	e7e4      	b.n	800d454 <_vfiprintf_r+0x208>
 800d48a:	bf00      	nop
 800d48c:	0800e38c 	.word	0x0800e38c
 800d490:	0800e3ac 	.word	0x0800e3ac
 800d494:	0800e36c 	.word	0x0800e36c
 800d498:	0800e6f4 	.word	0x0800e6f4
 800d49c:	0800e6fe 	.word	0x0800e6fe
 800d4a0:	0800acc5 	.word	0x0800acc5
 800d4a4:	0800d229 	.word	0x0800d229
 800d4a8:	0800e6fa 	.word	0x0800e6fa

0800d4ac <__swbuf_r>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	460e      	mov	r6, r1
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	b118      	cbz	r0, 800d4be <__swbuf_r+0x12>
 800d4b6:	6983      	ldr	r3, [r0, #24]
 800d4b8:	b90b      	cbnz	r3, 800d4be <__swbuf_r+0x12>
 800d4ba:	f7fd f9f3 	bl	800a8a4 <__sinit>
 800d4be:	4b21      	ldr	r3, [pc, #132]	; (800d544 <__swbuf_r+0x98>)
 800d4c0:	429c      	cmp	r4, r3
 800d4c2:	d12b      	bne.n	800d51c <__swbuf_r+0x70>
 800d4c4:	686c      	ldr	r4, [r5, #4]
 800d4c6:	69a3      	ldr	r3, [r4, #24]
 800d4c8:	60a3      	str	r3, [r4, #8]
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	071a      	lsls	r2, r3, #28
 800d4ce:	d52f      	bpl.n	800d530 <__swbuf_r+0x84>
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	b36b      	cbz	r3, 800d530 <__swbuf_r+0x84>
 800d4d4:	6923      	ldr	r3, [r4, #16]
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	1ac0      	subs	r0, r0, r3
 800d4da:	6963      	ldr	r3, [r4, #20]
 800d4dc:	b2f6      	uxtb	r6, r6
 800d4de:	4283      	cmp	r3, r0
 800d4e0:	4637      	mov	r7, r6
 800d4e2:	dc04      	bgt.n	800d4ee <__swbuf_r+0x42>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7ff f842 	bl	800c570 <_fflush_r>
 800d4ec:	bb30      	cbnz	r0, 800d53c <__swbuf_r+0x90>
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	60a3      	str	r3, [r4, #8]
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	6022      	str	r2, [r4, #0]
 800d4fa:	701e      	strb	r6, [r3, #0]
 800d4fc:	6963      	ldr	r3, [r4, #20]
 800d4fe:	3001      	adds	r0, #1
 800d500:	4283      	cmp	r3, r0
 800d502:	d004      	beq.n	800d50e <__swbuf_r+0x62>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	07db      	lsls	r3, r3, #31
 800d508:	d506      	bpl.n	800d518 <__swbuf_r+0x6c>
 800d50a:	2e0a      	cmp	r6, #10
 800d50c:	d104      	bne.n	800d518 <__swbuf_r+0x6c>
 800d50e:	4621      	mov	r1, r4
 800d510:	4628      	mov	r0, r5
 800d512:	f7ff f82d 	bl	800c570 <_fflush_r>
 800d516:	b988      	cbnz	r0, 800d53c <__swbuf_r+0x90>
 800d518:	4638      	mov	r0, r7
 800d51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d51c:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <__swbuf_r+0x9c>)
 800d51e:	429c      	cmp	r4, r3
 800d520:	d101      	bne.n	800d526 <__swbuf_r+0x7a>
 800d522:	68ac      	ldr	r4, [r5, #8]
 800d524:	e7cf      	b.n	800d4c6 <__swbuf_r+0x1a>
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <__swbuf_r+0xa0>)
 800d528:	429c      	cmp	r4, r3
 800d52a:	bf08      	it	eq
 800d52c:	68ec      	ldreq	r4, [r5, #12]
 800d52e:	e7ca      	b.n	800d4c6 <__swbuf_r+0x1a>
 800d530:	4621      	mov	r1, r4
 800d532:	4628      	mov	r0, r5
 800d534:	f000 f81a 	bl	800d56c <__swsetup_r>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d0cb      	beq.n	800d4d4 <__swbuf_r+0x28>
 800d53c:	f04f 37ff 	mov.w	r7, #4294967295
 800d540:	e7ea      	b.n	800d518 <__swbuf_r+0x6c>
 800d542:	bf00      	nop
 800d544:	0800e38c 	.word	0x0800e38c
 800d548:	0800e3ac 	.word	0x0800e3ac
 800d54c:	0800e36c 	.word	0x0800e36c

0800d550 <__ascii_wctomb>:
 800d550:	b149      	cbz	r1, 800d566 <__ascii_wctomb+0x16>
 800d552:	2aff      	cmp	r2, #255	; 0xff
 800d554:	bf85      	ittet	hi
 800d556:	238a      	movhi	r3, #138	; 0x8a
 800d558:	6003      	strhi	r3, [r0, #0]
 800d55a:	700a      	strbls	r2, [r1, #0]
 800d55c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d560:	bf98      	it	ls
 800d562:	2001      	movls	r0, #1
 800d564:	4770      	bx	lr
 800d566:	4608      	mov	r0, r1
 800d568:	4770      	bx	lr
	...

0800d56c <__swsetup_r>:
 800d56c:	4b32      	ldr	r3, [pc, #200]	; (800d638 <__swsetup_r+0xcc>)
 800d56e:	b570      	push	{r4, r5, r6, lr}
 800d570:	681d      	ldr	r5, [r3, #0]
 800d572:	4606      	mov	r6, r0
 800d574:	460c      	mov	r4, r1
 800d576:	b125      	cbz	r5, 800d582 <__swsetup_r+0x16>
 800d578:	69ab      	ldr	r3, [r5, #24]
 800d57a:	b913      	cbnz	r3, 800d582 <__swsetup_r+0x16>
 800d57c:	4628      	mov	r0, r5
 800d57e:	f7fd f991 	bl	800a8a4 <__sinit>
 800d582:	4b2e      	ldr	r3, [pc, #184]	; (800d63c <__swsetup_r+0xd0>)
 800d584:	429c      	cmp	r4, r3
 800d586:	d10f      	bne.n	800d5a8 <__swsetup_r+0x3c>
 800d588:	686c      	ldr	r4, [r5, #4]
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d590:	0719      	lsls	r1, r3, #28
 800d592:	d42c      	bmi.n	800d5ee <__swsetup_r+0x82>
 800d594:	06dd      	lsls	r5, r3, #27
 800d596:	d411      	bmi.n	800d5bc <__swsetup_r+0x50>
 800d598:	2309      	movs	r3, #9
 800d59a:	6033      	str	r3, [r6, #0]
 800d59c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5a0:	81a3      	strh	r3, [r4, #12]
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a6:	e03e      	b.n	800d626 <__swsetup_r+0xba>
 800d5a8:	4b25      	ldr	r3, [pc, #148]	; (800d640 <__swsetup_r+0xd4>)
 800d5aa:	429c      	cmp	r4, r3
 800d5ac:	d101      	bne.n	800d5b2 <__swsetup_r+0x46>
 800d5ae:	68ac      	ldr	r4, [r5, #8]
 800d5b0:	e7eb      	b.n	800d58a <__swsetup_r+0x1e>
 800d5b2:	4b24      	ldr	r3, [pc, #144]	; (800d644 <__swsetup_r+0xd8>)
 800d5b4:	429c      	cmp	r4, r3
 800d5b6:	bf08      	it	eq
 800d5b8:	68ec      	ldreq	r4, [r5, #12]
 800d5ba:	e7e6      	b.n	800d58a <__swsetup_r+0x1e>
 800d5bc:	0758      	lsls	r0, r3, #29
 800d5be:	d512      	bpl.n	800d5e6 <__swsetup_r+0x7a>
 800d5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5c2:	b141      	cbz	r1, 800d5d6 <__swsetup_r+0x6a>
 800d5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5c8:	4299      	cmp	r1, r3
 800d5ca:	d002      	beq.n	800d5d2 <__swsetup_r+0x66>
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7ff fbcf 	bl	800cd70 <_free_r>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	6363      	str	r3, [r4, #52]	; 0x34
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5dc:	81a3      	strh	r3, [r4, #12]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	6063      	str	r3, [r4, #4]
 800d5e2:	6923      	ldr	r3, [r4, #16]
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	f043 0308 	orr.w	r3, r3, #8
 800d5ec:	81a3      	strh	r3, [r4, #12]
 800d5ee:	6923      	ldr	r3, [r4, #16]
 800d5f0:	b94b      	cbnz	r3, 800d606 <__swsetup_r+0x9a>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5fc:	d003      	beq.n	800d606 <__swsetup_r+0x9a>
 800d5fe:	4621      	mov	r1, r4
 800d600:	4630      	mov	r0, r6
 800d602:	f000 f84d 	bl	800d6a0 <__smakebuf_r>
 800d606:	89a0      	ldrh	r0, [r4, #12]
 800d608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d60c:	f010 0301 	ands.w	r3, r0, #1
 800d610:	d00a      	beq.n	800d628 <__swsetup_r+0xbc>
 800d612:	2300      	movs	r3, #0
 800d614:	60a3      	str	r3, [r4, #8]
 800d616:	6963      	ldr	r3, [r4, #20]
 800d618:	425b      	negs	r3, r3
 800d61a:	61a3      	str	r3, [r4, #24]
 800d61c:	6923      	ldr	r3, [r4, #16]
 800d61e:	b943      	cbnz	r3, 800d632 <__swsetup_r+0xc6>
 800d620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d624:	d1ba      	bne.n	800d59c <__swsetup_r+0x30>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	0781      	lsls	r1, r0, #30
 800d62a:	bf58      	it	pl
 800d62c:	6963      	ldrpl	r3, [r4, #20]
 800d62e:	60a3      	str	r3, [r4, #8]
 800d630:	e7f4      	b.n	800d61c <__swsetup_r+0xb0>
 800d632:	2000      	movs	r0, #0
 800d634:	e7f7      	b.n	800d626 <__swsetup_r+0xba>
 800d636:	bf00      	nop
 800d638:	20000034 	.word	0x20000034
 800d63c:	0800e38c 	.word	0x0800e38c
 800d640:	0800e3ac 	.word	0x0800e3ac
 800d644:	0800e36c 	.word	0x0800e36c

0800d648 <abort>:
 800d648:	b508      	push	{r3, lr}
 800d64a:	2006      	movs	r0, #6
 800d64c:	f000 f898 	bl	800d780 <raise>
 800d650:	2001      	movs	r0, #1
 800d652:	f7f5 fbe3 	bl	8002e1c <_exit>

0800d656 <__swhatbuf_r>:
 800d656:	b570      	push	{r4, r5, r6, lr}
 800d658:	460e      	mov	r6, r1
 800d65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65e:	2900      	cmp	r1, #0
 800d660:	b096      	sub	sp, #88	; 0x58
 800d662:	4614      	mov	r4, r2
 800d664:	461d      	mov	r5, r3
 800d666:	da08      	bge.n	800d67a <__swhatbuf_r+0x24>
 800d668:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	602a      	str	r2, [r5, #0]
 800d670:	061a      	lsls	r2, r3, #24
 800d672:	d410      	bmi.n	800d696 <__swhatbuf_r+0x40>
 800d674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d678:	e00e      	b.n	800d698 <__swhatbuf_r+0x42>
 800d67a:	466a      	mov	r2, sp
 800d67c:	f000 f89c 	bl	800d7b8 <_fstat_r>
 800d680:	2800      	cmp	r0, #0
 800d682:	dbf1      	blt.n	800d668 <__swhatbuf_r+0x12>
 800d684:	9a01      	ldr	r2, [sp, #4]
 800d686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d68a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d68e:	425a      	negs	r2, r3
 800d690:	415a      	adcs	r2, r3
 800d692:	602a      	str	r2, [r5, #0]
 800d694:	e7ee      	b.n	800d674 <__swhatbuf_r+0x1e>
 800d696:	2340      	movs	r3, #64	; 0x40
 800d698:	2000      	movs	r0, #0
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	b016      	add	sp, #88	; 0x58
 800d69e:	bd70      	pop	{r4, r5, r6, pc}

0800d6a0 <__smakebuf_r>:
 800d6a0:	898b      	ldrh	r3, [r1, #12]
 800d6a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6a4:	079d      	lsls	r5, r3, #30
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	d507      	bpl.n	800d6bc <__smakebuf_r+0x1c>
 800d6ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	6123      	str	r3, [r4, #16]
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	6163      	str	r3, [r4, #20]
 800d6b8:	b002      	add	sp, #8
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	ab01      	add	r3, sp, #4
 800d6be:	466a      	mov	r2, sp
 800d6c0:	f7ff ffc9 	bl	800d656 <__swhatbuf_r>
 800d6c4:	9900      	ldr	r1, [sp, #0]
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f7fd f9e7 	bl	800aa9c <_malloc_r>
 800d6ce:	b948      	cbnz	r0, 800d6e4 <__smakebuf_r+0x44>
 800d6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d4:	059a      	lsls	r2, r3, #22
 800d6d6:	d4ef      	bmi.n	800d6b8 <__smakebuf_r+0x18>
 800d6d8:	f023 0303 	bic.w	r3, r3, #3
 800d6dc:	f043 0302 	orr.w	r3, r3, #2
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	e7e3      	b.n	800d6ac <__smakebuf_r+0xc>
 800d6e4:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <__smakebuf_r+0x7c>)
 800d6e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	6020      	str	r0, [r4, #0]
 800d6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	9b00      	ldr	r3, [sp, #0]
 800d6f4:	6163      	str	r3, [r4, #20]
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	6120      	str	r0, [r4, #16]
 800d6fa:	b15b      	cbz	r3, 800d714 <__smakebuf_r+0x74>
 800d6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d700:	4630      	mov	r0, r6
 800d702:	f000 f86b 	bl	800d7dc <_isatty_r>
 800d706:	b128      	cbz	r0, 800d714 <__smakebuf_r+0x74>
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	f023 0303 	bic.w	r3, r3, #3
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	81a3      	strh	r3, [r4, #12]
 800d714:	89a0      	ldrh	r0, [r4, #12]
 800d716:	4305      	orrs	r5, r0
 800d718:	81a5      	strh	r5, [r4, #12]
 800d71a:	e7cd      	b.n	800d6b8 <__smakebuf_r+0x18>
 800d71c:	0800a83d 	.word	0x0800a83d

0800d720 <_malloc_usable_size_r>:
 800d720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d724:	1f18      	subs	r0, r3, #4
 800d726:	2b00      	cmp	r3, #0
 800d728:	bfbc      	itt	lt
 800d72a:	580b      	ldrlt	r3, [r1, r0]
 800d72c:	18c0      	addlt	r0, r0, r3
 800d72e:	4770      	bx	lr

0800d730 <_raise_r>:
 800d730:	291f      	cmp	r1, #31
 800d732:	b538      	push	{r3, r4, r5, lr}
 800d734:	4604      	mov	r4, r0
 800d736:	460d      	mov	r5, r1
 800d738:	d904      	bls.n	800d744 <_raise_r+0x14>
 800d73a:	2316      	movs	r3, #22
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295
 800d742:	bd38      	pop	{r3, r4, r5, pc}
 800d744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d746:	b112      	cbz	r2, 800d74e <_raise_r+0x1e>
 800d748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d74c:	b94b      	cbnz	r3, 800d762 <_raise_r+0x32>
 800d74e:	4620      	mov	r0, r4
 800d750:	f000 f830 	bl	800d7b4 <_getpid_r>
 800d754:	462a      	mov	r2, r5
 800d756:	4601      	mov	r1, r0
 800d758:	4620      	mov	r0, r4
 800d75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d75e:	f000 b817 	b.w	800d790 <_kill_r>
 800d762:	2b01      	cmp	r3, #1
 800d764:	d00a      	beq.n	800d77c <_raise_r+0x4c>
 800d766:	1c59      	adds	r1, r3, #1
 800d768:	d103      	bne.n	800d772 <_raise_r+0x42>
 800d76a:	2316      	movs	r3, #22
 800d76c:	6003      	str	r3, [r0, #0]
 800d76e:	2001      	movs	r0, #1
 800d770:	e7e7      	b.n	800d742 <_raise_r+0x12>
 800d772:	2400      	movs	r4, #0
 800d774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d778:	4628      	mov	r0, r5
 800d77a:	4798      	blx	r3
 800d77c:	2000      	movs	r0, #0
 800d77e:	e7e0      	b.n	800d742 <_raise_r+0x12>

0800d780 <raise>:
 800d780:	4b02      	ldr	r3, [pc, #8]	; (800d78c <raise+0xc>)
 800d782:	4601      	mov	r1, r0
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f7ff bfd3 	b.w	800d730 <_raise_r>
 800d78a:	bf00      	nop
 800d78c:	20000034 	.word	0x20000034

0800d790 <_kill_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d07      	ldr	r5, [pc, #28]	; (800d7b0 <_kill_r+0x20>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	4611      	mov	r1, r2
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	f7f5 fb2d 	bl	8002dfc <_kill>
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	d102      	bne.n	800d7ac <_kill_r+0x1c>
 800d7a6:	682b      	ldr	r3, [r5, #0]
 800d7a8:	b103      	cbz	r3, 800d7ac <_kill_r+0x1c>
 800d7aa:	6023      	str	r3, [r4, #0]
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
 800d7ae:	bf00      	nop
 800d7b0:	200053e4 	.word	0x200053e4

0800d7b4 <_getpid_r>:
 800d7b4:	f7f5 bb1a 	b.w	8002dec <_getpid>

0800d7b8 <_fstat_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	; (800d7d8 <_fstat_r+0x20>)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4604      	mov	r4, r0
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	f7f5 fb78 	bl	8002eba <_fstat>
 800d7ca:	1c43      	adds	r3, r0, #1
 800d7cc:	d102      	bne.n	800d7d4 <_fstat_r+0x1c>
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	b103      	cbz	r3, 800d7d4 <_fstat_r+0x1c>
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	bd38      	pop	{r3, r4, r5, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200053e4 	.word	0x200053e4

0800d7dc <_isatty_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d06      	ldr	r5, [pc, #24]	; (800d7f8 <_isatty_r+0x1c>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	602b      	str	r3, [r5, #0]
 800d7e8:	f7f5 fb77 	bl	8002eda <_isatty>
 800d7ec:	1c43      	adds	r3, r0, #1
 800d7ee:	d102      	bne.n	800d7f6 <_isatty_r+0x1a>
 800d7f0:	682b      	ldr	r3, [r5, #0]
 800d7f2:	b103      	cbz	r3, 800d7f6 <_isatty_r+0x1a>
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	bd38      	pop	{r3, r4, r5, pc}
 800d7f8:	200053e4 	.word	0x200053e4

0800d7fc <_init>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr

0800d808 <_fini>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	bf00      	nop
 800d80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80e:	bc08      	pop	{r3}
 800d810:	469e      	mov	lr, r3
 800d812:	4770      	bx	lr
